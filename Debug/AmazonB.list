
AmazonB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b48  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08006c88  08006c88  00007c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f38  08006f38  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f38  08006f38  00007f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f40  08006f40  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f40  08006f40  00007f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f44  08006f44  00007f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006f48  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004574  20000014  08006f5c  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004588  08006f5c  00008588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f91  00000000  00000000  0000803d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f23  00000000  00000000  0001afce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0001def8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4f  00000000  00000000  0001f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b12  00000000  00000000  0001fd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135d1  00000000  00000000  00038899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c7d8  00000000  00000000  0004be6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8642  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004970  00000000  00000000  000e8688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ecff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	08006c70 	.word	0x08006c70

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	08006c70 	.word	0x08006c70

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_frsub>:
 8000190:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__addsf3>
 8000196:	bf00      	nop

08000198 <__aeabi_fsub>:
 8000198:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800019c <__addsf3>:
 800019c:	0042      	lsls	r2, r0, #1
 800019e:	bf1f      	itttt	ne
 80001a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001a4:	ea92 0f03 	teqne	r2, r3
 80001a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001b0:	d06a      	beq.n	8000288 <__addsf3+0xec>
 80001b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001ba:	bfc1      	itttt	gt
 80001bc:	18d2      	addgt	r2, r2, r3
 80001be:	4041      	eorgt	r1, r0
 80001c0:	4048      	eorgt	r0, r1
 80001c2:	4041      	eorgt	r1, r0
 80001c4:	bfb8      	it	lt
 80001c6:	425b      	neglt	r3, r3
 80001c8:	2b19      	cmp	r3, #25
 80001ca:	bf88      	it	hi
 80001cc:	4770      	bxhi	lr
 80001ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001da:	bf18      	it	ne
 80001dc:	4240      	negne	r0, r0
 80001de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ea:	bf18      	it	ne
 80001ec:	4249      	negne	r1, r1
 80001ee:	ea92 0f03 	teq	r2, r3
 80001f2:	d03f      	beq.n	8000274 <__addsf3+0xd8>
 80001f4:	f1a2 0201 	sub.w	r2, r2, #1
 80001f8:	fa41 fc03 	asr.w	ip, r1, r3
 80001fc:	eb10 000c 	adds.w	r0, r0, ip
 8000200:	f1c3 0320 	rsb	r3, r3, #32
 8000204:	fa01 f103 	lsl.w	r1, r1, r3
 8000208:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800020c:	d502      	bpl.n	8000214 <__addsf3+0x78>
 800020e:	4249      	negs	r1, r1
 8000210:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000214:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000218:	d313      	bcc.n	8000242 <__addsf3+0xa6>
 800021a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800021e:	d306      	bcc.n	800022e <__addsf3+0x92>
 8000220:	0840      	lsrs	r0, r0, #1
 8000222:	ea4f 0131 	mov.w	r1, r1, rrx
 8000226:	f102 0201 	add.w	r2, r2, #1
 800022a:	2afe      	cmp	r2, #254	@ 0xfe
 800022c:	d251      	bcs.n	80002d2 <__addsf3+0x136>
 800022e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000232:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000236:	bf08      	it	eq
 8000238:	f020 0001 	biceq.w	r0, r0, #1
 800023c:	ea40 0003 	orr.w	r0, r0, r3
 8000240:	4770      	bx	lr
 8000242:	0049      	lsls	r1, r1, #1
 8000244:	eb40 0000 	adc.w	r0, r0, r0
 8000248:	3a01      	subs	r2, #1
 800024a:	bf28      	it	cs
 800024c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000250:	d2ed      	bcs.n	800022e <__addsf3+0x92>
 8000252:	fab0 fc80 	clz	ip, r0
 8000256:	f1ac 0c08 	sub.w	ip, ip, #8
 800025a:	ebb2 020c 	subs.w	r2, r2, ip
 800025e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000262:	bfaa      	itet	ge
 8000264:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000268:	4252      	neglt	r2, r2
 800026a:	4318      	orrge	r0, r3
 800026c:	bfbc      	itt	lt
 800026e:	40d0      	lsrlt	r0, r2
 8000270:	4318      	orrlt	r0, r3
 8000272:	4770      	bx	lr
 8000274:	f092 0f00 	teq	r2, #0
 8000278:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800027c:	bf06      	itte	eq
 800027e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000282:	3201      	addeq	r2, #1
 8000284:	3b01      	subne	r3, #1
 8000286:	e7b5      	b.n	80001f4 <__addsf3+0x58>
 8000288:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800028c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000290:	bf18      	it	ne
 8000292:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000296:	d021      	beq.n	80002dc <__addsf3+0x140>
 8000298:	ea92 0f03 	teq	r2, r3
 800029c:	d004      	beq.n	80002a8 <__addsf3+0x10c>
 800029e:	f092 0f00 	teq	r2, #0
 80002a2:	bf08      	it	eq
 80002a4:	4608      	moveq	r0, r1
 80002a6:	4770      	bx	lr
 80002a8:	ea90 0f01 	teq	r0, r1
 80002ac:	bf1c      	itt	ne
 80002ae:	2000      	movne	r0, #0
 80002b0:	4770      	bxne	lr
 80002b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80002b6:	d104      	bne.n	80002c2 <__addsf3+0x126>
 80002b8:	0040      	lsls	r0, r0, #1
 80002ba:	bf28      	it	cs
 80002bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002c0:	4770      	bx	lr
 80002c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002c6:	bf3c      	itt	cc
 80002c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002cc:	4770      	bxcc	lr
 80002ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002da:	4770      	bx	lr
 80002dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002e0:	bf16      	itet	ne
 80002e2:	4608      	movne	r0, r1
 80002e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002e8:	4601      	movne	r1, r0
 80002ea:	0242      	lsls	r2, r0, #9
 80002ec:	bf06      	itte	eq
 80002ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002f2:	ea90 0f01 	teqeq	r0, r1
 80002f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002fa:	4770      	bx	lr

080002fc <__aeabi_ui2f>:
 80002fc:	f04f 0300 	mov.w	r3, #0
 8000300:	e004      	b.n	800030c <__aeabi_i2f+0x8>
 8000302:	bf00      	nop

08000304 <__aeabi_i2f>:
 8000304:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000308:	bf48      	it	mi
 800030a:	4240      	negmi	r0, r0
 800030c:	ea5f 0c00 	movs.w	ip, r0
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000318:	4601      	mov	r1, r0
 800031a:	f04f 0000 	mov.w	r0, #0
 800031e:	e01c      	b.n	800035a <__aeabi_l2f+0x2a>

08000320 <__aeabi_ul2f>:
 8000320:	ea50 0201 	orrs.w	r2, r0, r1
 8000324:	bf08      	it	eq
 8000326:	4770      	bxeq	lr
 8000328:	f04f 0300 	mov.w	r3, #0
 800032c:	e00a      	b.n	8000344 <__aeabi_l2f+0x14>
 800032e:	bf00      	nop

08000330 <__aeabi_l2f>:
 8000330:	ea50 0201 	orrs.w	r2, r0, r1
 8000334:	bf08      	it	eq
 8000336:	4770      	bxeq	lr
 8000338:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800033c:	d502      	bpl.n	8000344 <__aeabi_l2f+0x14>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	ea5f 0c01 	movs.w	ip, r1
 8000348:	bf02      	ittt	eq
 800034a:	4684      	moveq	ip, r0
 800034c:	4601      	moveq	r1, r0
 800034e:	2000      	moveq	r0, #0
 8000350:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000354:	bf08      	it	eq
 8000356:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800035a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800035e:	fabc f28c 	clz	r2, ip
 8000362:	3a08      	subs	r2, #8
 8000364:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000368:	db10      	blt.n	800038c <__aeabi_l2f+0x5c>
 800036a:	fa01 fc02 	lsl.w	ip, r1, r2
 800036e:	4463      	add	r3, ip
 8000370:	fa00 fc02 	lsl.w	ip, r0, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800037c:	fa20 f202 	lsr.w	r2, r0, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	f020 0001 	biceq.w	r0, r0, #1
 800038a:	4770      	bx	lr
 800038c:	f102 0220 	add.w	r2, r2, #32
 8000390:	fa01 fc02 	lsl.w	ip, r1, r2
 8000394:	f1c2 0220 	rsb	r2, r2, #32
 8000398:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800039c:	fa21 f202 	lsr.w	r2, r1, r2
 80003a0:	eb43 0002 	adc.w	r0, r3, r2
 80003a4:	bf08      	it	eq
 80003a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003aa:	4770      	bx	lr

080003ac <__aeabi_fmul>:
 80003ac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003b4:	bf1e      	ittt	ne
 80003b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ba:	ea92 0f0c 	teqne	r2, ip
 80003be:	ea93 0f0c 	teqne	r3, ip
 80003c2:	d06f      	beq.n	80004a4 <__aeabi_fmul+0xf8>
 80003c4:	441a      	add	r2, r3
 80003c6:	ea80 0c01 	eor.w	ip, r0, r1
 80003ca:	0240      	lsls	r0, r0, #9
 80003cc:	bf18      	it	ne
 80003ce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003d2:	d01e      	beq.n	8000412 <__aeabi_fmul+0x66>
 80003d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003d8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003dc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003e0:	fba0 3101 	umull	r3, r1, r0, r1
 80003e4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003e8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ec:	bf3e      	ittt	cc
 80003ee:	0049      	lslcc	r1, r1, #1
 80003f0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003f4:	005b      	lslcc	r3, r3, #1
 80003f6:	ea40 0001 	orr.w	r0, r0, r1
 80003fa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003fe:	2afd      	cmp	r2, #253	@ 0xfd
 8000400:	d81d      	bhi.n	800043e <__aeabi_fmul+0x92>
 8000402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000406:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800040a:	bf08      	it	eq
 800040c:	f020 0001 	biceq.w	r0, r0, #1
 8000410:	4770      	bx	lr
 8000412:	f090 0f00 	teq	r0, #0
 8000416:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800041a:	bf08      	it	eq
 800041c:	0249      	lsleq	r1, r1, #9
 800041e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000422:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000426:	3a7f      	subs	r2, #127	@ 0x7f
 8000428:	bfc2      	ittt	gt
 800042a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800042e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000432:	4770      	bxgt	lr
 8000434:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000438:	f04f 0300 	mov.w	r3, #0
 800043c:	3a01      	subs	r2, #1
 800043e:	dc5d      	bgt.n	80004fc <__aeabi_fmul+0x150>
 8000440:	f112 0f19 	cmn.w	r2, #25
 8000444:	bfdc      	itt	le
 8000446:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800044a:	4770      	bxle	lr
 800044c:	f1c2 0200 	rsb	r2, r2, #0
 8000450:	0041      	lsls	r1, r0, #1
 8000452:	fa21 f102 	lsr.w	r1, r1, r2
 8000456:	f1c2 0220 	rsb	r2, r2, #32
 800045a:	fa00 fc02 	lsl.w	ip, r0, r2
 800045e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000462:	f140 0000 	adc.w	r0, r0, #0
 8000466:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800046a:	bf08      	it	eq
 800046c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000470:	4770      	bx	lr
 8000472:	f092 0f00 	teq	r2, #0
 8000476:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800047a:	bf02      	ittt	eq
 800047c:	0040      	lsleq	r0, r0, #1
 800047e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000482:	3a01      	subeq	r2, #1
 8000484:	d0f9      	beq.n	800047a <__aeabi_fmul+0xce>
 8000486:	ea40 000c 	orr.w	r0, r0, ip
 800048a:	f093 0f00 	teq	r3, #0
 800048e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000492:	bf02      	ittt	eq
 8000494:	0049      	lsleq	r1, r1, #1
 8000496:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800049a:	3b01      	subeq	r3, #1
 800049c:	d0f9      	beq.n	8000492 <__aeabi_fmul+0xe6>
 800049e:	ea41 010c 	orr.w	r1, r1, ip
 80004a2:	e78f      	b.n	80003c4 <__aeabi_fmul+0x18>
 80004a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a8:	ea92 0f0c 	teq	r2, ip
 80004ac:	bf18      	it	ne
 80004ae:	ea93 0f0c 	teqne	r3, ip
 80004b2:	d00a      	beq.n	80004ca <__aeabi_fmul+0x11e>
 80004b4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004b8:	bf18      	it	ne
 80004ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004be:	d1d8      	bne.n	8000472 <__aeabi_fmul+0xc6>
 80004c0:	ea80 0001 	eor.w	r0, r0, r1
 80004c4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c8:	4770      	bx	lr
 80004ca:	f090 0f00 	teq	r0, #0
 80004ce:	bf17      	itett	ne
 80004d0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004d4:	4608      	moveq	r0, r1
 80004d6:	f091 0f00 	teqne	r1, #0
 80004da:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004de:	d014      	beq.n	800050a <__aeabi_fmul+0x15e>
 80004e0:	ea92 0f0c 	teq	r2, ip
 80004e4:	d101      	bne.n	80004ea <__aeabi_fmul+0x13e>
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	d10f      	bne.n	800050a <__aeabi_fmul+0x15e>
 80004ea:	ea93 0f0c 	teq	r3, ip
 80004ee:	d103      	bne.n	80004f8 <__aeabi_fmul+0x14c>
 80004f0:	024b      	lsls	r3, r1, #9
 80004f2:	bf18      	it	ne
 80004f4:	4608      	movne	r0, r1
 80004f6:	d108      	bne.n	800050a <__aeabi_fmul+0x15e>
 80004f8:	ea80 0001 	eor.w	r0, r0, r1
 80004fc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000500:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000504:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000508:	4770      	bx	lr
 800050a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800050e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000512:	4770      	bx	lr

08000514 <__aeabi_fdiv>:
 8000514:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000518:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800051c:	bf1e      	ittt	ne
 800051e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000522:	ea92 0f0c 	teqne	r2, ip
 8000526:	ea93 0f0c 	teqne	r3, ip
 800052a:	d069      	beq.n	8000600 <__aeabi_fdiv+0xec>
 800052c:	eba2 0203 	sub.w	r2, r2, r3
 8000530:	ea80 0c01 	eor.w	ip, r0, r1
 8000534:	0249      	lsls	r1, r1, #9
 8000536:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800053a:	d037      	beq.n	80005ac <__aeabi_fdiv+0x98>
 800053c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000540:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000544:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000548:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800054c:	428b      	cmp	r3, r1
 800054e:	bf38      	it	cc
 8000550:	005b      	lslcc	r3, r3, #1
 8000552:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000556:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800055a:	428b      	cmp	r3, r1
 800055c:	bf24      	itt	cs
 800055e:	1a5b      	subcs	r3, r3, r1
 8000560:	ea40 000c 	orrcs.w	r0, r0, ip
 8000564:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000568:	bf24      	itt	cs
 800056a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800056e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000572:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000576:	bf24      	itt	cs
 8000578:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800057c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000580:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000584:	bf24      	itt	cs
 8000586:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800058a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	bf18      	it	ne
 8000592:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000596:	d1e0      	bne.n	800055a <__aeabi_fdiv+0x46>
 8000598:	2afd      	cmp	r2, #253	@ 0xfd
 800059a:	f63f af50 	bhi.w	800043e <__aeabi_fmul+0x92>
 800059e:	428b      	cmp	r3, r1
 80005a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005a4:	bf08      	it	eq
 80005a6:	f020 0001 	biceq.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80005b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005b4:	327f      	adds	r2, #127	@ 0x7f
 80005b6:	bfc2      	ittt	gt
 80005b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80005bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005c0:	4770      	bxgt	lr
 80005c2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005c6:	f04f 0300 	mov.w	r3, #0
 80005ca:	3a01      	subs	r2, #1
 80005cc:	e737      	b.n	800043e <__aeabi_fmul+0x92>
 80005ce:	f092 0f00 	teq	r2, #0
 80005d2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005d6:	bf02      	ittt	eq
 80005d8:	0040      	lsleq	r0, r0, #1
 80005da:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005de:	3a01      	subeq	r2, #1
 80005e0:	d0f9      	beq.n	80005d6 <__aeabi_fdiv+0xc2>
 80005e2:	ea40 000c 	orr.w	r0, r0, ip
 80005e6:	f093 0f00 	teq	r3, #0
 80005ea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ee:	bf02      	ittt	eq
 80005f0:	0049      	lsleq	r1, r1, #1
 80005f2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005f6:	3b01      	subeq	r3, #1
 80005f8:	d0f9      	beq.n	80005ee <__aeabi_fdiv+0xda>
 80005fa:	ea41 010c 	orr.w	r1, r1, ip
 80005fe:	e795      	b.n	800052c <__aeabi_fdiv+0x18>
 8000600:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000604:	ea92 0f0c 	teq	r2, ip
 8000608:	d108      	bne.n	800061c <__aeabi_fdiv+0x108>
 800060a:	0242      	lsls	r2, r0, #9
 800060c:	f47f af7d 	bne.w	800050a <__aeabi_fmul+0x15e>
 8000610:	ea93 0f0c 	teq	r3, ip
 8000614:	f47f af70 	bne.w	80004f8 <__aeabi_fmul+0x14c>
 8000618:	4608      	mov	r0, r1
 800061a:	e776      	b.n	800050a <__aeabi_fmul+0x15e>
 800061c:	ea93 0f0c 	teq	r3, ip
 8000620:	d104      	bne.n	800062c <__aeabi_fdiv+0x118>
 8000622:	024b      	lsls	r3, r1, #9
 8000624:	f43f af4c 	beq.w	80004c0 <__aeabi_fmul+0x114>
 8000628:	4608      	mov	r0, r1
 800062a:	e76e      	b.n	800050a <__aeabi_fmul+0x15e>
 800062c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000630:	bf18      	it	ne
 8000632:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000636:	d1ca      	bne.n	80005ce <__aeabi_fdiv+0xba>
 8000638:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800063c:	f47f af5c 	bne.w	80004f8 <__aeabi_fmul+0x14c>
 8000640:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000644:	f47f af3c 	bne.w	80004c0 <__aeabi_fmul+0x114>
 8000648:	e75f      	b.n	800050a <__aeabi_fmul+0x15e>
 800064a:	bf00      	nop

0800064c <__gesf2>:
 800064c:	f04f 3cff 	mov.w	ip, #4294967295
 8000650:	e006      	b.n	8000660 <__cmpsf2+0x4>
 8000652:	bf00      	nop

08000654 <__lesf2>:
 8000654:	f04f 0c01 	mov.w	ip, #1
 8000658:	e002      	b.n	8000660 <__cmpsf2+0x4>
 800065a:	bf00      	nop

0800065c <__cmpsf2>:
 800065c:	f04f 0c01 	mov.w	ip, #1
 8000660:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000664:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000668:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	bf18      	it	ne
 8000672:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000676:	d011      	beq.n	800069c <__cmpsf2+0x40>
 8000678:	b001      	add	sp, #4
 800067a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800067e:	bf18      	it	ne
 8000680:	ea90 0f01 	teqne	r0, r1
 8000684:	bf58      	it	pl
 8000686:	ebb2 0003 	subspl.w	r0, r2, r3
 800068a:	bf88      	it	hi
 800068c:	17c8      	asrhi	r0, r1, #31
 800068e:	bf38      	it	cc
 8000690:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000694:	bf18      	it	ne
 8000696:	f040 0001 	orrne.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006a0:	d102      	bne.n	80006a8 <__cmpsf2+0x4c>
 80006a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80006a6:	d105      	bne.n	80006b4 <__cmpsf2+0x58>
 80006a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80006ac:	d1e4      	bne.n	8000678 <__cmpsf2+0x1c>
 80006ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80006b2:	d0e1      	beq.n	8000678 <__cmpsf2+0x1c>
 80006b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__aeabi_cfrcmple>:
 80006bc:	4684      	mov	ip, r0
 80006be:	4608      	mov	r0, r1
 80006c0:	4661      	mov	r1, ip
 80006c2:	e7ff      	b.n	80006c4 <__aeabi_cfcmpeq>

080006c4 <__aeabi_cfcmpeq>:
 80006c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006c6:	f7ff ffc9 	bl	800065c <__cmpsf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006d4 <__aeabi_fcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cfcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cfcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cfcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffd2 	bl	80006bc <__aeabi_cfrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_fcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc8 	bl	80006bc <__aeabi_cfrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_f2iz>:
 8000738:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800073c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000740:	d30f      	bcc.n	8000762 <__aeabi_f2iz+0x2a>
 8000742:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000746:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800074a:	d90d      	bls.n	8000768 <__aeabi_f2iz+0x30>
 800074c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000750:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000754:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000758:	fa23 f002 	lsr.w	r0, r3, r2
 800075c:	bf18      	it	ne
 800075e:	4240      	negne	r0, r0
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2iz+0x3a>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d105      	bne.n	800077e <__aeabi_f2iz+0x46>
 8000772:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000776:	bf08      	it	eq
 8000778:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800077c:	4770      	bx	lr
 800077e:	f04f 0000 	mov.w	r0, #0
 8000782:	4770      	bx	lr

08000784 <__aeabi_uldivmod>:
 8000784:	b953      	cbnz	r3, 800079c <__aeabi_uldivmod+0x18>
 8000786:	b94a      	cbnz	r2, 800079c <__aeabi_uldivmod+0x18>
 8000788:	2900      	cmp	r1, #0
 800078a:	bf08      	it	eq
 800078c:	2800      	cmpeq	r0, #0
 800078e:	bf1c      	itt	ne
 8000790:	f04f 31ff 	movne.w	r1, #4294967295
 8000794:	f04f 30ff 	movne.w	r0, #4294967295
 8000798:	f000 b98c 	b.w	8000ab4 <__aeabi_idiv0>
 800079c:	f1ad 0c08 	sub.w	ip, sp, #8
 80007a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007a4:	f000 f806 	bl	80007b4 <__udivmoddi4>
 80007a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b0:	b004      	add	sp, #16
 80007b2:	4770      	bx	lr

080007b4 <__udivmoddi4>:
 80007b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007b8:	9d08      	ldr	r5, [sp, #32]
 80007ba:	468e      	mov	lr, r1
 80007bc:	4604      	mov	r4, r0
 80007be:	4688      	mov	r8, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14a      	bne.n	800085a <__udivmoddi4+0xa6>
 80007c4:	428a      	cmp	r2, r1
 80007c6:	4617      	mov	r7, r2
 80007c8:	d962      	bls.n	8000890 <__udivmoddi4+0xdc>
 80007ca:	fab2 f682 	clz	r6, r2
 80007ce:	b14e      	cbz	r6, 80007e4 <__udivmoddi4+0x30>
 80007d0:	f1c6 0320 	rsb	r3, r6, #32
 80007d4:	fa01 f806 	lsl.w	r8, r1, r6
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	40b7      	lsls	r7, r6
 80007de:	ea43 0808 	orr.w	r8, r3, r8
 80007e2:	40b4      	lsls	r4, r6
 80007e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80007ec:	fa1f fc87 	uxth.w	ip, r7
 80007f0:	fb0e 8811 	mls	r8, lr, r1, r8
 80007f4:	fb01 f20c 	mul.w	r2, r1, ip
 80007f8:	0c23      	lsrs	r3, r4, #16
 80007fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007fe:	429a      	cmp	r2, r3
 8000800:	d909      	bls.n	8000816 <__udivmoddi4+0x62>
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	f101 30ff 	add.w	r0, r1, #4294967295
 8000808:	f080 80eb 	bcs.w	80009e2 <__udivmoddi4+0x22e>
 800080c:	429a      	cmp	r2, r3
 800080e:	f240 80e8 	bls.w	80009e2 <__udivmoddi4+0x22e>
 8000812:	3902      	subs	r1, #2
 8000814:	443b      	add	r3, r7
 8000816:	1a9a      	subs	r2, r3, r2
 8000818:	fbb2 f0fe 	udiv	r0, r2, lr
 800081c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000820:	fb00 fc0c 	mul.w	ip, r0, ip
 8000824:	b2a3      	uxth	r3, r4
 8000826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800082a:	459c      	cmp	ip, r3
 800082c:	d909      	bls.n	8000842 <__udivmoddi4+0x8e>
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	f100 32ff 	add.w	r2, r0, #4294967295
 8000834:	f080 80d7 	bcs.w	80009e6 <__udivmoddi4+0x232>
 8000838:	459c      	cmp	ip, r3
 800083a:	f240 80d4 	bls.w	80009e6 <__udivmoddi4+0x232>
 800083e:	443b      	add	r3, r7
 8000840:	3802      	subs	r0, #2
 8000842:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000846:	2100      	movs	r1, #0
 8000848:	eba3 030c 	sub.w	r3, r3, ip
 800084c:	b11d      	cbz	r5, 8000856 <__udivmoddi4+0xa2>
 800084e:	2200      	movs	r2, #0
 8000850:	40f3      	lsrs	r3, r6
 8000852:	e9c5 3200 	strd	r3, r2, [r5]
 8000856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800085a:	428b      	cmp	r3, r1
 800085c:	d905      	bls.n	800086a <__udivmoddi4+0xb6>
 800085e:	b10d      	cbz	r5, 8000864 <__udivmoddi4+0xb0>
 8000860:	e9c5 0100 	strd	r0, r1, [r5]
 8000864:	2100      	movs	r1, #0
 8000866:	4608      	mov	r0, r1
 8000868:	e7f5      	b.n	8000856 <__udivmoddi4+0xa2>
 800086a:	fab3 f183 	clz	r1, r3
 800086e:	2900      	cmp	r1, #0
 8000870:	d146      	bne.n	8000900 <__udivmoddi4+0x14c>
 8000872:	4573      	cmp	r3, lr
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xc8>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 8108 	bhi.w	8000a8c <__udivmoddi4+0x2d8>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000882:	2001      	movs	r0, #1
 8000884:	4690      	mov	r8, r2
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e5      	beq.n	8000856 <__udivmoddi4+0xa2>
 800088a:	e9c5 4800 	strd	r4, r8, [r5]
 800088e:	e7e2      	b.n	8000856 <__udivmoddi4+0xa2>
 8000890:	2a00      	cmp	r2, #0
 8000892:	f000 8091 	beq.w	80009b8 <__udivmoddi4+0x204>
 8000896:	fab2 f682 	clz	r6, r2
 800089a:	2e00      	cmp	r6, #0
 800089c:	f040 80a5 	bne.w	80009ea <__udivmoddi4+0x236>
 80008a0:	1a8a      	subs	r2, r1, r2
 80008a2:	2101      	movs	r1, #1
 80008a4:	0c03      	lsrs	r3, r0, #16
 80008a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008aa:	b280      	uxth	r0, r0
 80008ac:	b2bc      	uxth	r4, r7
 80008ae:	fbb2 fcfe 	udiv	ip, r2, lr
 80008b2:	fb0e 221c 	mls	r2, lr, ip, r2
 80008b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ba:	fb04 f20c 	mul.w	r2, r4, ip
 80008be:	429a      	cmp	r2, r3
 80008c0:	d907      	bls.n	80008d2 <__udivmoddi4+0x11e>
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008c8:	d202      	bcs.n	80008d0 <__udivmoddi4+0x11c>
 80008ca:	429a      	cmp	r2, r3
 80008cc:	f200 80e3 	bhi.w	8000a96 <__udivmoddi4+0x2e2>
 80008d0:	46c4      	mov	ip, r8
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	fbb3 f2fe 	udiv	r2, r3, lr
 80008d8:	fb0e 3312 	mls	r3, lr, r2, r3
 80008dc:	fb02 f404 	mul.w	r4, r2, r4
 80008e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008e4:	429c      	cmp	r4, r3
 80008e6:	d907      	bls.n	80008f8 <__udivmoddi4+0x144>
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	f102 30ff 	add.w	r0, r2, #4294967295
 80008ee:	d202      	bcs.n	80008f6 <__udivmoddi4+0x142>
 80008f0:	429c      	cmp	r4, r3
 80008f2:	f200 80cd 	bhi.w	8000a90 <__udivmoddi4+0x2dc>
 80008f6:	4602      	mov	r2, r0
 80008f8:	1b1b      	subs	r3, r3, r4
 80008fa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008fe:	e7a5      	b.n	800084c <__udivmoddi4+0x98>
 8000900:	f1c1 0620 	rsb	r6, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 f706 	lsr.w	r7, r2, r6
 800090a:	431f      	orrs	r7, r3
 800090c:	fa2e fa06 	lsr.w	sl, lr, r6
 8000910:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000914:	fbba f8f9 	udiv	r8, sl, r9
 8000918:	fa0e fe01 	lsl.w	lr, lr, r1
 800091c:	fa20 f306 	lsr.w	r3, r0, r6
 8000920:	fb09 aa18 	mls	sl, r9, r8, sl
 8000924:	fa1f fc87 	uxth.w	ip, r7
 8000928:	ea43 030e 	orr.w	r3, r3, lr
 800092c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000930:	fb08 f00c 	mul.w	r0, r8, ip
 8000934:	0c1c      	lsrs	r4, r3, #16
 8000936:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800093a:	42a0      	cmp	r0, r4
 800093c:	fa02 f201 	lsl.w	r2, r2, r1
 8000940:	d90a      	bls.n	8000958 <__udivmoddi4+0x1a4>
 8000942:	193c      	adds	r4, r7, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 809e 	bcs.w	8000a88 <__udivmoddi4+0x2d4>
 800094c:	42a0      	cmp	r0, r4
 800094e:	f240 809b 	bls.w	8000a88 <__udivmoddi4+0x2d4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	443c      	add	r4, r7
 8000958:	1a24      	subs	r4, r4, r0
 800095a:	b298      	uxth	r0, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	fb03 fc0c 	mul.w	ip, r3, ip
 8000968:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800096c:	45a4      	cmp	ip, r4
 800096e:	d909      	bls.n	8000984 <__udivmoddi4+0x1d0>
 8000970:	193c      	adds	r4, r7, r4
 8000972:	f103 30ff 	add.w	r0, r3, #4294967295
 8000976:	f080 8085 	bcs.w	8000a84 <__udivmoddi4+0x2d0>
 800097a:	45a4      	cmp	ip, r4
 800097c:	f240 8082 	bls.w	8000a84 <__udivmoddi4+0x2d0>
 8000980:	3b02      	subs	r3, #2
 8000982:	443c      	add	r4, r7
 8000984:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000988:	eba4 040c 	sub.w	r4, r4, ip
 800098c:	fba0 8c02 	umull	r8, ip, r0, r2
 8000990:	4564      	cmp	r4, ip
 8000992:	4643      	mov	r3, r8
 8000994:	46e1      	mov	r9, ip
 8000996:	d364      	bcc.n	8000a62 <__udivmoddi4+0x2ae>
 8000998:	d061      	beq.n	8000a5e <__udivmoddi4+0x2aa>
 800099a:	b15d      	cbz	r5, 80009b4 <__udivmoddi4+0x200>
 800099c:	ebbe 0203 	subs.w	r2, lr, r3
 80009a0:	eb64 0409 	sbc.w	r4, r4, r9
 80009a4:	fa04 f606 	lsl.w	r6, r4, r6
 80009a8:	fa22 f301 	lsr.w	r3, r2, r1
 80009ac:	431e      	orrs	r6, r3
 80009ae:	40cc      	lsrs	r4, r1
 80009b0:	e9c5 6400 	strd	r6, r4, [r5]
 80009b4:	2100      	movs	r1, #0
 80009b6:	e74e      	b.n	8000856 <__udivmoddi4+0xa2>
 80009b8:	fbb1 fcf2 	udiv	ip, r1, r2
 80009bc:	0c01      	lsrs	r1, r0, #16
 80009be:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009c2:	b280      	uxth	r0, r0
 80009c4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009c8:	463b      	mov	r3, r7
 80009ca:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ce:	4638      	mov	r0, r7
 80009d0:	463c      	mov	r4, r7
 80009d2:	46b8      	mov	r8, r7
 80009d4:	46be      	mov	lr, r7
 80009d6:	2620      	movs	r6, #32
 80009d8:	eba2 0208 	sub.w	r2, r2, r8
 80009dc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009e0:	e765      	b.n	80008ae <__udivmoddi4+0xfa>
 80009e2:	4601      	mov	r1, r0
 80009e4:	e717      	b.n	8000816 <__udivmoddi4+0x62>
 80009e6:	4610      	mov	r0, r2
 80009e8:	e72b      	b.n	8000842 <__udivmoddi4+0x8e>
 80009ea:	f1c6 0120 	rsb	r1, r6, #32
 80009ee:	fa2e fc01 	lsr.w	ip, lr, r1
 80009f2:	40b7      	lsls	r7, r6
 80009f4:	fa0e fe06 	lsl.w	lr, lr, r6
 80009f8:	fa20 f101 	lsr.w	r1, r0, r1
 80009fc:	ea41 010e 	orr.w	r1, r1, lr
 8000a00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a04:	fbbc f8fe 	udiv	r8, ip, lr
 8000a08:	b2bc      	uxth	r4, r7
 8000a0a:	fb0e cc18 	mls	ip, lr, r8, ip
 8000a0e:	fb08 f904 	mul.w	r9, r8, r4
 8000a12:	0c0a      	lsrs	r2, r1, #16
 8000a14:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a18:	40b0      	lsls	r0, r6
 8000a1a:	4591      	cmp	r9, r2
 8000a1c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a20:	b280      	uxth	r0, r0
 8000a22:	d93e      	bls.n	8000aa2 <__udivmoddi4+0x2ee>
 8000a24:	18ba      	adds	r2, r7, r2
 8000a26:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a2a:	d201      	bcs.n	8000a30 <__udivmoddi4+0x27c>
 8000a2c:	4591      	cmp	r9, r2
 8000a2e:	d81f      	bhi.n	8000a70 <__udivmoddi4+0x2bc>
 8000a30:	eba2 0209 	sub.w	r2, r2, r9
 8000a34:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a38:	fb09 f804 	mul.w	r8, r9, r4
 8000a3c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000a40:	b28a      	uxth	r2, r1
 8000a42:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000a46:	4542      	cmp	r2, r8
 8000a48:	d229      	bcs.n	8000a9e <__udivmoddi4+0x2ea>
 8000a4a:	18ba      	adds	r2, r7, r2
 8000a4c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a50:	d2c2      	bcs.n	80009d8 <__udivmoddi4+0x224>
 8000a52:	4542      	cmp	r2, r8
 8000a54:	d2c0      	bcs.n	80009d8 <__udivmoddi4+0x224>
 8000a56:	f1a9 0102 	sub.w	r1, r9, #2
 8000a5a:	443a      	add	r2, r7
 8000a5c:	e7bc      	b.n	80009d8 <__udivmoddi4+0x224>
 8000a5e:	45c6      	cmp	lr, r8
 8000a60:	d29b      	bcs.n	800099a <__udivmoddi4+0x1e6>
 8000a62:	ebb8 0302 	subs.w	r3, r8, r2
 8000a66:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	46e1      	mov	r9, ip
 8000a6e:	e794      	b.n	800099a <__udivmoddi4+0x1e6>
 8000a70:	eba7 0909 	sub.w	r9, r7, r9
 8000a74:	444a      	add	r2, r9
 8000a76:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a7a:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a7e:	fb09 f804 	mul.w	r8, r9, r4
 8000a82:	e7db      	b.n	8000a3c <__udivmoddi4+0x288>
 8000a84:	4603      	mov	r3, r0
 8000a86:	e77d      	b.n	8000984 <__udivmoddi4+0x1d0>
 8000a88:	46d0      	mov	r8, sl
 8000a8a:	e765      	b.n	8000958 <__udivmoddi4+0x1a4>
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	e6fa      	b.n	8000886 <__udivmoddi4+0xd2>
 8000a90:	443b      	add	r3, r7
 8000a92:	3a02      	subs	r2, #2
 8000a94:	e730      	b.n	80008f8 <__udivmoddi4+0x144>
 8000a96:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a9a:	443b      	add	r3, r7
 8000a9c:	e719      	b.n	80008d2 <__udivmoddi4+0x11e>
 8000a9e:	4649      	mov	r1, r9
 8000aa0:	e79a      	b.n	80009d8 <__udivmoddi4+0x224>
 8000aa2:	eba2 0209 	sub.w	r2, r2, r9
 8000aa6:	fbb2 f9fe 	udiv	r9, r2, lr
 8000aaa:	46c4      	mov	ip, r8
 8000aac:	fb09 f804 	mul.w	r8, r9, r4
 8000ab0:	e7c4      	b.n	8000a3c <__udivmoddi4+0x288>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <byteToHex>:
static void DHT22_SetPinOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
static void DHT22_SetPinInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
static uint8_t DHT22_CheckResponse(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

/* Converte um byte em duas letras hexadecimais */
void byteToHex(uint8_t byte, char* out) {
 8000ab8:	b4b0      	push	{r4, r5, r7}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
    const char hex[] = "0123456789ABCDEF";
 8000ac4:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <byteToHex+0x50>)
 8000ac6:	f107 040c 	add.w	r4, r7, #12
 8000aca:	461d      	mov	r5, r3
 8000acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	7023      	strb	r3, [r4, #0]
    out[0] = hex[(byte >> 4) & 0x0F];
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3320      	adds	r3, #32
 8000ae0:	443b      	add	r3, r7
 8000ae2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	701a      	strb	r2, [r3, #0]
    out[1] = hex[byte & 0x0F];
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 020f 	and.w	r2, r3, #15
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	3220      	adds	r2, #32
 8000af6:	443a      	add	r2, r7
 8000af8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000afc:	701a      	strb	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	3724      	adds	r7, #36	@ 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bcb0      	pop	{r4, r5, r7}
 8000b06:	4770      	bx	lr
 8000b08:	08006c88 	.word	0x08006c88

08000b0c <DHT22_DelayUs>:

void DHT22_DelayUs(uint32_t us) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    uint32_t ticks = us * (SystemCoreClock / 1000000) / 4;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <DHT22_DelayUs+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <DHT22_DelayUs+0x44>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9b      	lsrs	r3, r3, #18
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
    volatile uint32_t count;
    for (count = 0; count < ticks; count++);
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	e002      	b.n	8000b36 <DHT22_DelayUs+0x2a>
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d8f8      	bhi.n	8000b30 <DHT22_DelayUs+0x24>
}
 8000b3e:	bf00      	nop
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	431bde83 	.word	0x431bde83

08000b54 <DHT22_ReadData>:

DHT22_Status DHT22_ReadData(DHT22_DataTypedef *data, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	80fb      	strh	r3, [r7, #6]
    uint8_t bits[5] = {0};
 8000b62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	711a      	strb	r2, [r3, #4]
    uint32_t timeout;
    uint8_t i, j;

    // Start signal
    DHT22_SetPinOutput(GPIOx, GPIO_Pin);
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	68b8      	ldr	r0, [r7, #8]
 8000b72:	f000 f965 	bl	8000e40 <DHT22_SetPinOutput>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	68b8      	ldr	r0, [r7, #8]
 8000b7e:	f002 f952 	bl	8002e26 <HAL_GPIO_WritePin>
    DHT22_DelayUs(1100);
 8000b82:	f240 404c 	movw	r0, #1100	@ 0x44c
 8000b86:	f7ff ffc1 	bl	8000b0c <DHT22_DelayUs>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4619      	mov	r1, r3
 8000b90:	68b8      	ldr	r0, [r7, #8]
 8000b92:	f002 f948 	bl	8002e26 <HAL_GPIO_WritePin>
    DHT22_DelayUs(40);
 8000b96:	2028      	movs	r0, #40	@ 0x28
 8000b98:	f7ff ffb8 	bl	8000b0c <DHT22_DelayUs>
    DHT22_SetPinInput(GPIOx, GPIO_Pin);
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	68b8      	ldr	r0, [r7, #8]
 8000ba2:	f000 f96d 	bl	8000e80 <DHT22_SetPinInput>

    // Verifica resposta
    if (!DHT22_CheckResponse(GPIOx, GPIO_Pin)) {
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	68b8      	ldr	r0, [r7, #8]
 8000bac:	f000 f986 	bl	8000ebc <DHT22_CheckResponse>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <DHT22_ReadData+0x66>
        return DHT22_ERROR_TIMEOUT;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e136      	b.n	8000e28 <DHT22_ReadData+0x2d4>
    }

    // Leitura de 40 bits (5 bytes)
    for (i = 0; i < 5; i++) {
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8000bc0:	e05e      	b.n	8000c80 <DHT22_ReadData+0x12c>
        for (j = 0; j < 8; j++) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8000bc8:	e051      	b.n	8000c6e <DHT22_ReadData+0x11a>
            timeout = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
 8000bce:	e009      	b.n	8000be4 <DHT22_ReadData+0x90>
                if (++timeout > DHT22_TIMEOUT)
 8000bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bd8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d901      	bls.n	8000be4 <DHT22_ReadData+0x90>
                    return DHT22_ERROR_TIMEOUT;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e121      	b.n	8000e28 <DHT22_ReadData+0x2d4>
            while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	4619      	mov	r1, r3
 8000be8:	68b8      	ldr	r0, [r7, #8]
 8000bea:	f002 f905 	bl	8002df8 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0ed      	beq.n	8000bd0 <DHT22_ReadData+0x7c>
            }

            DHT22_DelayUs(35);
 8000bf4:	2023      	movs	r0, #35	@ 0x23
 8000bf6:	f7ff ff89 	bl	8000b0c <DHT22_DelayUs>

            if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	68b8      	ldr	r0, [r7, #8]
 8000c00:	f002 f8fa 	bl	8002df8 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d117      	bne.n	8000c3a <DHT22_ReadData+0xe6>
                bits[i] |= (1 << (7 - j));
 8000c0a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000c0e:	3350      	adds	r3, #80	@ 0x50
 8000c10:	443b      	add	r3, r7
 8000c12:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c16:	b25a      	sxtb	r2, r3
 8000c18:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000c1c:	f1c3 0307 	rsb	r3, r3, #7
 8000c20:	2101      	movs	r1, #1
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	3350      	adds	r3, #80	@ 0x50
 8000c34:	443b      	add	r3, r7
 8000c36:	f803 2c18 	strb.w	r2, [r3, #-24]
            }

            timeout = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8000c3e:	e009      	b.n	8000c54 <DHT22_ReadData+0x100>
                if (++timeout > DHT22_TIMEOUT)
 8000c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c42:	3301      	adds	r3, #1
 8000c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c48:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d901      	bls.n	8000c54 <DHT22_ReadData+0x100>
                    return DHT22_ERROR_TIMEOUT;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e0e9      	b.n	8000e28 <DHT22_ReadData+0x2d4>
            while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	4619      	mov	r1, r3
 8000c58:	68b8      	ldr	r0, [r7, #8]
 8000c5a:	f002 f8cd 	bl	8002df8 <HAL_GPIO_ReadPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d0ed      	beq.n	8000c40 <DHT22_ReadData+0xec>
        for (j = 0; j < 8; j++) {
 8000c64:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000c68:	3301      	adds	r3, #1
 8000c6a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8000c6e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9a9      	bls.n	8000bca <DHT22_ReadData+0x76>
    for (i = 0; i < 5; i++) {
 8000c76:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8000c80:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	d99c      	bls.n	8000bc2 <DHT22_ReadData+0x6e>
            }
        }
    }

    // Constrói e envia RAW manualmente
    char raw_msg[32] = "RAW: ";
 8000c88:	4a69      	ldr	r2, [pc, #420]	@ (8000e30 <DHT22_ReadData+0x2dc>)
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c92:	6018      	str	r0, [r3, #0]
 8000c94:	3304      	adds	r3, #4
 8000c96:	8019      	strh	r1, [r3, #0]
 8000c98:	f107 031e 	add.w	r3, r7, #30
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
 8000ca8:	615a      	str	r2, [r3, #20]
 8000caa:	831a      	strh	r2, [r3, #24]
    for (int k = 0; k < 5; k++) {
 8000cac:	2300      	movs	r3, #0
 8000cae:	647b      	str	r3, [r7, #68]	@ 0x44
 8000cb0:	e02b      	b.n	8000d0a <DHT22_ReadData+0x1b6>
        char hex[2];
        byteToHex(bits[k], hex);
 8000cb2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000cb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	f107 0214 	add.w	r2, r7, #20
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fef8 	bl	8000ab8 <byteToHex>
        raw_msg[5 + k * 3] = hex[0];
 8000cc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	3305      	adds	r3, #5
 8000cd2:	7d3a      	ldrb	r2, [r7, #20]
 8000cd4:	3350      	adds	r3, #80	@ 0x50
 8000cd6:	443b      	add	r3, r7
 8000cd8:	f803 2c38 	strb.w	r2, [r3, #-56]
        raw_msg[6 + k * 3] = hex[1];
 8000cdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3306      	adds	r3, #6
 8000ce6:	7d7a      	ldrb	r2, [r7, #21]
 8000ce8:	3350      	adds	r3, #80	@ 0x50
 8000cea:	443b      	add	r3, r7
 8000cec:	f803 2c38 	strb.w	r2, [r3, #-56]
        raw_msg[7 + k * 3] = ' ';
 8000cf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	3307      	adds	r3, #7
 8000cfa:	3350      	adds	r3, #80	@ 0x50
 8000cfc:	443b      	add	r3, r7
 8000cfe:	2220      	movs	r2, #32
 8000d00:	f803 2c38 	strb.w	r2, [r3, #-56]
    for (int k = 0; k < 5; k++) {
 8000d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d06:	3301      	adds	r3, #1
 8000d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8000d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	ddd0      	ble.n	8000cb2 <DHT22_ReadData+0x15e>
    }
    raw_msg[5 + 5 * 3 - 1] = '\r';
 8000d10:	230d      	movs	r3, #13
 8000d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    raw_msg[5 + 5 * 3] = '\n';
 8000d16:	230a      	movs	r3, #10
 8000d18:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    raw_msg[5 + 5 * 3 + 1] = '\0';
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (uartMutexHandle != NULL && osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 8000d22:	4b44      	ldr	r3, [pc, #272]	@ (8000e34 <DHT22_ReadData+0x2e0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d01c      	beq.n	8000d64 <DHT22_ReadData+0x210>
 8000d2a:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <DHT22_ReadData+0x2e0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d32:	4618      	mov	r0, r3
 8000d34:	f003 fc50 	bl	80045d8 <osMutexWait>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d112      	bne.n	8000d64 <DHT22_ReadData+0x210>
        HAL_UART_Transmit(&huart2, (uint8_t*)raw_msg, strlen(raw_msg), HAL_MAX_DELAY);
 8000d3e:	f107 0318 	add.w	r3, r7, #24
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa1c 	bl	8000180 <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	f107 0118 	add.w	r1, r7, #24
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	4838      	ldr	r0, [pc, #224]	@ (8000e38 <DHT22_ReadData+0x2e4>)
 8000d56:	f003 f8d5 	bl	8003f04 <HAL_UART_Transmit>
        osMutexRelease(uartMutexHandle);
 8000d5a:	4b36      	ldr	r3, [pc, #216]	@ (8000e34 <DHT22_ReadData+0x2e0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 fc88 	bl	8004674 <osMutexRelease>
    }

    // Verifica checksum
    uint8_t checksum = (bits[0] + bits[1] + bits[2] + bits[3]) & 0xFF;
 8000d64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8000d68:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000d74:	4413      	add	r3, r2
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000d7c:	4413      	add	r3, r2
 8000d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (bits[4] != checksum) {
 8000d82:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000d86:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d001      	beq.n	8000d92 <DHT22_ReadData+0x23e>
        return DHT22_ERROR_CHECKSUM;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e04a      	b.n	8000e28 <DHT22_ReadData+0x2d4>
    }

    // Conversão dos dados
    int16_t raw_humidity = (bits[0] << 8) | bits[1];
 8000d92:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t raw_temp = (bits[2] << 8) | bits[3];
 8000da8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    if (raw_temp & 0x8000) {
 8000dbc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	da14      	bge.n	8000dee <DHT22_ReadData+0x29a>
        raw_temp &= 0x7FFF;
 8000dc4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000dc6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000dca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        data->Temperature = -((float)raw_temp) / 10.0f;
 8000dcc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fa97 	bl	8000304 <__aeabi_i2f>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000ddc:	4917      	ldr	r1, [pc, #92]	@ (8000e3c <DHT22_ReadData+0x2e8>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fb98 	bl	8000514 <__aeabi_fdiv>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	e00d      	b.n	8000e0a <DHT22_ReadData+0x2b6>
    } else {
        data->Temperature = ((float)raw_temp) / 10.0f;
 8000dee:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fa86 	bl	8000304 <__aeabi_i2f>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4910      	ldr	r1, [pc, #64]	@ (8000e3c <DHT22_ReadData+0x2e8>)
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fb89 	bl	8000514 <__aeabi_fdiv>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	601a      	str	r2, [r3, #0]
    }

    data->Humidity = ((float)raw_humidity) / 10.0f;
 8000e0a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fa78 	bl	8000304 <__aeabi_i2f>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4909      	ldr	r1, [pc, #36]	@ (8000e3c <DHT22_ReadData+0x2e8>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fb7b 	bl	8000514 <__aeabi_fdiv>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	461a      	mov	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	605a      	str	r2, [r3, #4]

    return DHT22_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3750      	adds	r7, #80	@ 0x50
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	08006c9c 	.word	0x08006c9c
 8000e34:	20000344 	.word	0x20000344
 8000e38:	200002d8 	.word	0x200002d8
 8000e3c:	41200000 	.word	0x41200000

08000e40 <DHT22_SetPinOutput>:

/* Funções auxiliares */

static void DHT22_SetPinOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f001 fe30 	bl	8002ad8 <HAL_GPIO_Init>
}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <DHT22_SetPinInput>:

static void DHT22_SetPinInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f001 fe12 	bl	8002ad8 <HAL_GPIO_Init>
}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <DHT22_CheckResponse>:

static uint8_t DHT22_CheckResponse(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
    uint32_t timeout = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]

    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 8000ecc:	e00c      	b.n	8000ee8 <DHT22_CheckResponse+0x2c>
        if (++timeout > DHT22_TIMEOUT) return 0;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d901      	bls.n	8000ee2 <DHT22_CheckResponse+0x26>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e023      	b.n	8000f2a <DHT22_CheckResponse+0x6e>
        DHT22_DelayUs(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff fe12 	bl	8000b0c <DHT22_DelayUs>
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	4619      	mov	r1, r3
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f001 ff83 	bl	8002df8 <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1ea      	bne.n	8000ece <DHT22_CheckResponse+0x12>
    }

    timeout = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
    while (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 8000efc:	e00c      	b.n	8000f18 <DHT22_CheckResponse+0x5c>
        if (++timeout > DHT22_TIMEOUT) return 0;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3301      	adds	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d901      	bls.n	8000f12 <DHT22_CheckResponse+0x56>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e00b      	b.n	8000f2a <DHT22_CheckResponse+0x6e>
        DHT22_DelayUs(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff fdfa 	bl	8000b0c <DHT22_DelayUs>
    while (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f001 ff6b 	bl	8002df8 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0ea      	beq.n	8000efe <DHT22_CheckResponse+0x42>
    }

    return 1;
 8000f28:	2301      	movs	r3, #1
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <vApplicationGetIdleTaskMemory+0x28>)
 8000f44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2280      	movs	r2, #128	@ 0x80
 8000f50:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	20000030 	.word	0x20000030
 8000f60:	20000084 	.word	0x20000084

08000f64 <SystemClock_Config>:
void floatToString(float value, char *buffer, int decimals);



void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	@ 0x50
 8000f68:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2234      	movs	r2, #52	@ 0x34
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f005 fe32 	bl	8006bdc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <SystemClock_Config+0xb4>)
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8c:	4a22      	ldr	r2, [pc, #136]	@ (8001018 <SystemClock_Config+0xb4>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	6253      	str	r3, [r2, #36]	@ 0x24
 8000f94:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <SystemClock_Config+0xb4>)
 8000f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <SystemClock_Config+0xb8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800101c <SystemClock_Config+0xb8>)
 8000faa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fae:	6013      	str	r3, [r2, #0]

    /** Initializes the RCC Oscillators */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000fc4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000fca:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 ff57 	bl	8002e88 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x80>
    {
        Error_Handler();
 8000fe0:	f000 f902 	bl	80011e8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	60bb      	str	r3, [r7, #8]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff4:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2101      	movs	r1, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fa71 	bl	80034e8 <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xac>
    {
        Error_Handler();
 800100c:	f000 f8ec 	bl	80011e8 <Error_Handler>
    }
}
 8001010:	bf00      	nop
 8001012:	3750      	adds	r7, #80	@ 0x50
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <MX_GPIO_Init+0xc4>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a2a      	ldr	r2, [pc, #168]	@ (80010e4 <MX_GPIO_Init+0xc4>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <MX_GPIO_Init+0xc4>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <MX_GPIO_Init+0xc4>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a24      	ldr	r2, [pc, #144]	@ (80010e4 <MX_GPIO_Init+0xc4>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	61d3      	str	r3, [r2, #28]
 800105a:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <MX_GPIO_Init+0xc4>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

    /* Configure DHT22 pin (PB10) */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800106a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	481a      	ldr	r0, [pc, #104]	@ (80010e8 <MX_GPIO_Init+0xc8>)
 8001080:	f001 fd2a 	bl	8002ad8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800108a:	4817      	ldr	r0, [pc, #92]	@ (80010e8 <MX_GPIO_Init+0xc8>)
 800108c:	f001 fecb 	bl	8002e26 <HAL_GPIO_WritePin>

    /* Configure LED pin (PA8) */
    GPIO_InitStruct.Pin = LED_GPIO_PIN;
 8001090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001094:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	4810      	ldr	r0, [pc, #64]	@ (80010ec <MX_GPIO_Init+0xcc>)
 80010aa:	f001 fd15 	bl	8002ad8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010b4:	480d      	ldr	r0, [pc, #52]	@ (80010ec <MX_GPIO_Init+0xcc>)
 80010b6:	f001 feb6 	bl	8002e26 <HAL_GPIO_WritePin>


    /* Configure USART2 pins (PA2-TX, PA3-RX) */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ba:	230c      	movs	r3, #12
 80010bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ca:	2307      	movs	r3, #7
 80010cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_GPIO_Init+0xcc>)
 80010d6:	f001 fcff 	bl	8002ad8 <HAL_GPIO_Init>
}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020000 	.word	0x40020000

080010f0 <MX_ADC_Init>:

static void MX_ADC_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]

    hadc.Instance = ADC1;
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <MX_ADC_Init+0x9c>)
 8001102:	4a23      	ldr	r2, [pc, #140]	@ (8001190 <MX_ADC_Init+0xa0>)
 8001104:	601a      	str	r2, [r3, #0]
    hadc.Init.ClockPrescaler = TIM_CLOCKPRESCALER_DIV2;  // Mantido para STM32L1
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_ADC_Init+0x9c>)
 8001108:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800110c:	605a      	str	r2, [r3, #4]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <MX_ADC_Init+0x9c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hadc.Init.ScanConvMode = DISABLE;
 8001114:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <MX_ADC_Init+0x9c>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
    hadc.Init.ContinuousConvMode = DISABLE;
 800111a:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <MX_ADC_Init+0x9c>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_ADC_Init+0x9c>)
 8001124:	2200      	movs	r2, #0
 8001126:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <MX_ADC_Init+0x9c>)
 800112c:	2200      	movs	r2, #0
 800112e:	639a      	str	r2, [r3, #56]	@ 0x38
    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001130:	4b16      	ldr	r3, [pc, #88]	@ (800118c <MX_ADC_Init+0x9c>)
 8001132:	2210      	movs	r2, #16
 8001134:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_ADC_Init+0x9c>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
    hadc.Init.NbrOfConversion = 1;
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_ADC_Init+0x9c>)
 800113e:	2201      	movs	r2, #1
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc.Init.DMAContinuousRequests = DISABLE;
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <MX_ADC_Init+0x9c>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <MX_ADC_Init+0x9c>)
 800114c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001150:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001152:	480e      	ldr	r0, [pc, #56]	@ (800118c <MX_ADC_Init+0x9c>)
 8001154:	f000 ff68 	bl	8002028 <HAL_ADC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC_Init+0x72>
    {
        Error_Handler();
 800115e:	f000 f843 	bl	80011e8 <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_0;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
    sConfig.Rank = 1;
 8001166:	2301      	movs	r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 800116a:	2304      	movs	r3, #4
 800116c:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	@ (800118c <MX_ADC_Init+0x9c>)
 8001174:	f001 f9c6 	bl	8002504 <HAL_ADC_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_ADC_Init+0x92>
    {
        Error_Handler();
 800117e:	f000 f833 	bl	80011e8 <Error_Handler>
    }
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000284 	.word	0x20000284
 8001190:	40012400 	.word	0x40012400

08001194 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <MX_USART2_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011cc:	f002 fe4a 	bl	8003e64 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 80011d6:	f000 f807 	bl	80011e8 <Error_Handler>
    }
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002d8 	.word	0x200002d8
 80011e4:	40004400 	.word	0x40004400

080011e8 <Error_Handler>:

void Error_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    /* Turn on LED to indicate error */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2120      	movs	r1, #32
 80011f0:	4806      	ldr	r0, [pc, #24]	@ (800120c <Error_Handler+0x24>)
 80011f2:	f001 fe18 	bl	8002e26 <HAL_GPIO_WritePin>

    while(1)
    {
        /* Blink LED in case of error */
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80011f6:	2120      	movs	r1, #32
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <Error_Handler+0x24>)
 80011fa:	f001 fe2c 	bl	8002e56 <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 80011fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001202:	f000 feef 	bl	8001fe4 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001206:	bf00      	nop
 8001208:	e7f5      	b.n	80011f6 <Error_Handler+0xe>
 800120a:	bf00      	nop
 800120c:	40020000 	.word	0x40020000

08001210 <main>:
    }
}

int main(void)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b0a8      	sub	sp, #160	@ 0xa0
 8001214:	af00      	add	r7, sp, #0
  HAL_Init();
 8001216:	f000 fec2 	bl	8001f9e <HAL_Init>
  //DWT_Init();
  SystemClock_Config();
 800121a:	f7ff fea3 	bl	8000f64 <SystemClock_Config>
  MX_GPIO_Init();
 800121e:	f7ff feff 	bl	8001020 <MX_GPIO_Init>
  MX_ADC_Init();
 8001222:	f7ff ff65 	bl	80010f0 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8001226:	f7ff ffb5 	bl	8001194 <MX_USART2_UART_Init>




  /* Create mutex for shared data protection */
  osMutexDef(dataMutex);
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  dataMutexHandle = osMutexCreate(osMutex(dataMutex));
 8001236:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800123a:	4618      	mov	r0, r3
 800123c:	f003 f9b3 	bl	80045a6 <osMutexCreate>
 8001240:	4603      	mov	r3, r0
 8001242:	4a45      	ldr	r2, [pc, #276]	@ (8001358 <main+0x148>)
 8001244:	6013      	str	r3, [r2, #0]
  osMutexDef(uartMutex);
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 8001252:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001256:	4618      	mov	r0, r3
 8001258:	f003 f9a5 	bl	80045a6 <osMutexCreate>
 800125c:	4603      	mov	r3, r0
 800125e:	4a3f      	ldr	r2, [pc, #252]	@ (800135c <main+0x14c>)
 8001260:	6013      	str	r3, [r2, #0]


  /* Create tasks */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8001262:	4b3f      	ldr	r3, [pc, #252]	@ (8001360 <main+0x150>)
 8001264:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001268:	461d      	mov	r5, r3
 800126a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001276:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f003 f932 	bl	80044e6 <osThreadCreate>
 8001282:	4603      	mov	r3, r0
 8001284:	4a37      	ldr	r2, [pc, #220]	@ (8001364 <main+0x154>)
 8001286:	6013      	str	r3, [r2, #0]

  osThreadDef(sensorTask, SensorTask, osPriorityNormal, 0, 512);
 8001288:	4b37      	ldr	r3, [pc, #220]	@ (8001368 <main+0x158>)
 800128a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800128e:	461d      	mov	r5, r3
 8001290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001294:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 800129c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 f91f 	bl	80044e6 <osThreadCreate>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a30      	ldr	r2, [pc, #192]	@ (800136c <main+0x15c>)
 80012ac:	6013      	str	r3, [r2, #0]
  if (sensorTaskHandle == NULL) {
 80012ae:	4b2f      	ldr	r3, [pc, #188]	@ (800136c <main+0x15c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d106      	bne.n	80012c4 <main+0xb4>
      HAL_UART_Transmit(&huart2, (uint8_t*)"FALHA SensorTask\r\n", 19, HAL_MAX_DELAY);
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	2213      	movs	r2, #19
 80012bc:	492c      	ldr	r1, [pc, #176]	@ (8001370 <main+0x160>)
 80012be:	482d      	ldr	r0, [pc, #180]	@ (8001374 <main+0x164>)
 80012c0:	f002 fe20 	bl	8003f04 <HAL_UART_Transmit>
  } else {
      //HAL_UART_Transmit(&huart2, (uint8_t*)"SensorTask criada\r\n", 20, HAL_MAX_DELAY);
  }

  osThreadDef(alarmeTask, AlarmeTask, osPriorityHigh, 0, 512); // Prioridade alta
 80012c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001378 <main+0x168>)
 80012c6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80012ca:	461d      	mov	r5, r3
 80012cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  alarmeTaskHandle = osThreadCreate(osThread(alarmeTask), NULL);
 80012d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 f901 	bl	80044e6 <osThreadCreate>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a25      	ldr	r2, [pc, #148]	@ (800137c <main+0x16c>)
 80012e8:	6013      	str	r3, [r2, #0]



  osThreadDef(loggerTask, LoggerTask, osPriorityNormal, 0, 512);
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <main+0x170>)
 80012ec:	f107 0420 	add.w	r4, r7, #32
 80012f0:	461d      	mov	r5, r3
 80012f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  loggerTaskHandle = osThreadCreate(osThread(loggerTask), NULL);
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f003 f8ee 	bl	80044e6 <osThreadCreate>
 800130a:	4603      	mov	r3, r0
 800130c:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <main+0x174>)
 800130e:	6013      	str	r3, [r2, #0]
  if (loggerTaskHandle == NULL) {
 8001310:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <main+0x174>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d106      	bne.n	8001326 <main+0x116>
      HAL_UART_Transmit(&huart2, (uint8_t*)"FALHA LoggerTask\r\n", 19, HAL_MAX_DELAY);
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	2213      	movs	r2, #19
 800131e:	491a      	ldr	r1, [pc, #104]	@ (8001388 <main+0x178>)
 8001320:	4814      	ldr	r0, [pc, #80]	@ (8001374 <main+0x164>)
 8001322:	f002 fdef 	bl	8003f04 <HAL_UART_Transmit>
  } else {
     // HAL_UART_Transmit(&huart2, (uint8_t*)"LoggerTask criada\r\n", 20, HAL_MAX_DELAY);
  }

  osThreadDef(cliTask, CLITask, osPriorityAboveNormal, 0, 256);
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <main+0x17c>)
 8001328:	1d3c      	adds	r4, r7, #4
 800132a:	461d      	mov	r5, r3
 800132c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cliTaskHandle = osThreadCreate(osThread(cliTask), NULL);
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f003 f8d2 	bl	80044e6 <osThreadCreate>
 8001342:	4603      	mov	r3, r0
 8001344:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <main+0x180>)
 8001346:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8001348:	f003 f8c6 	bl	80044d8 <osKernelStart>


  while (1)
  {
	  osDelay(1000);
 800134c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001350:	f003 f915 	bl	800457e <osDelay>
 8001354:	e7fa      	b.n	800134c <main+0x13c>
 8001356:	bf00      	nop
 8001358:	20000340 	.word	0x20000340
 800135c:	20000344 	.word	0x20000344
 8001360:	08006cf0 	.word	0x08006cf0
 8001364:	20000320 	.word	0x20000320
 8001368:	08006d18 	.word	0x08006d18
 800136c:	20000324 	.word	0x20000324
 8001370:	08006cbc 	.word	0x08006cbc
 8001374:	200002d8 	.word	0x200002d8
 8001378:	08006d40 	.word	0x08006d40
 800137c:	20000328 	.word	0x20000328
 8001380:	08006d68 	.word	0x08006d68
 8001384:	2000032c 	.word	0x2000032c
 8001388:	08006cd0 	.word	0x08006cd0
 800138c:	08006d8c 	.word	0x08006d8c
 8001390:	20000330 	.word	0x20000330

08001394 <SensorTask>:
}

extern osMutexId uartMutexHandle; // lembre de declarar no topo do arquivo, se ainda não tiver

void SensorTask(void const * argument)
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b09c      	sub	sp, #112	@ 0x70
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    if (uartMutexHandle != NULL && osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 800139c:	4b75      	ldr	r3, [pc, #468]	@ (8001574 <SensorTask+0x1e0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00e      	beq.n	80013c2 <SensorTask+0x2e>
 80013a4:	4b73      	ldr	r3, [pc, #460]	@ (8001574 <SensorTask+0x1e0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 f913 	bl	80045d8 <osMutexWait>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d104      	bne.n	80013c2 <SensorTask+0x2e>
        //HAL_UART_Transmit(&huart2, (uint8_t*)"SensorTask INICIOU\r\n", 21, HAL_MAX_DELAY);
        osMutexRelease(uartMutexHandle);
 80013b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001574 <SensorTask+0x1e0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 f959 	bl	8004674 <osMutexRelease>
    }

    for (;;)
    {
        // Leitura do pH via ADC
        if (HAL_ADC_Start(&hadc) == HAL_OK)
 80013c2:	486d      	ldr	r0, [pc, #436]	@ (8001578 <SensorTask+0x1e4>)
 80013c4:	f000 ff76 	bl	80022b4 <HAL_ADC_Start>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d17e      	bne.n	80014cc <SensorTask+0x138>
        {
            if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK)
 80013ce:	f04f 31ff 	mov.w	r1, #4294967295
 80013d2:	4869      	ldr	r0, [pc, #420]	@ (8001578 <SensorTask+0x1e4>)
 80013d4:	f000 fffa 	bl	80023cc <HAL_ADC_PollForConversion>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d173      	bne.n	80014c6 <SensorTask+0x132>
            {
                uint32_t ph_raw = HAL_ADC_GetValue(&hadc);
 80013de:	4866      	ldr	r0, [pc, #408]	@ (8001578 <SensorTask+0x1e4>)
 80013e0:	f001 f884 	bl	80024ec <HAL_ADC_GetValue>
 80013e4:	66b8      	str	r0, [r7, #104]	@ 0x68
                HAL_ADC_Stop(&hadc);
 80013e6:	4864      	ldr	r0, [pc, #400]	@ (8001578 <SensorTask+0x1e4>)
 80013e8:	f000 ffc4 	bl	8002374 <HAL_ADC_Stop>

                // DEBUG: Mostrar valor bruto do ADC
                if (uartMutexHandle != NULL && osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 80013ec:	4b61      	ldr	r3, [pc, #388]	@ (8001574 <SensorTask+0x1e0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d037      	beq.n	8001464 <SensorTask+0xd0>
 80013f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001574 <SensorTask+0x1e0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 f8eb 	bl	80045d8 <osMutexWait>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d12d      	bne.n	8001464 <SensorTask+0xd0>
                    char debug_msg[64];
                    char rawStr[16];
                    floatToString((float)ph_raw, rawStr, 0);
 8001408:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800140a:	f7fe ff77 	bl	80002fc <__aeabi_ui2f>
 800140e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001412:	2200      	movs	r2, #0
 8001414:	4619      	mov	r1, r3
 8001416:	f000 f917 	bl	8001648 <floatToString>
                    strcpy(debug_msg, "[DEBUG] ph_raw: ");
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	4a57      	ldr	r2, [pc, #348]	@ (800157c <SensorTask+0x1e8>)
 8001420:	461c      	mov	r4, r3
 8001422:	4615      	mov	r5, r2
 8001424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001428:	682b      	ldr	r3, [r5, #0]
 800142a:	7023      	strb	r3, [r4, #0]
                    strcat(debug_msg, rawStr);
 800142c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f005 fbd8 	bl	8006bec <strcat>
                    strcat(debug_msg, "\r\n");
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe fe9d 	bl	8000180 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4413      	add	r3, r2
 8001450:	4a4b      	ldr	r2, [pc, #300]	@ (8001580 <SensorTask+0x1ec>)
 8001452:	8811      	ldrh	r1, [r2, #0]
 8001454:	7892      	ldrb	r2, [r2, #2]
 8001456:	8019      	strh	r1, [r3, #0]
 8001458:	709a      	strb	r2, [r3, #2]
                    //HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
                    osMutexRelease(uartMutexHandle);
 800145a:	4b46      	ldr	r3, [pc, #280]	@ (8001574 <SensorTask+0x1e0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f908 	bl	8004674 <osMutexRelease>
                }

                float voltage = ph_raw * (3.3f / 4095.0f);
 8001464:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001466:	f7fe ff49 	bl	80002fc <__aeabi_ui2f>
 800146a:	4603      	mov	r3, r0
 800146c:	4945      	ldr	r1, [pc, #276]	@ (8001584 <SensorTask+0x1f0>)
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ff9c 	bl	80003ac <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	667b      	str	r3, [r7, #100]	@ 0x64
                float calculated_ph = 7.0f + ((2.5f - voltage) / 0.18f);
 8001478:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800147a:	4843      	ldr	r0, [pc, #268]	@ (8001588 <SensorTask+0x1f4>)
 800147c:	f7fe fe8c 	bl	8000198 <__aeabi_fsub>
 8001480:	4603      	mov	r3, r0
 8001482:	4942      	ldr	r1, [pc, #264]	@ (800158c <SensorTask+0x1f8>)
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f845 	bl	8000514 <__aeabi_fdiv>
 800148a:	4603      	mov	r3, r0
 800148c:	4940      	ldr	r1, [pc, #256]	@ (8001590 <SensorTask+0x1fc>)
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe fe84 	bl	800019c <__addsf3>
 8001494:	4603      	mov	r3, r0
 8001496:	663b      	str	r3, [r7, #96]	@ 0x60

                if (dataMutexHandle != NULL && osMutexWait(dataMutexHandle, osWaitForever) == osOK)
 8001498:	4b3e      	ldr	r3, [pc, #248]	@ (8001594 <SensorTask+0x200>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d015      	beq.n	80014cc <SensorTask+0x138>
 80014a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001594 <SensorTask+0x200>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 f895 	bl	80045d8 <osMutexWait>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10b      	bne.n	80014cc <SensorTask+0x138>
                {
                    ph = calculated_ph;
 80014b4:	4a38      	ldr	r2, [pc, #224]	@ (8001598 <SensorTask+0x204>)
 80014b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014b8:	6013      	str	r3, [r2, #0]
                    osMutexRelease(dataMutexHandle);
 80014ba:	4b36      	ldr	r3, [pc, #216]	@ (8001594 <SensorTask+0x200>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 f8d8 	bl	8004674 <osMutexRelease>
 80014c4:	e002      	b.n	80014cc <SensorTask+0x138>
                }
            }
            else
            {
                HAL_ADC_Stop(&hadc);
 80014c6:	482c      	ldr	r0, [pc, #176]	@ (8001578 <SensorTask+0x1e4>)
 80014c8:	f000 ff54 	bl	8002374 <HAL_ADC_Stop>
            }
        }

        // Leitura real do DHT22
        DHT22_Status dhtStatus = DHT22_ReadData(&DHT22_Data, DHT22_PORT, DHT22_PIN);
 80014cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014d0:	4932      	ldr	r1, [pc, #200]	@ (800159c <SensorTask+0x208>)
 80014d2:	4833      	ldr	r0, [pc, #204]	@ (80015a0 <SensorTask+0x20c>)
 80014d4:	f7ff fb3e 	bl	8000b54 <DHT22_ReadData>
 80014d8:	4603      	mov	r3, r0
 80014da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

        if (dhtStatus == DHT22_OK)
 80014de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d113      	bne.n	800150e <SensorTask+0x17a>
        {
            if (dataMutexHandle != NULL && osMutexWait(dataMutexHandle, osWaitForever) == osOK)
 80014e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001594 <SensorTask+0x200>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d03d      	beq.n	800156a <SensorTask+0x1d6>
 80014ee:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <SensorTask+0x200>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f04f 31ff 	mov.w	r1, #4294967295
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 f86e 	bl	80045d8 <osMutexWait>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d133      	bne.n	800156a <SensorTask+0x1d6>
            {
                // DHT22_Data já foi preenchido pela função DHT22_ReadData
                osMutexRelease(dataMutexHandle);
 8001502:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <SensorTask+0x200>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f003 f8b4 	bl	8004674 <osMutexRelease>
 800150c:	e02d      	b.n	800156a <SensorTask+0x1d6>
            }
        }
        else
        {
            const char *erro;
            if (dhtStatus == DHT22_ERROR_TIMEOUT)
 800150e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001512:	2b01      	cmp	r3, #1
 8001514:	d102      	bne.n	800151c <SensorTask+0x188>
                erro = "[DHT22] Timeout\r\n";
 8001516:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <SensorTask+0x210>)
 8001518:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800151a:	e008      	b.n	800152e <SensorTask+0x19a>
            else if (dhtStatus == DHT22_ERROR_CHECKSUM)
 800151c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001520:	2b02      	cmp	r3, #2
 8001522:	d102      	bne.n	800152a <SensorTask+0x196>
                erro = "[DHT22] Checksum inválido\r\n";
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <SensorTask+0x214>)
 8001526:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001528:	e001      	b.n	800152e <SensorTask+0x19a>
            else
                erro = "[DHT22] Erro desconhecido\r\n";
 800152a:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <SensorTask+0x218>)
 800152c:	66fb      	str	r3, [r7, #108]	@ 0x6c

            if (uartMutexHandle != NULL && osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <SensorTask+0x1e0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d019      	beq.n	800156a <SensorTask+0x1d6>
 8001536:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <SensorTask+0x1e0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f04f 31ff 	mov.w	r1, #4294967295
 800153e:	4618      	mov	r0, r3
 8001540:	f003 f84a 	bl	80045d8 <osMutexWait>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <SensorTask+0x1d6>
                HAL_UART_Transmit(&huart2, (uint8_t*)erro, strlen(erro), HAL_MAX_DELAY);
 800154a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800154c:	f7fe fe18 	bl	8000180 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800155a:	4815      	ldr	r0, [pc, #84]	@ (80015b0 <SensorTask+0x21c>)
 800155c:	f002 fcd2 	bl	8003f04 <HAL_UART_Transmit>
                osMutexRelease(uartMutexHandle);
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <SensorTask+0x1e0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f003 f885 	bl	8004674 <osMutexRelease>
            }
        }

        osDelay(1000);  // Delay entre leituras
 800156a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800156e:	f003 f806 	bl	800457e <osDelay>
    {
 8001572:	e726      	b.n	80013c2 <SensorTask+0x2e>
 8001574:	20000344 	.word	0x20000344
 8001578:	20000284 	.word	0x20000284
 800157c:	08006da8 	.word	0x08006da8
 8001580:	08006dbc 	.word	0x08006dbc
 8001584:	3a534067 	.word	0x3a534067
 8001588:	40200000 	.word	0x40200000
 800158c:	3e3851ec 	.word	0x3e3851ec
 8001590:	40e00000 	.word	0x40e00000
 8001594:	20000340 	.word	0x20000340
 8001598:	20000000 	.word	0x20000000
 800159c:	40020400 	.word	0x40020400
 80015a0:	20000334 	.word	0x20000334
 80015a4:	08006dc0 	.word	0x08006dc0
 80015a8:	08006dd4 	.word	0x08006dd4
 80015ac:	08006df4 	.word	0x08006df4
 80015b0:	200002d8 	.word	0x200002d8

080015b4 <AlarmeTask>:
}



void AlarmeTask(void const * argument)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        float localPh = 0.0f;
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]

        if (osMutexWait(dataMutexHandle, osWaitForever) == osOK)
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <AlarmeTask+0x80>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 f804 	bl	80045d8 <osMutexWait>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d107      	bne.n	80015e6 <AlarmeTask+0x32>
        {
            localPh = ph;
 80015d6:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <AlarmeTask+0x84>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
            osMutexRelease(dataMutexHandle);
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <AlarmeTask+0x80>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 f847 	bl	8004674 <osMutexRelease>
        }

        // Se pH fora da faixa segura [4.0, 5.5] → LED acende
        if (localPh < 4.0f || localPh > 5.5f)
 80015e6:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7ff f87c 	bl	80006e8 <__aeabi_fcmplt>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <AlarmeTask+0x50>
 80015f6:	4911      	ldr	r1, [pc, #68]	@ (800163c <AlarmeTask+0x88>)
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff f893 	bl	8000724 <__aeabi_fcmpgt>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d009      	beq.n	8001618 <AlarmeTask+0x64>
        {
            HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800160a:	480d      	ldr	r0, [pc, #52]	@ (8001640 <AlarmeTask+0x8c>)
 800160c:	f001 fc0b 	bl	8002e26 <HAL_GPIO_WritePin>
            led_status = 1;
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <AlarmeTask+0x90>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	e008      	b.n	800162a <AlarmeTask+0x76>
        }
        else
        {
            HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800161e:	4808      	ldr	r0, [pc, #32]	@ (8001640 <AlarmeTask+0x8c>)
 8001620:	f001 fc01 	bl	8002e26 <HAL_GPIO_WritePin>
            led_status = 0;
 8001624:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <AlarmeTask+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
        }

        osDelay(500);
 800162a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800162e:	f002 ffa6 	bl	800457e <osDelay>
    {
 8001632:	e7c3      	b.n	80015bc <AlarmeTask+0x8>
 8001634:	20000340 	.word	0x20000340
 8001638:	20000000 	.word	0x20000000
 800163c:	40b00000 	.word	0x40b00000
 8001640:	40020000 	.word	0x40020000
 8001644:	2000033c 	.word	0x2000033c

08001648 <floatToString>:





void floatToString(float value, char *buffer, int decimals) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	@ 0x30
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
    int intPart = (int)value;
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff f86f 	bl	8000738 <__aeabi_f2iz>
 800165a:	4603      	mov	r3, r0
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float fracPart = fabs(value - intPart); // Parte fracionária absoluta
 800165e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001660:	f7fe fe50 	bl	8000304 <__aeabi_i2f>
 8001664:	4603      	mov	r3, r0
 8001666:	4619      	mov	r1, r3
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7fe fd95 	bl	8000198 <__aeabi_fsub>
 800166e:	4603      	mov	r3, r0
 8001670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Trata números negativos
    if (value < 0) {
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f7ff f834 	bl	80006e8 <__aeabi_fcmplt>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d009      	beq.n	800169a <floatToString+0x52>
        *buffer++ = '-';
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	60ba      	str	r2, [r7, #8]
 800168c:	222d      	movs	r2, #45	@ 0x2d
 800168e:	701a      	strb	r2, [r3, #0]
        intPart = abs(intPart);
 8001690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001692:	2b00      	cmp	r3, #0
 8001694:	bfb8      	it	lt
 8001696:	425b      	neglt	r3, r3
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    // Converte parte inteira
    int i = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (intPart == 0) {
 800169e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d126      	bne.n	80016f2 <floatToString+0xaa>
        buffer[i++] = '0';
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80016aa:	461a      	mov	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4413      	add	r3, r2
 80016b0:	2230      	movs	r2, #48	@ 0x30
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e046      	b.n	8001744 <floatToString+0xfc>
    } else {
        while (intPart > 0) {
            buffer[i++] = (intPart % 10) + '0';
 80016b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016b8:	4b41      	ldr	r3, [pc, #260]	@ (80017c0 <floatToString+0x178>)
 80016ba:	fb83 1302 	smull	r1, r3, r3, r2
 80016be:	1099      	asrs	r1, r3, #2
 80016c0:	17d3      	asrs	r3, r2, #31
 80016c2:	1ac9      	subs	r1, r1, r3
 80016c4:	460b      	mov	r3, r1
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	1ad1      	subs	r1, r2, r3
 80016ce:	b2ca      	uxtb	r2, r1
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d2:	1c59      	adds	r1, r3, #1
 80016d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80016d6:	4619      	mov	r1, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	440b      	add	r3, r1
 80016dc:	3230      	adds	r2, #48	@ 0x30
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]
            intPart /= 10;
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	4a36      	ldr	r2, [pc, #216]	@ (80017c0 <floatToString+0x178>)
 80016e6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ea:	1092      	asrs	r2, r2, #2
 80016ec:	17db      	asrs	r3, r3, #31
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (intPart > 0) {
 80016f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dcde      	bgt.n	80016b6 <floatToString+0x6e>
        }
        // Inverte os dígitos
        for (int j = 0; j < i / 2; j++) {
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
 80016fc:	e01a      	b.n	8001734 <floatToString+0xec>
            char temp = buffer[j];
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	76fb      	strb	r3, [r7, #27]
            buffer[j] = buffer[i - j - 1];
 8001708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	3b01      	subs	r3, #1
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	441a      	add	r2, r3
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	440b      	add	r3, r1
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	701a      	strb	r2, [r3, #0]
            buffer[i - j - 1] = temp;
 800171e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	3b01      	subs	r3, #1
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	4413      	add	r3, r2
 800172a:	7efa      	ldrb	r2, [r7, #27]
 800172c:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < i / 2; j++) {
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	3301      	adds	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	0fda      	lsrs	r2, r3, #31
 8001738:	4413      	add	r3, r2
 800173a:	105b      	asrs	r3, r3, #1
 800173c:	461a      	mov	r2, r3
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	4293      	cmp	r3, r2
 8001742:	dbdc      	blt.n	80016fe <floatToString+0xb6>
        }
    }

    // Parte decimal
    if (decimals > 0) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	dd31      	ble.n	80017ae <floatToString+0x166>
        buffer[i++] = '.';
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001750:	461a      	mov	r2, r3
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	4413      	add	r3, r2
 8001756:	222e      	movs	r2, #46	@ 0x2e
 8001758:	701a      	strb	r2, [r3, #0]
        for (int d = 0; d < decimals; d++) {
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	e022      	b.n	80017a6 <floatToString+0x15e>
            fracPart *= 10;
 8001760:	4918      	ldr	r1, [pc, #96]	@ (80017c4 <floatToString+0x17c>)
 8001762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001764:	f7fe fe22 	bl	80003ac <__aeabi_fmul>
 8001768:	4603      	mov	r3, r0
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
            int digit = (int)fracPart;
 800176c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800176e:	f7fe ffe3 	bl	8000738 <__aeabi_f2iz>
 8001772:	4603      	mov	r3, r0
 8001774:	617b      	str	r3, [r7, #20]
            buffer[i++] = digit + '0';
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	1c59      	adds	r1, r3, #1
 800177e:	6279      	str	r1, [r7, #36]	@ 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	440b      	add	r3, r1
 8001786:	3230      	adds	r2, #48	@ 0x30
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	701a      	strb	r2, [r3, #0]
            fracPart -= digit;
 800178c:	6978      	ldr	r0, [r7, #20]
 800178e:	f7fe fdb9 	bl	8000304 <__aeabi_i2f>
 8001792:	4603      	mov	r3, r0
 8001794:	4619      	mov	r1, r3
 8001796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001798:	f7fe fcfe 	bl	8000198 <__aeabi_fsub>
 800179c:	4603      	mov	r3, r0
 800179e:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (int d = 0; d < decimals; d++) {
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	3301      	adds	r3, #1
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dbd8      	blt.n	8001760 <floatToString+0x118>
        }
    }

    buffer[i] = '\0'; // Terminador nulo
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	4413      	add	r3, r2
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
}
 80017b8:	bf00      	nop
 80017ba:	3730      	adds	r7, #48	@ 0x30
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	66666667 	.word	0x66666667
 80017c4:	41200000 	.word	0x41200000

080017c8 <LoggerTask>:
static char tempStr[16];
static char humStr[16];
static char phStr[16];

void LoggerTask(void const * argument)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    if (uartMutexHandle != NULL && osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 80017d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001940 <LoggerTask+0x178>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00e      	beq.n	80017f6 <LoggerTask+0x2e>
 80017d8:	4b59      	ldr	r3, [pc, #356]	@ (8001940 <LoggerTask+0x178>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fef9 	bl	80045d8 <osMutexWait>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <LoggerTask+0x2e>
        //HAL_UART_Transmit(&huart2, (uint8_t*)"LoggerTask INICIOU\r\n", 22, HAL_MAX_DELAY);
        osMutexRelease(uartMutexHandle);
 80017ec:	4b54      	ldr	r3, [pc, #336]	@ (8001940 <LoggerTask+0x178>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 ff3f 	bl	8004674 <osMutexRelease>
    for (;;)
    {
        float localTemp, localHum, localPh;
        uint8_t localLed;

        if (osMutexWait(dataMutexHandle, osWaitForever) == osOK)
 80017f6:	4b53      	ldr	r3, [pc, #332]	@ (8001944 <LoggerTask+0x17c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f04f 31ff 	mov.w	r1, #4294967295
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 feea 	bl	80045d8 <osMutexWait>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d110      	bne.n	800182c <LoggerTask+0x64>
        {
            localTemp = DHT22_Data.Temperature;
 800180a:	4b4f      	ldr	r3, [pc, #316]	@ (8001948 <LoggerTask+0x180>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	617b      	str	r3, [r7, #20]
            localHum = DHT22_Data.Humidity;
 8001810:	4b4d      	ldr	r3, [pc, #308]	@ (8001948 <LoggerTask+0x180>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	613b      	str	r3, [r7, #16]
            localPh = ph;
 8001816:	4b4d      	ldr	r3, [pc, #308]	@ (800194c <LoggerTask+0x184>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]
            localLed = led_status;
 800181c:	4b4c      	ldr	r3, [pc, #304]	@ (8001950 <LoggerTask+0x188>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	72fb      	strb	r3, [r7, #11]
            osMutexRelease(dataMutexHandle);
 8001822:	4b48      	ldr	r3, [pc, #288]	@ (8001944 <LoggerTask+0x17c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f002 ff24 	bl	8004674 <osMutexRelease>
        }

        floatToString(localTemp, tempStr, 1);
 800182c:	2201      	movs	r2, #1
 800182e:	4949      	ldr	r1, [pc, #292]	@ (8001954 <LoggerTask+0x18c>)
 8001830:	6978      	ldr	r0, [r7, #20]
 8001832:	f7ff ff09 	bl	8001648 <floatToString>
        floatToString(localHum, humStr, 1);
 8001836:	2201      	movs	r2, #1
 8001838:	4947      	ldr	r1, [pc, #284]	@ (8001958 <LoggerTask+0x190>)
 800183a:	6938      	ldr	r0, [r7, #16]
 800183c:	f7ff ff04 	bl	8001648 <floatToString>
        floatToString(localPh, phStr, 2);
 8001840:	2202      	movs	r2, #2
 8001842:	4946      	ldr	r1, [pc, #280]	@ (800195c <LoggerTask+0x194>)
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f7ff feff 	bl	8001648 <floatToString>

        strcpy(buffer, "[LOGGER] Temp: ");
 800184a:	4a45      	ldr	r2, [pc, #276]	@ (8001960 <LoggerTask+0x198>)
 800184c:	4b45      	ldr	r3, [pc, #276]	@ (8001964 <LoggerTask+0x19c>)
 800184e:	4614      	mov	r4, r2
 8001850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001852:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        strcat(buffer, tempStr);
 8001856:	493f      	ldr	r1, [pc, #252]	@ (8001954 <LoggerTask+0x18c>)
 8001858:	4841      	ldr	r0, [pc, #260]	@ (8001960 <LoggerTask+0x198>)
 800185a:	f005 f9c7 	bl	8006bec <strcat>
        strcat(buffer, " C | Hum: ");
 800185e:	4840      	ldr	r0, [pc, #256]	@ (8001960 <LoggerTask+0x198>)
 8001860:	f7fe fc8e 	bl	8000180 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <LoggerTask+0x198>)
 800186a:	4413      	add	r3, r2
 800186c:	493e      	ldr	r1, [pc, #248]	@ (8001968 <LoggerTask+0x1a0>)
 800186e:	461a      	mov	r2, r3
 8001870:	460b      	mov	r3, r1
 8001872:	cb03      	ldmia	r3!, {r0, r1}
 8001874:	6010      	str	r0, [r2, #0]
 8001876:	6051      	str	r1, [r2, #4]
 8001878:	8819      	ldrh	r1, [r3, #0]
 800187a:	789b      	ldrb	r3, [r3, #2]
 800187c:	8111      	strh	r1, [r2, #8]
 800187e:	7293      	strb	r3, [r2, #10]
        strcat(buffer, humStr);
 8001880:	4935      	ldr	r1, [pc, #212]	@ (8001958 <LoggerTask+0x190>)
 8001882:	4837      	ldr	r0, [pc, #220]	@ (8001960 <LoggerTask+0x198>)
 8001884:	f005 f9b2 	bl	8006bec <strcat>
        strcat(buffer, " % | pH: ");
 8001888:	4835      	ldr	r0, [pc, #212]	@ (8001960 <LoggerTask+0x198>)
 800188a:	f7fe fc79 	bl	8000180 <strlen>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	4b33      	ldr	r3, [pc, #204]	@ (8001960 <LoggerTask+0x198>)
 8001894:	4413      	add	r3, r2
 8001896:	4935      	ldr	r1, [pc, #212]	@ (800196c <LoggerTask+0x1a4>)
 8001898:	461a      	mov	r2, r3
 800189a:	460b      	mov	r3, r1
 800189c:	cb03      	ldmia	r3!, {r0, r1}
 800189e:	6010      	str	r0, [r2, #0]
 80018a0:	6051      	str	r1, [r2, #4]
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	8113      	strh	r3, [r2, #8]
        strcat(buffer, phStr);
 80018a6:	492d      	ldr	r1, [pc, #180]	@ (800195c <LoggerTask+0x194>)
 80018a8:	482d      	ldr	r0, [pc, #180]	@ (8001960 <LoggerTask+0x198>)
 80018aa:	f005 f99f 	bl	8006bec <strcat>
        strcat(buffer, " | LED: ");
 80018ae:	482c      	ldr	r0, [pc, #176]	@ (8001960 <LoggerTask+0x198>)
 80018b0:	f7fe fc66 	bl	8000180 <strlen>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <LoggerTask+0x198>)
 80018ba:	4413      	add	r3, r2
 80018bc:	492c      	ldr	r1, [pc, #176]	@ (8001970 <LoggerTask+0x1a8>)
 80018be:	461a      	mov	r2, r3
 80018c0:	460b      	mov	r3, r1
 80018c2:	cb03      	ldmia	r3!, {r0, r1}
 80018c4:	6010      	str	r0, [r2, #0]
 80018c6:	6051      	str	r1, [r2, #4]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	7213      	strb	r3, [r2, #8]
        strcat(buffer, localLed ? "ON" : "OFF");
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <LoggerTask+0x10e>
 80018d2:	4b28      	ldr	r3, [pc, #160]	@ (8001974 <LoggerTask+0x1ac>)
 80018d4:	e000      	b.n	80018d8 <LoggerTask+0x110>
 80018d6:	4b28      	ldr	r3, [pc, #160]	@ (8001978 <LoggerTask+0x1b0>)
 80018d8:	4619      	mov	r1, r3
 80018da:	4821      	ldr	r0, [pc, #132]	@ (8001960 <LoggerTask+0x198>)
 80018dc:	f005 f986 	bl	8006bec <strcat>
        strcat(buffer, "\r\n");
 80018e0:	481f      	ldr	r0, [pc, #124]	@ (8001960 <LoggerTask+0x198>)
 80018e2:	f7fe fc4d 	bl	8000180 <strlen>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <LoggerTask+0x198>)
 80018ec:	4413      	add	r3, r2
 80018ee:	4a23      	ldr	r2, [pc, #140]	@ (800197c <LoggerTask+0x1b4>)
 80018f0:	8811      	ldrh	r1, [r2, #0]
 80018f2:	7892      	ldrb	r2, [r2, #2]
 80018f4:	8019      	strh	r1, [r3, #0]
 80018f6:	709a      	strb	r2, [r3, #2]

        if (uartMutexHandle != NULL && osMutexWait(uartMutexHandle, osWaitForever) == osOK)
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <LoggerTask+0x178>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d019      	beq.n	8001934 <LoggerTask+0x16c>
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <LoggerTask+0x178>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fe65 	bl	80045d8 <osMutexWait>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10f      	bne.n	8001934 <LoggerTask+0x16c>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001914:	4812      	ldr	r0, [pc, #72]	@ (8001960 <LoggerTask+0x198>)
 8001916:	f7fe fc33 	bl	8000180 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	b29a      	uxth	r2, r3
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	490f      	ldr	r1, [pc, #60]	@ (8001960 <LoggerTask+0x198>)
 8001924:	4816      	ldr	r0, [pc, #88]	@ (8001980 <LoggerTask+0x1b8>)
 8001926:	f002 faed 	bl	8003f04 <HAL_UART_Transmit>
            osMutexRelease(uartMutexHandle);
 800192a:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <LoggerTask+0x178>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f002 fea0 	bl	8004674 <osMutexRelease>
        }

        osDelay(2222); // Delay não múltiplo de 100ms para evitar conflito com CLI
 8001934:	f640 00ae 	movw	r0, #2222	@ 0x8ae
 8001938:	f002 fe21 	bl	800457e <osDelay>
    {
 800193c:	e75b      	b.n	80017f6 <LoggerTask+0x2e>
 800193e:	bf00      	nop
 8001940:	20000344 	.word	0x20000344
 8001944:	20000340 	.word	0x20000340
 8001948:	20000334 	.word	0x20000334
 800194c:	20000000 	.word	0x20000000
 8001950:	2000033c 	.word	0x2000033c
 8001954:	200003c8 	.word	0x200003c8
 8001958:	200003d8 	.word	0x200003d8
 800195c:	200003e8 	.word	0x200003e8
 8001960:	20000348 	.word	0x20000348
 8001964:	08006e10 	.word	0x08006e10
 8001968:	08006e20 	.word	0x08006e20
 800196c:	08006e2c 	.word	0x08006e2c
 8001970:	08006e38 	.word	0x08006e38
 8001974:	08006e44 	.word	0x08006e44
 8001978:	08006e48 	.word	0x08006e48
 800197c:	08006dbc 	.word	0x08006dbc
 8001980:	200002d8 	.word	0x200002d8

08001984 <CLITask>:
}



void CLITask(void const * argument)
{
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	b0a0      	sub	sp, #128	@ 0x80
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    if (uartMutexHandle != NULL && osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 800198c:	4bb4      	ldr	r3, [pc, #720]	@ (8001c60 <CLITask+0x2dc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00e      	beq.n	80019b2 <CLITask+0x2e>
 8001994:	4bb2      	ldr	r3, [pc, #712]	@ (8001c60 <CLITask+0x2dc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	4618      	mov	r0, r3
 800199e:	f002 fe1b 	bl	80045d8 <osMutexWait>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d104      	bne.n	80019b2 <CLITask+0x2e>
        //HAL_UART_Transmit(&huart2, (uint8_t*)"CLITask INICIOU\r\n", 19, HAL_MAX_DELAY);
        osMutexRelease(uartMutexHandle);
 80019a8:	4bad      	ldr	r3, [pc, #692]	@ (8001c60 <CLITask+0x2dc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 fe61 	bl	8004674 <osMutexRelease>

    uint8_t rxData;

    for (;;)
    {
        if (HAL_UART_Receive(&huart2, &rxData, 1, 100) == HAL_OK)
 80019b2:	f107 016f 	add.w	r1, r7, #111	@ 0x6f
 80019b6:	2364      	movs	r3, #100	@ 0x64
 80019b8:	2201      	movs	r2, #1
 80019ba:	48aa      	ldr	r0, [pc, #680]	@ (8001c64 <CLITask+0x2e0>)
 80019bc:	f002 fb2d 	bl	800401a <HAL_UART_Receive>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 8148 	bne.w	8001c58 <CLITask+0x2d4>
        {
            if (rxData == 'H' || rxData == 'h')
 80019c8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80019cc:	2b48      	cmp	r3, #72	@ 0x48
 80019ce:	d003      	beq.n	80019d8 <CLITask+0x54>
 80019d0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80019d4:	2b68      	cmp	r3, #104	@ 0x68
 80019d6:	d122      	bne.n	8001a1e <CLITask+0x9a>
            {
                char *help =
 80019d8:	4ba3      	ldr	r3, [pc, #652]	@ (8001c68 <CLITask+0x2e4>)
 80019da:	673b      	str	r3, [r7, #112]	@ 0x70
                  "'H' - Ajuda\r\n"
                  "'R' - Resetar pH para 7.0\r\n"
                  "'P' - Mostrar valor atual do pH\r\n"
                  "'T' - Mostrar temperatura do sensor\r\n"
                  ;
                if (uartMutexHandle != NULL && osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 80019dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001c60 <CLITask+0x2dc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 8134 	beq.w	8001c4e <CLITask+0x2ca>
 80019e6:	4b9e      	ldr	r3, [pc, #632]	@ (8001c60 <CLITask+0x2dc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f04f 31ff 	mov.w	r1, #4294967295
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fdf2 	bl	80045d8 <osMutexWait>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 8129 	bne.w	8001c4e <CLITask+0x2ca>
                    HAL_UART_Transmit(&huart2, (uint8_t*)help, strlen(help), HAL_MAX_DELAY);
 80019fc:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80019fe:	f7fe fbbf 	bl	8000180 <strlen>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001a0c:	4895      	ldr	r0, [pc, #596]	@ (8001c64 <CLITask+0x2e0>)
 8001a0e:	f002 fa79 	bl	8003f04 <HAL_UART_Transmit>
                    osMutexRelease(uartMutexHandle);
 8001a12:	4b93      	ldr	r3, [pc, #588]	@ (8001c60 <CLITask+0x2dc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 fe2c 	bl	8004674 <osMutexRelease>
            {
 8001a1c:	e117      	b.n	8001c4e <CLITask+0x2ca>
                }
            }
            else if (rxData == 'R' || rxData == 'r')
 8001a1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a22:	2b52      	cmp	r3, #82	@ 0x52
 8001a24:	d003      	beq.n	8001a2e <CLITask+0xaa>
 8001a26:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a2a:	2b72      	cmp	r3, #114	@ 0x72
 8001a2c:	d134      	bne.n	8001a98 <CLITask+0x114>
            {
                if (osMutexWait(dataMutexHandle, osWaitForever) == osOK) {
 8001a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8001c6c <CLITask+0x2e8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f04f 31ff 	mov.w	r1, #4294967295
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 fdce 	bl	80045d8 <osMutexWait>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d107      	bne.n	8001a52 <CLITask+0xce>
                    ph = 7.0f;
 8001a42:	4b8b      	ldr	r3, [pc, #556]	@ (8001c70 <CLITask+0x2ec>)
 8001a44:	4a8b      	ldr	r2, [pc, #556]	@ (8001c74 <CLITask+0x2f0>)
 8001a46:	601a      	str	r2, [r3, #0]
                    osMutexRelease(dataMutexHandle);
 8001a48:	4b88      	ldr	r3, [pc, #544]	@ (8001c6c <CLITask+0x2e8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 fe11 	bl	8004674 <osMutexRelease>
                }

                char *msg = "pH resetado para 7.0\r\n";
 8001a52:	4b89      	ldr	r3, [pc, #548]	@ (8001c78 <CLITask+0x2f4>)
 8001a54:	677b      	str	r3, [r7, #116]	@ 0x74
                if (uartMutexHandle != NULL && osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 8001a56:	4b82      	ldr	r3, [pc, #520]	@ (8001c60 <CLITask+0x2dc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80f9 	beq.w	8001c52 <CLITask+0x2ce>
 8001a60:	4b7f      	ldr	r3, [pc, #508]	@ (8001c60 <CLITask+0x2dc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 fdb5 	bl	80045d8 <osMutexWait>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 80ee 	bne.w	8001c52 <CLITask+0x2ce>
                    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001a76:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001a78:	f7fe fb82 	bl	8000180 <strlen>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001a86:	4877      	ldr	r0, [pc, #476]	@ (8001c64 <CLITask+0x2e0>)
 8001a88:	f002 fa3c 	bl	8003f04 <HAL_UART_Transmit>
                    osMutexRelease(uartMutexHandle);
 8001a8c:	4b74      	ldr	r3, [pc, #464]	@ (8001c60 <CLITask+0x2dc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fdef 	bl	8004674 <osMutexRelease>
            {
 8001a96:	e0dc      	b.n	8001c52 <CLITask+0x2ce>
                }
            }
            else if (rxData == 'P' || rxData == 'p')
 8001a98:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a9c:	2b50      	cmp	r3, #80	@ 0x50
 8001a9e:	d003      	beq.n	8001aa8 <CLITask+0x124>
 8001aa0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001aa4:	2b70      	cmp	r3, #112	@ 0x70
 8001aa6:	d165      	bne.n	8001b74 <CLITask+0x1f0>
            {
                float localPh;
                if (osMutexWait(dataMutexHandle, osWaitForever) == osOK) {
 8001aa8:	4b70      	ldr	r3, [pc, #448]	@ (8001c6c <CLITask+0x2e8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 fd91 	bl	80045d8 <osMutexWait>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d107      	bne.n	8001acc <CLITask+0x148>
                    localPh = ph;
 8001abc:	4b6c      	ldr	r3, [pc, #432]	@ (8001c70 <CLITask+0x2ec>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                    osMutexRelease(dataMutexHandle);
 8001ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c6c <CLITask+0x2e8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fdd4 	bl	8004674 <osMutexRelease>
                }

                char phStr[16];
                floatToString(localPh, phStr, 2);
 8001acc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001ad6:	f7ff fdb7 	bl	8001648 <floatToString>
                char msg[64] = "Valor atual do pH: ";
 8001ada:	4b68      	ldr	r3, [pc, #416]	@ (8001c7c <CLITask+0x2f8>)
 8001adc:	f107 040c 	add.w	r4, r7, #12
 8001ae0:	461d      	mov	r5, r3
 8001ae2:	6828      	ldr	r0, [r5, #0]
 8001ae4:	6869      	ldr	r1, [r5, #4]
 8001ae6:	68aa      	ldr	r2, [r5, #8]
 8001ae8:	68eb      	ldr	r3, [r5, #12]
 8001aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aec:	6928      	ldr	r0, [r5, #16]
 8001aee:	6020      	str	r0, [r4, #0]
 8001af0:	f107 0320 	add.w	r3, r7, #32
 8001af4:	222c      	movs	r2, #44	@ 0x2c
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f005 f86f 	bl	8006bdc <memset>
                strcat(msg, phStr);
 8001afe:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f005 f86f 	bl	8006bec <strcat>
                strcat(msg, "\r\n");
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fb34 	bl	8000180 <strlen>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4413      	add	r3, r2
 8001b22:	4a57      	ldr	r2, [pc, #348]	@ (8001c80 <CLITask+0x2fc>)
 8001b24:	8811      	ldrh	r1, [r2, #0]
 8001b26:	7892      	ldrb	r2, [r2, #2]
 8001b28:	8019      	strh	r1, [r3, #0]
 8001b2a:	709a      	strb	r2, [r3, #2]

                if (uartMutexHandle != NULL && osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 8001b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c60 <CLITask+0x2dc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8090 	beq.w	8001c56 <CLITask+0x2d2>
 8001b36:	4b4a      	ldr	r3, [pc, #296]	@ (8001c60 <CLITask+0x2dc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fd4a 	bl	80045d8 <osMutexWait>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f040 8085 	bne.w	8001c56 <CLITask+0x2d2>
                    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fb15 	bl	8000180 <strlen>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	f107 010c 	add.w	r1, r7, #12
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	4840      	ldr	r0, [pc, #256]	@ (8001c64 <CLITask+0x2e0>)
 8001b64:	f002 f9ce 	bl	8003f04 <HAL_UART_Transmit>
                    osMutexRelease(uartMutexHandle);
 8001b68:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <CLITask+0x2dc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fd81 	bl	8004674 <osMutexRelease>
            {
 8001b72:	e070      	b.n	8001c56 <CLITask+0x2d2>
                }
            }
            else if (rxData == 'T' || rxData == 't')
 8001b74:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b78:	2b54      	cmp	r3, #84	@ 0x54
 8001b7a:	d003      	beq.n	8001b84 <CLITask+0x200>
 8001b7c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b80:	2b74      	cmp	r3, #116	@ 0x74
 8001b82:	d169      	bne.n	8001c58 <CLITask+0x2d4>
            {
                float temp;
                if (osMutexWait(dataMutexHandle, osWaitForever) == osOK) {
 8001b84:	4b39      	ldr	r3, [pc, #228]	@ (8001c6c <CLITask+0x2e8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 fd23 	bl	80045d8 <osMutexWait>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <CLITask+0x224>
                    temp = DHT22_Data.Temperature;
 8001b98:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <CLITask+0x300>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	67bb      	str	r3, [r7, #120]	@ 0x78
                    osMutexRelease(dataMutexHandle);
 8001b9e:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <CLITask+0x2e8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 fd66 	bl	8004674 <osMutexRelease>
                }

                char tempStr[16];
                floatToString(temp, tempStr, 1);
 8001ba8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bac:	2201      	movs	r2, #1
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001bb2:	f7ff fd49 	bl	8001648 <floatToString>
                char msg[64] = "Temperatura: ";
 8001bb6:	4a34      	ldr	r2, [pc, #208]	@ (8001c88 <CLITask+0x304>)
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	6820      	ldr	r0, [r4, #0]
 8001bc0:	6861      	ldr	r1, [r4, #4]
 8001bc2:	68a2      	ldr	r2, [r4, #8]
 8001bc4:	c307      	stmia	r3!, {r0, r1, r2}
 8001bc6:	89a2      	ldrh	r2, [r4, #12]
 8001bc8:	801a      	strh	r2, [r3, #0]
 8001bca:	f107 031a 	add.w	r3, r7, #26
 8001bce:	2232      	movs	r2, #50	@ 0x32
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f005 f802 	bl	8006bdc <memset>
                strcat(msg, tempStr);
 8001bd8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f005 f802 	bl	8006bec <strcat>
                strcat(msg, " °C\r\n");
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fac7 	bl	8000180 <strlen>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a23      	ldr	r2, [pc, #140]	@ (8001c8c <CLITask+0x308>)
 8001bfe:	6810      	ldr	r0, [r2, #0]
 8001c00:	6018      	str	r0, [r3, #0]
 8001c02:	8891      	ldrh	r1, [r2, #4]
 8001c04:	7992      	ldrb	r2, [r2, #6]
 8001c06:	8099      	strh	r1, [r3, #4]
 8001c08:	719a      	strb	r2, [r3, #6]

                if (uartMutexHandle != NULL && osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <CLITask+0x2dc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d022      	beq.n	8001c58 <CLITask+0x2d4>
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <CLITask+0x2dc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 fcdc 	bl	80045d8 <osMutexWait>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d118      	bne.n	8001c58 <CLITask+0x2d4>
                    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe faa8 	bl	8000180 <strlen>
 8001c30:	4603      	mov	r3, r0
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	f107 010c 	add.w	r1, r7, #12
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	4809      	ldr	r0, [pc, #36]	@ (8001c64 <CLITask+0x2e0>)
 8001c3e:	f002 f961 	bl	8003f04 <HAL_UART_Transmit>
                    osMutexRelease(uartMutexHandle);
 8001c42:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <CLITask+0x2dc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 fd14 	bl	8004674 <osMutexRelease>
 8001c4c:	e004      	b.n	8001c58 <CLITask+0x2d4>
            {
 8001c4e:	bf00      	nop
 8001c50:	e002      	b.n	8001c58 <CLITask+0x2d4>
            {
 8001c52:	bf00      	nop
 8001c54:	e000      	b.n	8001c58 <CLITask+0x2d4>
            {
 8001c56:	bf00      	nop
                }
            }

        }

        osDelay(100);
 8001c58:	2064      	movs	r0, #100	@ 0x64
 8001c5a:	f002 fc90 	bl	800457e <osDelay>
        if (HAL_UART_Receive(&huart2, &rxData, 1, 100) == HAL_OK)
 8001c5e:	e6a8      	b.n	80019b2 <CLITask+0x2e>
 8001c60:	20000344 	.word	0x20000344
 8001c64:	200002d8 	.word	0x200002d8
 8001c68:	08006e4c 	.word	0x08006e4c
 8001c6c:	20000340 	.word	0x20000340
 8001c70:	20000000 	.word	0x20000000
 8001c74:	40e00000 	.word	0x40e00000
 8001c78:	08006ec8 	.word	0x08006ec8
 8001c7c:	08006ee8 	.word	0x08006ee8
 8001c80:	08006dbc 	.word	0x08006dbc
 8001c84:	20000334 	.word	0x20000334
 8001c88:	08006efc 	.word	0x08006efc
 8001c8c:	08006ee0 	.word	0x08006ee0

08001c90 <StartDefaultTask>:
    }
}


void StartDefaultTask(void const * argument)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  for(;;)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <StartDefaultTask+0x8>

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001ca2:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <HAL_MspInit+0x64>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	4a16      	ldr	r2, [pc, #88]	@ (8001d00 <HAL_MspInit+0x64>)
 8001ca8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001cac:	6253      	str	r3, [r2, #36]	@ 0x24
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <HAL_MspInit+0x64>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <HAL_MspInit+0x64>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a10      	ldr	r2, [pc, #64]	@ (8001d00 <HAL_MspInit+0x64>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <HAL_MspInit+0x64>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_MspInit+0x64>)
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <HAL_MspInit+0x64>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	6253      	str	r3, [r2, #36]	@ 0x24
 8001cde:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_MspInit+0x64>)
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	210f      	movs	r1, #15
 8001cee:	f06f 0001 	mvn.w	r0, #1
 8001cf2:	f000 fec6 	bl	8002a82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	@ 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a15      	ldr	r2, [pc, #84]	@ (8001d78 <HAL_ADC_MspInit+0x74>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d123      	bne.n	8001d6e <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <HAL_ADC_MspInit+0x78>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a14      	ldr	r2, [pc, #80]	@ (8001d7c <HAL_ADC_MspInit+0x78>)
 8001d2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_ADC_MspInit+0x78>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_ADC_MspInit+0x78>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a0e      	ldr	r2, [pc, #56]	@ (8001d7c <HAL_ADC_MspInit+0x78>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	61d3      	str	r3, [r2, #28]
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <HAL_ADC_MspInit+0x78>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001d56:	2323      	movs	r3, #35	@ 0x23
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <HAL_ADC_MspInit+0x7c>)
 8001d6a:	f000 feb5 	bl	8002ad8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	@ 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40012400 	.word	0x40012400
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000

08001d84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a17      	ldr	r2, [pc, #92]	@ (8001e00 <HAL_UART_MspInit+0x7c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d127      	bne.n	8001df6 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001da6:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <HAL_UART_MspInit+0x80>)
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	4a16      	ldr	r2, [pc, #88]	@ (8001e04 <HAL_UART_MspInit+0x80>)
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_UART_MspInit+0x80>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <HAL_UART_MspInit+0x80>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a10      	ldr	r2, [pc, #64]	@ (8001e04 <HAL_UART_MspInit+0x80>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <HAL_UART_MspInit+0x80>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de6:	2307      	movs	r3, #7
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <HAL_UART_MspInit+0x84>)
 8001df2:	f000 fe71 	bl	8002ad8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	@ 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40004400 	.word	0x40004400
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020000 	.word	0x40020000

08001e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08e      	sub	sp, #56	@ 0x38
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001e22:	4b33      	ldr	r3, [pc, #204]	@ (8001ef0 <HAL_InitTick+0xe4>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	4a32      	ldr	r2, [pc, #200]	@ (8001ef0 <HAL_InitTick+0xe4>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6253      	str	r3, [r2, #36]	@ 0x24
 8001e2e:	4b30      	ldr	r3, [pc, #192]	@ (8001ef0 <HAL_InitTick+0xe4>)
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e3a:	f107 0210 	add.w	r2, r7, #16
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 fd73 	bl	8003930 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d103      	bne.n	8001e5c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e54:	f001 fd44 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8001e58:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e5a:	e004      	b.n	8001e66 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e5c:	f001 fd40 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8001e60:	4603      	mov	r3, r0
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e68:	4a22      	ldr	r2, [pc, #136]	@ (8001ef4 <HAL_InitTick+0xe8>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	0c9b      	lsrs	r3, r3, #18
 8001e70:	3b01      	subs	r3, #1
 8001e72:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001e74:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <HAL_InitTick+0xec>)
 8001e76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e7a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <HAL_InitTick+0xec>)
 8001e7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e82:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001e84:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef8 <HAL_InitTick+0xec>)
 8001e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e88:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_InitTick+0xec>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <HAL_InitTick+0xec>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8001e96:	4818      	ldr	r0, [pc, #96]	@ (8001ef8 <HAL_InitTick+0xec>)
 8001e98:	f001 fdda 	bl	8003a50 <HAL_TIM_Base_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001ea2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d11b      	bne.n	8001ee2 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001eaa:	4813      	ldr	r0, [pc, #76]	@ (8001ef8 <HAL_InitTick+0xec>)
 8001eac:	f001 fe18 	bl	8003ae0 <HAL_TIM_Base_Start_IT>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001eb6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d111      	bne.n	8001ee2 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ebe:	201c      	movs	r0, #28
 8001ec0:	f000 fdfb 	bl	8002aba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	d808      	bhi.n	8001edc <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	201c      	movs	r0, #28
 8001ed0:	f000 fdd7 	bl	8002a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ed4:	4a09      	ldr	r2, [pc, #36]	@ (8001efc <HAL_InitTick+0xf0>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e002      	b.n	8001ee2 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ee2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3738      	adds	r7, #56	@ 0x38
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	200003f8 	.word	0x200003f8
 8001efc:	20000008 	.word	0x20000008

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <NMI_Handler+0x4>

08001f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <HardFault_Handler+0x4>

08001f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <MemManage_Handler+0x4>

08001f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <BusFault_Handler+0x4>

08001f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <UsageFault_Handler+0x4>

08001f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <TIM2_IRQHandler+0x10>)
 8001f3a:	f001 fe23 	bl	8003b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200003f8 	.word	0x200003f8

08001f48 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f54:	f7ff fff8 	bl	8001f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f58:	480b      	ldr	r0, [pc, #44]	@ (8001f88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f5a:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a09      	ldr	r2, [pc, #36]	@ (8001f94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f70:	4c09      	ldr	r4, [pc, #36]	@ (8001f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f004 fe45 	bl	8006c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f82:	f7ff f945 	bl	8001210 <main>
  bx lr
 8001f86:	4770      	bx	lr
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001f90:	08006f48 	.word	0x08006f48
  ldr r2, =_sbss
 8001f94:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001f98:	20004588 	.word	0x20004588

08001f9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC1_IRQHandler>

08001f9e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f000 fd5f 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fae:	200f      	movs	r0, #15
 8001fb0:	f7ff ff2c 	bl	8001e0c <HAL_InitTick>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	71fb      	strb	r3, [r7, #7]
 8001fbe:	e001      	b.n	8001fc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fc0:	f7ff fe6c 	bl	8001c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd4:	4b02      	ldr	r3, [pc, #8]	@ (8001fe0 <HAL_GetTick+0x10>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	20000438 	.word	0x20000438

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff fff0 	bl	8001fd0 <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d004      	beq.n	8002008 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_Delay+0x40>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4413      	add	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002008:	bf00      	nop
 800200a:	f7ff ffe1 	bl	8001fd0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	429a      	cmp	r2, r3
 8002018:	d8f7      	bhi.n	800200a <HAL_Delay+0x26>
  {
  }
}
 800201a:	bf00      	nop
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000000c 	.word	0x2000000c

08002028 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08e      	sub	sp, #56	@ 0x38
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e127      	b.n	8002298 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d115      	bne.n	8002082 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002064:	4b8e      	ldr	r3, [pc, #568]	@ (80022a0 <HAL_ADC_Init+0x278>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a8d      	ldr	r2, [pc, #564]	@ (80022a0 <HAL_ADC_Init+0x278>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6213      	str	r3, [r2, #32]
 8002070:	4b8b      	ldr	r3, [pc, #556]	@ (80022a0 <HAL_ADC_Init+0x278>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fe41 	bl	8001d04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 80ff 	bne.w	800228e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002094:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002098:	f023 0302 	bic.w	r3, r3, #2
 800209c:	f043 0202 	orr.w	r2, r3, #2
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80020a4:	4b7f      	ldr	r3, [pc, #508]	@ (80022a4 <HAL_ADC_Init+0x27c>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	497c      	ldr	r1, [pc, #496]	@ (80022a4 <HAL_ADC_Init+0x27c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80020be:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020c6:	4619      	mov	r1, r3
 80020c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020cc:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80020e2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80020e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020f0:	4619      	mov	r1, r3
 80020f2:	2302      	movs	r3, #2
 80020f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800210a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800210c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800210e:	4313      	orrs	r3, r2
 8002110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002116:	2b10      	cmp	r3, #16
 8002118:	d007      	beq.n	800212a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002122:	4313      	orrs	r3, r2
 8002124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002126:	4313      	orrs	r3, r2
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002134:	2b40      	cmp	r3, #64	@ 0x40
 8002136:	d04f      	beq.n	80021d8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800213e:	4313      	orrs	r3, r2
 8002140:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800214a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6912      	ldr	r2, [r2, #16]
 8002150:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002154:	d003      	beq.n	800215e <HAL_ADC_Init+0x136>
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6912      	ldr	r2, [r2, #16]
 800215a:	2a01      	cmp	r2, #1
 800215c:	d102      	bne.n	8002164 <HAL_ADC_Init+0x13c>
 800215e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002162:	e000      	b.n	8002166 <HAL_ADC_Init+0x13e>
 8002164:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002166:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800216a:	4313      	orrs	r3, r2
 800216c:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002174:	2b01      	cmp	r3, #1
 8002176:	d125      	bne.n	80021c4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800217e:	2b00      	cmp	r3, #0
 8002180:	d114      	bne.n	80021ac <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	3b01      	subs	r3, #1
 8002188:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800218c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	fa92 f2a2 	rbit	r2, r2
 8002194:	617a      	str	r2, [r7, #20]
  return result;
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	fab2 f282 	clz	r2, r2
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	4093      	lsls	r3, r2
 80021a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021a6:	4313      	orrs	r3, r2
 80021a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80021aa:	e00b      	b.n	80021c4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	4b37      	ldr	r3, [pc, #220]	@ (80022a8 <HAL_ADC_Init+0x280>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	4b33      	ldr	r3, [pc, #204]	@ (80022ac <HAL_ADC_Init+0x284>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021f4:	d003      	beq.n	80021fe <HAL_ADC_Init+0x1d6>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d119      	bne.n	8002232 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8002212:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	fa92 f2a2 	rbit	r2, r2
 800221a:	60fa      	str	r2, [r7, #12]
  return result;
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	fab2 f282 	clz	r2, r2
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	fa03 f202 	lsl.w	r2, r3, r2
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002230:	e007      	b.n	8002242 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8002240:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_ADC_Init+0x288>)
 800224a:	4013      	ands	r3, r2
 800224c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800224e:	429a      	cmp	r2, r3
 8002250:	d10b      	bne.n	800226a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225c:	f023 0303 	bic.w	r3, r3, #3
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002268:	e014      	b.n	8002294 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226e:	f023 0312 	bic.w	r3, r3, #18
 8002272:	f043 0210 	orr.w	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800228c:	e002      	b.n	8002294 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002294:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002298:	4618      	mov	r0, r3
 800229a:	3738      	adds	r7, #56	@ 0x38
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40012700 	.word	0x40012700
 80022a8:	fcfc16ff 	.word	0xfcfc16ff
 80022ac:	c0fff189 	.word	0xc0fff189
 80022b0:	bf80fffe 	.word	0xbf80fffe

080022b4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Start+0x1a>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e04e      	b.n	800236c <HAL_ADC_Start+0xb8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa80 	bl	80027dc <ADC_Enable>
 80022dc:	4603      	mov	r3, r0
 80022de:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d141      	bne.n	800236a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002310:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002324:	d106      	bne.n	8002334 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232a:	f023 0206 	bic.w	r2, r3, #6
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	651a      	str	r2, [r3, #80]	@ 0x50
 8002332:	e002      	b.n	800233a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800234a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d107      	bne.n	800236a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002368:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_ADC_Stop+0x1a>
 800238a:	2302      	movs	r3, #2
 800238c:	e01a      	b.n	80023c4 <HAL_ADC_Stop+0x50>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fa7c 	bl	8002894 <ADC_ConversionStop_Disable>
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e8:	d113      	bne.n	8002412 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023f8:	d10b      	bne.n	8002412 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fe:	f043 0220 	orr.w	r2, r3, #32
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e068      	b.n	80024e4 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002412:	f7ff fddd 	bl	8001fd0 <HAL_GetTick>
 8002416:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002418:	e021      	b.n	800245e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d01d      	beq.n	800245e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_ADC_PollForConversion+0x6c>
 8002428:	f7ff fdd2 	bl	8001fd0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d212      	bcs.n	800245e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	f043 0204 	orr.w	r2, r3, #4
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e042      	b.n	80024e4 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0d6      	beq.n	800241a <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0212 	mvn.w	r2, #18
 800247c:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d124      	bne.n	80024e2 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d11f      	bne.n	80024e2 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a8:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d111      	bne.n	80024e2 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d105      	bne.n	80024e2 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x20>
 8002520:	2302      	movs	r3, #2
 8002522:	e14f      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x2c0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b06      	cmp	r3, #6
 8002532:	d81c      	bhi.n	800256e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	3b05      	subs	r3, #5
 8002546:	221f      	movs	r2, #31
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	4019      	ands	r1, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	3b05      	subs	r3, #5
 8002560:	fa00 f203 	lsl.w	r2, r0, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40
 800256c:	e07e      	b.n	800266c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d81c      	bhi.n	80025b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b23      	subs	r3, #35	@ 0x23
 8002588:	221f      	movs	r2, #31
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	4019      	ands	r1, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	3b23      	subs	r3, #35	@ 0x23
 80025a2:	fa00 f203 	lsl.w	r2, r0, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025ae:	e05d      	b.n	800266c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b12      	cmp	r3, #18
 80025b6:	d81c      	bhi.n	80025f2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	3b41      	subs	r3, #65	@ 0x41
 80025ca:	221f      	movs	r2, #31
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	4019      	ands	r1, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	3b41      	subs	r3, #65	@ 0x41
 80025e4:	fa00 f203 	lsl.w	r2, r0, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80025f0:	e03c      	b.n	800266c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b18      	cmp	r3, #24
 80025f8:	d81c      	bhi.n	8002634 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	3b5f      	subs	r3, #95	@ 0x5f
 800260c:	221f      	movs	r2, #31
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	4019      	ands	r1, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	3b5f      	subs	r3, #95	@ 0x5f
 8002626:	fa00 f203 	lsl.w	r2, r0, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	635a      	str	r2, [r3, #52]	@ 0x34
 8002632:	e01b      	b.n	800266c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	3b7d      	subs	r3, #125	@ 0x7d
 8002646:	221f      	movs	r2, #31
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	4019      	ands	r1, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b7d      	subs	r3, #125	@ 0x7d
 8002660:	fa00 f203 	lsl.w	r2, r0, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b09      	cmp	r3, #9
 8002672:	d81a      	bhi.n	80026aa <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6959      	ldr	r1, [r3, #20]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	2207      	movs	r2, #7
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	4019      	ands	r1, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6898      	ldr	r0, [r3, #8]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	fa00 f203 	lsl.w	r2, r0, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	615a      	str	r2, [r3, #20]
 80026a8:	e05d      	b.n	8002766 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b13      	cmp	r3, #19
 80026b0:	d81c      	bhi.n	80026ec <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6919      	ldr	r1, [r3, #16]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	3b1e      	subs	r3, #30
 80026c4:	2207      	movs	r2, #7
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	4019      	ands	r1, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6898      	ldr	r0, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	3b1e      	subs	r3, #30
 80026de:	fa00 f203 	lsl.w	r2, r0, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	e03c      	b.n	8002766 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b1d      	cmp	r3, #29
 80026f2:	d81c      	bhi.n	800272e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68d9      	ldr	r1, [r3, #12]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	3b3c      	subs	r3, #60	@ 0x3c
 8002706:	2207      	movs	r2, #7
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	4019      	ands	r1, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	6898      	ldr	r0, [r3, #8]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	3b3c      	subs	r3, #60	@ 0x3c
 8002720:	fa00 f203 	lsl.w	r2, r0, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	e01b      	b.n	8002766 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	3b5a      	subs	r3, #90	@ 0x5a
 8002740:	2207      	movs	r2, #7
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	4019      	ands	r1, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6898      	ldr	r0, [r3, #8]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	3b5a      	subs	r3, #90	@ 0x5a
 800275a:	fa00 f203 	lsl.w	r2, r0, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d003      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002772:	2b11      	cmp	r3, #17
 8002774:	d121      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002776:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11b      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002782:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002788:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800278c:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b10      	cmp	r3, #16
 8002794:	d111      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002796:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <HAL_ADC_ConfigChannel+0x2d0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a0f      	ldr	r2, [pc, #60]	@ (80027d8 <HAL_ADC_ConfigChannel+0x2d4>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	0c9a      	lsrs	r2, r3, #18
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80027ac:	e002      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f9      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40012700 	.word	0x40012700
 80027d4:	20000004 	.word	0x20000004
 80027d8:	431bde83 	.word	0x431bde83

080027dc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f6:	2b40      	cmp	r3, #64	@ 0x40
 80027f8:	d043      	beq.n	8002882 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800280a:	4b20      	ldr	r3, [pc, #128]	@ (800288c <ADC_Enable+0xb0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a20      	ldr	r2, [pc, #128]	@ (8002890 <ADC_Enable+0xb4>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	0c9a      	lsrs	r2, r3, #18
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800281e:	e002      	b.n	8002826 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	3b01      	subs	r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f9      	bne.n	8002820 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800282c:	f7ff fbd0 	bl	8001fd0 <HAL_GetTick>
 8002830:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002832:	e01f      	b.n	8002874 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002834:	f7ff fbcc 	bl	8001fd0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d918      	bls.n	8002874 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284c:	2b40      	cmp	r3, #64	@ 0x40
 800284e:	d011      	beq.n	8002874 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002854:	f043 0210 	orr.w	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e007      	b.n	8002884 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287e:	2b40      	cmp	r3, #64	@ 0x40
 8002880:	d1d8      	bne.n	8002834 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000004 	.word	0x20000004
 8002890:	431bde83 	.word	0x431bde83

08002894 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028aa:	2b40      	cmp	r3, #64	@ 0x40
 80028ac:	d12e      	bne.n	800290c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028be:	f7ff fb87 	bl	8001fd0 <HAL_GetTick>
 80028c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028c4:	e01b      	b.n	80028fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80028c6:	f7ff fb83 	bl	8001fd0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d914      	bls.n	80028fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028de:	2b40      	cmp	r3, #64	@ 0x40
 80028e0:	d10d      	bne.n	80028fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e6:	f043 0210 	orr.w	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e007      	b.n	800290e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002908:	2b40      	cmp	r3, #64	@ 0x40
 800290a:	d0dc      	beq.n	80028c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002928:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002934:	4013      	ands	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294a:	4a04      	ldr	r2, [pc, #16]	@ (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	60d3      	str	r3, [r2, #12]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002964:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <__NVIC_GetPriorityGrouping+0x18>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	f003 0307 	and.w	r3, r3, #7
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db0b      	blt.n	80029a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4906      	ldr	r1, [pc, #24]	@ (80029b0 <__NVIC_EnableIRQ+0x34>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f202 	lsl.w	r2, r0, r2
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	@ (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	@ (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	@ 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
         );
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	@ 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff4f 	bl	8002918 <__NVIC_SetPriorityGrouping>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a94:	f7ff ff64 	bl	8002960 <__NVIC_GetPriorityGrouping>
 8002a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff ffb2 	bl	8002a08 <NVIC_EncodePriority>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff81 	bl	80029b4 <__NVIC_SetPriority>
}
 8002ab2:	bf00      	nop
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff57 	bl	800297c <__NVIC_EnableIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002aee:	e160      	b.n	8002db2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8152 	beq.w	8002dac <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d005      	beq.n	8002b20 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d130      	bne.n	8002b82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002b56:	2201      	movs	r2, #1
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	f003 0201 	and.w	r2, r3, #1
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d017      	beq.n	8002bbe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d123      	bne.n	8002c12 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	08da      	lsrs	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3208      	adds	r2, #8
 8002bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	6939      	ldr	r1, [r7, #16]
 8002c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0203 	and.w	r2, r3, #3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80ac 	beq.w	8002dac <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c54:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd0 <HAL_GPIO_Init+0x2f8>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd0 <HAL_GPIO_Init+0x2f8>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6213      	str	r3, [r2, #32]
 8002c60:	4b5b      	ldr	r3, [pc, #364]	@ (8002dd0 <HAL_GPIO_Init+0x2f8>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c6c:	4a59      	ldr	r2, [pc, #356]	@ (8002dd4 <HAL_GPIO_Init+0x2fc>)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	3302      	adds	r3, #2
 8002c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a51      	ldr	r2, [pc, #324]	@ (8002dd8 <HAL_GPIO_Init+0x300>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d025      	beq.n	8002ce4 <HAL_GPIO_Init+0x20c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a50      	ldr	r2, [pc, #320]	@ (8002ddc <HAL_GPIO_Init+0x304>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d01f      	beq.n	8002ce0 <HAL_GPIO_Init+0x208>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a4f      	ldr	r2, [pc, #316]	@ (8002de0 <HAL_GPIO_Init+0x308>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d019      	beq.n	8002cdc <HAL_GPIO_Init+0x204>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a4e      	ldr	r2, [pc, #312]	@ (8002de4 <HAL_GPIO_Init+0x30c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <HAL_GPIO_Init+0x200>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a4d      	ldr	r2, [pc, #308]	@ (8002de8 <HAL_GPIO_Init+0x310>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_GPIO_Init+0x1fc>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a4c      	ldr	r2, [pc, #304]	@ (8002dec <HAL_GPIO_Init+0x314>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <HAL_GPIO_Init+0x1f8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a4b      	ldr	r2, [pc, #300]	@ (8002df0 <HAL_GPIO_Init+0x318>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d101      	bne.n	8002ccc <HAL_GPIO_Init+0x1f4>
 8002cc8:	2306      	movs	r3, #6
 8002cca:	e00c      	b.n	8002ce6 <HAL_GPIO_Init+0x20e>
 8002ccc:	2307      	movs	r3, #7
 8002cce:	e00a      	b.n	8002ce6 <HAL_GPIO_Init+0x20e>
 8002cd0:	2305      	movs	r3, #5
 8002cd2:	e008      	b.n	8002ce6 <HAL_GPIO_Init+0x20e>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	e006      	b.n	8002ce6 <HAL_GPIO_Init+0x20e>
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e004      	b.n	8002ce6 <HAL_GPIO_Init+0x20e>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e002      	b.n	8002ce6 <HAL_GPIO_Init+0x20e>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_GPIO_Init+0x20e>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	f002 0203 	and.w	r2, r2, #3
 8002cec:	0092      	lsls	r2, r2, #2
 8002cee:	4093      	lsls	r3, r2
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cf6:	4937      	ldr	r1, [pc, #220]	@ (8002dd4 <HAL_GPIO_Init+0x2fc>)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d04:	4b3b      	ldr	r3, [pc, #236]	@ (8002df4 <HAL_GPIO_Init+0x31c>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d28:	4a32      	ldr	r2, [pc, #200]	@ (8002df4 <HAL_GPIO_Init+0x31c>)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d2e:	4b31      	ldr	r3, [pc, #196]	@ (8002df4 <HAL_GPIO_Init+0x31c>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d52:	4a28      	ldr	r2, [pc, #160]	@ (8002df4 <HAL_GPIO_Init+0x31c>)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d58:	4b26      	ldr	r3, [pc, #152]	@ (8002df4 <HAL_GPIO_Init+0x31c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002df4 <HAL_GPIO_Init+0x31c>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d82:	4b1c      	ldr	r3, [pc, #112]	@ (8002df4 <HAL_GPIO_Init+0x31c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002da6:	4a13      	ldr	r2, [pc, #76]	@ (8002df4 <HAL_GPIO_Init+0x31c>)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3301      	adds	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f47f ae97 	bne.w	8002af0 <HAL_GPIO_Init+0x18>
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40021400 	.word	0x40021400
 8002df0:	40021800 	.word	0x40021800
 8002df4:	40010400 	.word	0x40010400

08002df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	887b      	ldrh	r3, [r7, #2]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
 8002e14:	e001      	b.n	8002e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	807b      	strh	r3, [r7, #2]
 8002e32:	4613      	mov	r3, r2
 8002e34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e36:	787b      	ldrb	r3, [r7, #1]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e3c:	887a      	ldrh	r2, [r7, #2]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002e42:	e003      	b.n	8002e4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	041a      	lsls	r2, r3, #16
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b085      	sub	sp, #20
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	041a      	lsls	r2, r3, #16
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	887b      	ldrh	r3, [r7, #2]
 8002e76:	400b      	ands	r3, r1
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	619a      	str	r2, [r3, #24]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e31d      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e9a:	4b94      	ldr	r3, [pc, #592]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea4:	4b91      	ldr	r3, [pc, #580]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eac:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d07b      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d006      	beq.n	8002ece <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d10f      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ece:	4b87      	ldr	r3, [pc, #540]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d06a      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x128>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d166      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e2f7      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d106      	bne.n	8002efc <HAL_RCC_OscConfig+0x74>
 8002eee:	4b7f      	ldr	r3, [pc, #508]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e02d      	b.n	8002f58 <HAL_RCC_OscConfig+0xd0>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10c      	bne.n	8002f1e <HAL_RCC_OscConfig+0x96>
 8002f04:	4b79      	ldr	r3, [pc, #484]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a78      	ldr	r2, [pc, #480]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b76      	ldr	r3, [pc, #472]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a75      	ldr	r2, [pc, #468]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	e01c      	b.n	8002f58 <HAL_RCC_OscConfig+0xd0>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0xb8>
 8002f26:	4b71      	ldr	r3, [pc, #452]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a70      	ldr	r2, [pc, #448]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b6e      	ldr	r3, [pc, #440]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6d      	ldr	r2, [pc, #436]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0xd0>
 8002f40:	4b6a      	ldr	r3, [pc, #424]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a69      	ldr	r2, [pc, #420]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b67      	ldr	r3, [pc, #412]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a66      	ldr	r2, [pc, #408]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7ff f836 	bl	8001fd0 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7ff f832 	bl	8001fd0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	@ 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e2ad      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0xe0>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7ff f822 	bl	8001fd0 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7ff f81e 	bl	8001fd0 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	@ 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e299      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fa2:	4b52      	ldr	r3, [pc, #328]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x108>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d05a      	beq.n	8003074 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d119      	bne.n	8002ffe <HAL_RCC_OscConfig+0x176>
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d116      	bne.n	8002ffe <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd0:	4b46      	ldr	r3, [pc, #280]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x160>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e276      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b40      	ldr	r3, [pc, #256]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	493d      	ldr	r1, [pc, #244]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffc:	e03a      	b.n	8003074 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d020      	beq.n	8003048 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003006:	4b3a      	ldr	r3, [pc, #232]	@ (80030f0 <HAL_RCC_OscConfig+0x268>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe ffe0 	bl	8001fd0 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003014:	f7fe ffdc 	bl	8001fd0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e257      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003026:	4b31      	ldr	r3, [pc, #196]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b2e      	ldr	r3, [pc, #184]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	492a      	ldr	r1, [pc, #168]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
 8003046:	e015      	b.n	8003074 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003048:	4b29      	ldr	r3, [pc, #164]	@ (80030f0 <HAL_RCC_OscConfig+0x268>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fe ffbf 	bl	8001fd0 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003056:	f7fe ffbb 	bl	8001fd0 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e236      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003068:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80b8 	beq.w	80031f2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d170      	bne.n	800316a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003088:	4b18      	ldr	r3, [pc, #96]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_OscConfig+0x218>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e21a      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1a      	ldr	r2, [r3, #32]
 80030a4:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d921      	bls.n	80030f4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fc6b 	bl	8003990 <RCC_SetFlashLatencyFromMSIRange>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e208      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c4:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4906      	ldr	r1, [pc, #24]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d6:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	4901      	ldr	r1, [pc, #4]	@ (80030ec <HAL_RCC_OscConfig+0x264>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
 80030ea:	e020      	b.n	800312e <HAL_RCC_OscConfig+0x2a6>
 80030ec:	40023800 	.word	0x40023800
 80030f0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f4:	4b99      	ldr	r3, [pc, #612]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4996      	ldr	r1, [pc, #600]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003106:	4b95      	ldr	r3, [pc, #596]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	061b      	lsls	r3, r3, #24
 8003114:	4991      	ldr	r1, [pc, #580]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fc36 	bl	8003990 <RCC_SetFlashLatencyFromMSIRange>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e1d3      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	0b5b      	lsrs	r3, r3, #13
 8003134:	3301      	adds	r3, #1
 8003136:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800313e:	4a87      	ldr	r2, [pc, #540]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003140:	6892      	ldr	r2, [r2, #8]
 8003142:	0912      	lsrs	r2, r2, #4
 8003144:	f002 020f 	and.w	r2, r2, #15
 8003148:	4985      	ldr	r1, [pc, #532]	@ (8003360 <HAL_RCC_OscConfig+0x4d8>)
 800314a:	5c8a      	ldrb	r2, [r1, r2]
 800314c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800314e:	4a85      	ldr	r2, [pc, #532]	@ (8003364 <HAL_RCC_OscConfig+0x4dc>)
 8003150:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003152:	4b85      	ldr	r3, [pc, #532]	@ (8003368 <HAL_RCC_OscConfig+0x4e0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe fe58 	bl	8001e0c <HAL_InitTick>
 800315c:	4603      	mov	r3, r0
 800315e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d045      	beq.n	80031f2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	e1b5      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d029      	beq.n	80031c6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003172:	4b7e      	ldr	r3, [pc, #504]	@ (800336c <HAL_RCC_OscConfig+0x4e4>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe ff2a 	bl	8001fd0 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003180:	f7fe ff26 	bl	8001fd0 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1a1      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003192:	4b72      	ldr	r3, [pc, #456]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800319e:	4b6f      	ldr	r3, [pc, #444]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	496c      	ldr	r1, [pc, #432]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b0:	4b6a      	ldr	r3, [pc, #424]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	4967      	ldr	r1, [pc, #412]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
 80031c4:	e015      	b.n	80031f2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031c6:	4b69      	ldr	r3, [pc, #420]	@ (800336c <HAL_RCC_OscConfig+0x4e4>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe ff00 	bl	8001fd0 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031d4:	f7fe fefc 	bl	8001fd0 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e177      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031e6:	4b5d      	ldr	r3, [pc, #372]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d030      	beq.n	8003260 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003206:	4b5a      	ldr	r3, [pc, #360]	@ (8003370 <HAL_RCC_OscConfig+0x4e8>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fe fee0 	bl	8001fd0 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003214:	f7fe fedc 	bl	8001fd0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e157      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003226:	4b4d      	ldr	r3, [pc, #308]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x38c>
 8003232:	e015      	b.n	8003260 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003234:	4b4e      	ldr	r3, [pc, #312]	@ (8003370 <HAL_RCC_OscConfig+0x4e8>)
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323a:	f7fe fec9 	bl	8001fd0 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003242:	f7fe fec5 	bl	8001fd0 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e140      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003254:	4b41      	ldr	r3, [pc, #260]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80b5 	beq.w	80033d8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b3a      	ldr	r3, [pc, #232]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10d      	bne.n	800329a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	4b37      	ldr	r3, [pc, #220]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	4a36      	ldr	r2, [pc, #216]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003288:	6253      	str	r3, [r2, #36]	@ 0x24
 800328a:	4b34      	ldr	r3, [pc, #208]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003296:	2301      	movs	r3, #1
 8003298:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329a:	4b36      	ldr	r3, [pc, #216]	@ (8003374 <HAL_RCC_OscConfig+0x4ec>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d118      	bne.n	80032d8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a6:	4b33      	ldr	r3, [pc, #204]	@ (8003374 <HAL_RCC_OscConfig+0x4ec>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a32      	ldr	r2, [pc, #200]	@ (8003374 <HAL_RCC_OscConfig+0x4ec>)
 80032ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b2:	f7fe fe8d 	bl	8001fd0 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ba:	f7fe fe89 	bl	8001fd0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b64      	cmp	r3, #100	@ 0x64
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e104      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	4b29      	ldr	r3, [pc, #164]	@ (8003374 <HAL_RCC_OscConfig+0x4ec>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x466>
 80032e0:	4b1e      	ldr	r3, [pc, #120]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 80032e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e4:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 80032e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ea:	6353      	str	r3, [r2, #52]	@ 0x34
 80032ec:	e02d      	b.n	800334a <HAL_RCC_OscConfig+0x4c2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0x488>
 80032f6:	4b19      	ldr	r3, [pc, #100]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 80032f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fa:	4a18      	ldr	r2, [pc, #96]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 80032fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003300:	6353      	str	r3, [r2, #52]	@ 0x34
 8003302:	4b16      	ldr	r3, [pc, #88]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003306:	4a15      	ldr	r2, [pc, #84]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003308:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800330c:	6353      	str	r3, [r2, #52]	@ 0x34
 800330e:	e01c      	b.n	800334a <HAL_RCC_OscConfig+0x4c2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b05      	cmp	r3, #5
 8003316:	d10c      	bne.n	8003332 <HAL_RCC_OscConfig+0x4aa>
 8003318:	4b10      	ldr	r3, [pc, #64]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 800331a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331c:	4a0f      	ldr	r2, [pc, #60]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 800331e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003322:	6353      	str	r3, [r2, #52]	@ 0x34
 8003324:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003328:	4a0c      	ldr	r2, [pc, #48]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 800332a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003330:	e00b      	b.n	800334a <HAL_RCC_OscConfig+0x4c2>
 8003332:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003336:	4a09      	ldr	r2, [pc, #36]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800333c:	6353      	str	r3, [r2, #52]	@ 0x34
 800333e:	4b07      	ldr	r3, [pc, #28]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003342:	4a06      	ldr	r2, [pc, #24]	@ (800335c <HAL_RCC_OscConfig+0x4d4>)
 8003344:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003348:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d024      	beq.n	800339c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003352:	f7fe fe3d 	bl	8001fd0 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003358:	e019      	b.n	800338e <HAL_RCC_OscConfig+0x506>
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800
 8003360:	08006f20 	.word	0x08006f20
 8003364:	20000004 	.word	0x20000004
 8003368:	20000008 	.word	0x20000008
 800336c:	42470020 	.word	0x42470020
 8003370:	42470680 	.word	0x42470680
 8003374:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fe fe2a 	bl	8001fd0 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0a3      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800338e:	4b54      	ldr	r3, [pc, #336]	@ (80034e0 <HAL_RCC_OscConfig+0x658>)
 8003390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0ee      	beq.n	8003378 <HAL_RCC_OscConfig+0x4f0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339c:	f7fe fe18 	bl	8001fd0 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7fe fe14 	bl	8001fd0 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e08d      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033ba:	4b49      	ldr	r3, [pc, #292]	@ (80034e0 <HAL_RCC_OscConfig+0x658>)
 80033bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1ee      	bne.n	80033a4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033c6:	7ffb      	ldrb	r3, [r7, #31]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d105      	bne.n	80033d8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033cc:	4b44      	ldr	r3, [pc, #272]	@ (80034e0 <HAL_RCC_OscConfig+0x658>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	4a43      	ldr	r2, [pc, #268]	@ (80034e0 <HAL_RCC_OscConfig+0x658>)
 80033d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d079      	beq.n	80034d4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	d056      	beq.n	8003494 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d13b      	bne.n	8003466 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ee:	4b3d      	ldr	r3, [pc, #244]	@ (80034e4 <HAL_RCC_OscConfig+0x65c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe fdec 	bl	8001fd0 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe fde8 	bl	8001fd0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e063      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800340e:	4b34      	ldr	r3, [pc, #208]	@ (80034e0 <HAL_RCC_OscConfig+0x658>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800341a:	4b31      	ldr	r3, [pc, #196]	@ (80034e0 <HAL_RCC_OscConfig+0x658>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342a:	4319      	orrs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	430b      	orrs	r3, r1
 8003432:	492b      	ldr	r1, [pc, #172]	@ (80034e0 <HAL_RCC_OscConfig+0x658>)
 8003434:	4313      	orrs	r3, r2
 8003436:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003438:	4b2a      	ldr	r3, [pc, #168]	@ (80034e4 <HAL_RCC_OscConfig+0x65c>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fe fdc7 	bl	8001fd0 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe fdc3 	bl	8001fd0 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e03e      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003458:	4b21      	ldr	r3, [pc, #132]	@ (80034e0 <HAL_RCC_OscConfig+0x658>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x5be>
 8003464:	e036      	b.n	80034d4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b1f      	ldr	r3, [pc, #124]	@ (80034e4 <HAL_RCC_OscConfig+0x65c>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fdb0 	bl	8001fd0 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe fdac 	bl	8001fd0 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e027      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003486:	4b16      	ldr	r3, [pc, #88]	@ (80034e0 <HAL_RCC_OscConfig+0x658>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x5ec>
 8003492:	e01f      	b.n	80034d4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e01a      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034a0:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <HAL_RCC_OscConfig+0x658>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d10d      	bne.n	80034d0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d106      	bne.n	80034d0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	42470060 	.word	0x42470060

080034e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e11a      	b.n	8003732 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034fc:	4b8f      	ldr	r3, [pc, #572]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d919      	bls.n	800353e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <HAL_RCC_ClockConfig+0x34>
 8003510:	4b8a      	ldr	r3, [pc, #552]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a89      	ldr	r2, [pc, #548]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b87      	ldr	r3, [pc, #540]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 0201 	bic.w	r2, r3, #1
 8003524:	4985      	ldr	r1, [pc, #532]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	4313      	orrs	r3, r2
 800352a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352c:	4b83      	ldr	r3, [pc, #524]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d001      	beq.n	800353e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e0f9      	b.n	8003732 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354a:	4b7d      	ldr	r3, [pc, #500]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	497a      	ldr	r1, [pc, #488]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 8003558:	4313      	orrs	r3, r2
 800355a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 808e 	beq.w	8003686 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003572:	4b73      	ldr	r3, [pc, #460]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d121      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0d7      	b.n	8003732 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800358a:	4b6d      	ldr	r3, [pc, #436]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d115      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0cb      	b.n	8003732 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035a2:	4b67      	ldr	r3, [pc, #412]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0bf      	b.n	8003732 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035b2:	4b63      	ldr	r3, [pc, #396]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0b7      	b.n	8003732 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	495c      	ldr	r1, [pc, #368]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d4:	f7fe fcfc 	bl	8001fd0 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d112      	bne.n	8003608 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fe fcf4 	bl	8001fd0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e09b      	b.n	8003732 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035fa:	4b51      	ldr	r3, [pc, #324]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b08      	cmp	r3, #8
 8003604:	d1ee      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xfc>
 8003606:	e03e      	b.n	8003686 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d112      	bne.n	8003636 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003612:	f7fe fcdd 	bl	8001fd0 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e084      	b.n	8003732 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003628:	4b45      	ldr	r3, [pc, #276]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d1ee      	bne.n	8003612 <HAL_RCC_ClockConfig+0x12a>
 8003634:	e027      	b.n	8003686 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d11d      	bne.n	800367a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fe fcc6 	bl	8001fd0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e06d      	b.n	8003732 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003656:	4b3a      	ldr	r3, [pc, #232]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b04      	cmp	r3, #4
 8003660:	d1ee      	bne.n	8003640 <HAL_RCC_ClockConfig+0x158>
 8003662:	e010      	b.n	8003686 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003664:	f7fe fcb4 	bl	8001fd0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e05b      	b.n	8003732 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800367a:	4b31      	ldr	r3, [pc, #196]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1ee      	bne.n	8003664 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003686:	4b2d      	ldr	r3, [pc, #180]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d219      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x1be>
 800369a:	4b28      	ldr	r3, [pc, #160]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a27      	ldr	r2, [pc, #156]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b25      	ldr	r3, [pc, #148]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 0201 	bic.w	r2, r3, #1
 80036ae:	4923      	ldr	r1, [pc, #140]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b21      	ldr	r3, [pc, #132]	@ (800373c <HAL_RCC_ClockConfig+0x254>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e034      	b.n	8003732 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4917      	ldr	r1, [pc, #92]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f2:	4b13      	ldr	r3, [pc, #76]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490f      	ldr	r1, [pc, #60]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003706:	f000 f823 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <HAL_RCC_ClockConfig+0x258>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490b      	ldr	r1, [pc, #44]	@ (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	4a0a      	ldr	r2, [pc, #40]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 8003720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003722:	4b0a      	ldr	r3, [pc, #40]	@ (800374c <HAL_RCC_ClockConfig+0x264>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fb70 	bl	8001e0c <HAL_InitTick>
 800372c:	4603      	mov	r3, r0
 800372e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003730:	7afb      	ldrb	r3, [r7, #11]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40023c00 	.word	0x40023c00
 8003740:	40023800 	.word	0x40023800
 8003744:	08006f20 	.word	0x08006f20
 8003748:	20000004 	.word	0x20000004
 800374c:	20000008 	.word	0x20000008

08003750 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003754:	b08e      	sub	sp, #56	@ 0x38
 8003756:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003758:	4b58      	ldr	r3, [pc, #352]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x16c>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800375e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b0c      	cmp	r3, #12
 8003766:	d00d      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x34>
 8003768:	2b0c      	cmp	r3, #12
 800376a:	f200 8092 	bhi.w	8003892 <HAL_RCC_GetSysClockFreq+0x142>
 800376e:	2b04      	cmp	r3, #4
 8003770:	d002      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x28>
 8003772:	2b08      	cmp	r3, #8
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x2e>
 8003776:	e08c      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b51      	ldr	r3, [pc, #324]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x170>)
 800377a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800377c:	e097      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800377e:	4b51      	ldr	r3, [pc, #324]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x174>)
 8003780:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003782:	e094      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003786:	0c9b      	lsrs	r3, r3, #18
 8003788:	f003 020f 	and.w	r2, r3, #15
 800378c:	4b4e      	ldr	r3, [pc, #312]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x178>)
 800378e:	5c9b      	ldrb	r3, [r3, r2]
 8003790:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003794:	0d9b      	lsrs	r3, r3, #22
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	3301      	adds	r3, #1
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379e:	4b47      	ldr	r3, [pc, #284]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x16c>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d021      	beq.n	80037ee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ac:	2200      	movs	r2, #0
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	61fa      	str	r2, [r7, #28]
 80037b2:	4b44      	ldr	r3, [pc, #272]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x174>)
 80037b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80037b8:	464a      	mov	r2, r9
 80037ba:	fb03 f202 	mul.w	r2, r3, r2
 80037be:	2300      	movs	r3, #0
 80037c0:	4644      	mov	r4, r8
 80037c2:	fb04 f303 	mul.w	r3, r4, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	4a3e      	ldr	r2, [pc, #248]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x174>)
 80037ca:	4644      	mov	r4, r8
 80037cc:	fba4 0102 	umull	r0, r1, r4, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	4619      	mov	r1, r3
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	2200      	movs	r2, #0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	617a      	str	r2, [r7, #20]
 80037dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037e0:	f7fc ffd0 	bl	8000784 <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4613      	mov	r3, r2
 80037ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ec:	e04e      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f0:	2200      	movs	r2, #0
 80037f2:	469a      	mov	sl, r3
 80037f4:	4693      	mov	fp, r2
 80037f6:	4652      	mov	r2, sl
 80037f8:	465b      	mov	r3, fp
 80037fa:	f04f 0000 	mov.w	r0, #0
 80037fe:	f04f 0100 	mov.w	r1, #0
 8003802:	0159      	lsls	r1, r3, #5
 8003804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003808:	0150      	lsls	r0, r2, #5
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	ebb2 080a 	subs.w	r8, r2, sl
 8003812:	eb63 090b 	sbc.w	r9, r3, fp
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003822:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003826:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800382a:	ebb2 0408 	subs.w	r4, r2, r8
 800382e:	eb63 0509 	sbc.w	r5, r3, r9
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	00eb      	lsls	r3, r5, #3
 800383c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003840:	00e2      	lsls	r2, r4, #3
 8003842:	4614      	mov	r4, r2
 8003844:	461d      	mov	r5, r3
 8003846:	eb14 030a 	adds.w	r3, r4, sl
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	eb45 030b 	adc.w	r3, r5, fp
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800385e:	4629      	mov	r1, r5
 8003860:	028b      	lsls	r3, r1, #10
 8003862:	4620      	mov	r0, r4
 8003864:	4629      	mov	r1, r5
 8003866:	4604      	mov	r4, r0
 8003868:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800386c:	4601      	mov	r1, r0
 800386e:	028a      	lsls	r2, r1, #10
 8003870:	4610      	mov	r0, r2
 8003872:	4619      	mov	r1, r3
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	2200      	movs	r2, #0
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	60fa      	str	r2, [r7, #12]
 800387c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003880:	f7fc ff80 	bl	8000784 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 800388c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003890:	e00d      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003892:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x16c>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	0b5b      	lsrs	r3, r3, #13
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	3301      	adds	r3, #1
 80038a2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80038ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3738      	adds	r7, #56	@ 0x38
 80038b4:	46bd      	mov	sp, r7
 80038b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	00f42400 	.word	0x00f42400
 80038c4:	016e3600 	.word	0x016e3600
 80038c8:	08006f14 	.word	0x08006f14

080038cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d0:	4b02      	ldr	r3, [pc, #8]	@ (80038dc <HAL_RCC_GetHCLKFreq+0x10>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	20000004 	.word	0x20000004

080038e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038e4:	f7ff fff2 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b05      	ldr	r3, [pc, #20]	@ (8003900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0a1b      	lsrs	r3, r3, #8
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4903      	ldr	r1, [pc, #12]	@ (8003904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800
 8003904:	08006f30 	.word	0x08006f30

08003908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800390c:	f7ff ffde 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	0adb      	lsrs	r3, r3, #11
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4903      	ldr	r1, [pc, #12]	@ (800392c <HAL_RCC_GetPCLK2Freq+0x24>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	08006f30 	.word	0x08006f30

08003930 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	220f      	movs	r2, #15
 800393e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003940:	4b11      	ldr	r3, [pc, #68]	@ (8003988 <HAL_RCC_GetClockConfig+0x58>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0203 	and.w	r2, r3, #3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800394c:	4b0e      	ldr	r3, [pc, #56]	@ (8003988 <HAL_RCC_GetClockConfig+0x58>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <HAL_RCC_GetClockConfig+0x58>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003964:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <HAL_RCC_GetClockConfig+0x58>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	08db      	lsrs	r3, r3, #3
 800396a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCC_GetClockConfig+0x5c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0201 	and.w	r2, r3, #1
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	601a      	str	r2, [r3, #0]
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	40023800 	.word	0x40023800
 800398c:	40023c00 	.word	0x40023c00

08003990 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800399c:	4b29      	ldr	r3, [pc, #164]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d12c      	bne.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039a8:	4b26      	ldr	r3, [pc, #152]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80039b4:	4b24      	ldr	r3, [pc, #144]	@ (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	e016      	b.n	80039ee <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c0:	4b20      	ldr	r3, [pc, #128]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6253      	str	r3, [r2, #36]	@ 0x24
 80039cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80039d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80039e0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e2:	4b18      	ldr	r3, [pc, #96]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	4a17      	ldr	r2, [pc, #92]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ec:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80039f4:	d105      	bne.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80039fc:	d101      	bne.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80039fe:	2301      	movs	r3, #1
 8003a00:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003a08:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a0e:	f043 0304 	orr.w	r3, r3, #4
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 0201 	bic.w	r2, r3, #1
 8003a1c:	490b      	ldr	r1, [pc, #44]	@ (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a24:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d001      	beq.n	8003a36 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	40023c00 	.word	0x40023c00

08003a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e031      	b.n	8003ac6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f829 	bl	8003ace <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f000 f972 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d001      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e03a      	b.n	8003b6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b18:	d00e      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x58>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a16      	ldr	r2, [pc, #88]	@ (8003b78 <HAL_TIM_Base_Start_IT+0x98>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x58>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <HAL_TIM_Base_Start_IT+0x9c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x58>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a13      	ldr	r2, [pc, #76]	@ (8003b80 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d111      	bne.n	8003b5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d010      	beq.n	8003b6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5a:	e007      	b.n	8003b6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800
 8003b80:	40010800 	.word	0x40010800

08003b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d020      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01b      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0202 	mvn.w	r2, #2
 8003bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8b6 	bl	8003d40 <HAL_TIM_IC_CaptureCallback>
 8003bd4:	e005      	b.n	8003be2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8a9 	bl	8003d2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f8b8 	bl	8003d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d020      	beq.n	8003c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01b      	beq.n	8003c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0204 	mvn.w	r2, #4
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f890 	bl	8003d40 <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f883 	bl	8003d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f892 	bl	8003d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d020      	beq.n	8003c80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01b      	beq.n	8003c80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0208 	mvn.w	r2, #8
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2204      	movs	r2, #4
 8003c56:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f86a 	bl	8003d40 <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f85d 	bl	8003d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f86c 	bl	8003d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d020      	beq.n	8003ccc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01b      	beq.n	8003ccc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0210 	mvn.w	r2, #16
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f844 	bl	8003d40 <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f837 	bl	8003d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f846 	bl	8003d52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00c      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0201 	mvn.w	r2, #1
 8003ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f816 	bl	8003d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00c      	beq.n	8003d14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f828 	bl	8003d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d14:	bf00      	nop
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
	...

08003d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d8e:	d00f      	beq.n	8003db0 <TIM_Base_SetConfig+0x38>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a2e      	ldr	r2, [pc, #184]	@ (8003e4c <TIM_Base_SetConfig+0xd4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <TIM_Base_SetConfig+0x38>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e50 <TIM_Base_SetConfig+0xd8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_Base_SetConfig+0x38>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a2c      	ldr	r2, [pc, #176]	@ (8003e54 <TIM_Base_SetConfig+0xdc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_Base_SetConfig+0x38>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a2b      	ldr	r2, [pc, #172]	@ (8003e58 <TIM_Base_SetConfig+0xe0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d108      	bne.n	8003dc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc8:	d017      	beq.n	8003dfa <TIM_Base_SetConfig+0x82>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e4c <TIM_Base_SetConfig+0xd4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <TIM_Base_SetConfig+0x82>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e50 <TIM_Base_SetConfig+0xd8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00f      	beq.n	8003dfa <TIM_Base_SetConfig+0x82>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e54 <TIM_Base_SetConfig+0xdc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_Base_SetConfig+0x82>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e58 <TIM_Base_SetConfig+0xe0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_Base_SetConfig+0x82>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a1b      	ldr	r2, [pc, #108]	@ (8003e5c <TIM_Base_SetConfig+0xe4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_Base_SetConfig+0x82>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e60 <TIM_Base_SetConfig+0xe8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d108      	bne.n	8003e0c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f043 0204 	orr.w	r2, r3, #4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40010800 	.word	0x40010800
 8003e5c:	40010c00 	.word	0x40010c00
 8003e60:	40011000 	.word	0x40011000

08003e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e042      	b.n	8003efc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd ff7a 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2224      	movs	r2, #36	@ 0x24
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fa09 	bl	80042c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695a      	ldr	r2, [r3, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	@ 0x28
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d175      	bne.n	8004010 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_UART_Transmit+0x2c>
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e06e      	b.n	8004012 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2221      	movs	r2, #33	@ 0x21
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f42:	f7fe f845 	bl	8001fd0 <HAL_GetTick>
 8003f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	88fa      	ldrh	r2, [r7, #6]
 8003f4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	88fa      	ldrh	r2, [r7, #6]
 8003f52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f5c:	d108      	bne.n	8003f70 <HAL_UART_Transmit+0x6c>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e003      	b.n	8003f78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f78:	e02e      	b.n	8003fd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2180      	movs	r1, #128	@ 0x80
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f8df 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e03a      	b.n	8004012 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	e007      	b.n	8003fca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	781a      	ldrb	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1cb      	bne.n	8003f7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2140      	movs	r1, #64	@ 0x40
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f8ab 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e006      	b.n	8004012 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b08a      	sub	sp, #40	@ 0x28
 800401e:	af02      	add	r7, sp, #8
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	4613      	mov	r3, r2
 8004028:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b20      	cmp	r3, #32
 8004038:	f040 8081 	bne.w	800413e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_UART_Receive+0x2e>
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e079      	b.n	8004140 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2222      	movs	r2, #34	@ 0x22
 8004056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004060:	f7fd ffb6 	bl	8001fd0 <HAL_GetTick>
 8004064:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800407a:	d108      	bne.n	800408e <HAL_UART_Receive+0x74>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61bb      	str	r3, [r7, #24]
 800408c:	e003      	b.n	8004096 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004096:	e047      	b.n	8004128 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2200      	movs	r2, #0
 80040a0:	2120      	movs	r1, #32
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f850 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e042      	b.n	8004140 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10c      	bne.n	80040da <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	3302      	adds	r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e01f      	b.n	800411a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e2:	d007      	beq.n	80040f4 <HAL_UART_Receive+0xda>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_UART_Receive+0xe8>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d106      	bne.n	8004102 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e008      	b.n	8004114 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800410e:	b2da      	uxtb	r2, r3
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	3301      	adds	r3, #1
 8004118:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1b2      	bne.n	8004098 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004158:	e03b      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d037      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7fd ff35 	bl	8001fd0 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	6a3a      	ldr	r2, [r7, #32]
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <UART_WaitOnFlagUntilTimeout+0x30>
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e03a      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d023      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b80      	cmp	r3, #128	@ 0x80
 800418e:	d020      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b40      	cmp	r3, #64	@ 0x40
 8004194:	d01d      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d116      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f81d 	bl	80041fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2208      	movs	r2, #8
 80041c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e00f      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	429a      	cmp	r2, r3
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d0b4      	beq.n	800415a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b095      	sub	sp, #84	@ 0x54
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004222:	643a      	str	r2, [r7, #64]	@ 0x40
 8004224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004228:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3314      	adds	r3, #20
 800423c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	61fb      	str	r3, [r7, #28]
   return(result);
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004258:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800425c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426e:	2b01      	cmp	r3, #1
 8004270:	d119      	bne.n	80042a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	60bb      	str	r3, [r7, #8]
   return(result);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f023 0310 	bic.w	r3, r3, #16
 8004288:	647b      	str	r3, [r7, #68]	@ 0x44
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004292:	61ba      	str	r2, [r7, #24]
 8004294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6979      	ldr	r1, [r7, #20]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	613b      	str	r3, [r7, #16]
   return(result);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e5      	bne.n	8004272 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042b4:	bf00      	nop
 80042b6:	3754      	adds	r7, #84	@ 0x54
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
	...

080042c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004300:	f023 030c 	bic.w	r3, r3, #12
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	430b      	orrs	r3, r1
 800430c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699a      	ldr	r2, [r3, #24]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a55      	ldr	r2, [pc, #340]	@ (8004480 <UART_SetConfig+0x1c0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d103      	bne.n	8004336 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800432e:	f7ff faeb 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	e002      	b.n	800433c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004336:	f7ff fad3 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 800433a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004344:	d14c      	bne.n	80043e0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009a      	lsls	r2, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	4a49      	ldr	r2, [pc, #292]	@ (8004484 <UART_SetConfig+0x1c4>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	0119      	lsls	r1, r3, #4
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009a      	lsls	r2, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	fbb2 f2f3 	udiv	r2, r2, r3
 800437c:	4b41      	ldr	r3, [pc, #260]	@ (8004484 <UART_SetConfig+0x1c4>)
 800437e:	fba3 0302 	umull	r0, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2064      	movs	r0, #100	@ 0x64
 8004386:	fb00 f303 	mul.w	r3, r0, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	3332      	adds	r3, #50	@ 0x32
 8004390:	4a3c      	ldr	r2, [pc, #240]	@ (8004484 <UART_SetConfig+0x1c4>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800439e:	4419      	add	r1, r3
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	009a      	lsls	r2, r3, #2
 80043aa:	441a      	add	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b6:	4b33      	ldr	r3, [pc, #204]	@ (8004484 <UART_SetConfig+0x1c4>)
 80043b8:	fba3 0302 	umull	r0, r3, r3, r2
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	2064      	movs	r0, #100	@ 0x64
 80043c0:	fb00 f303 	mul.w	r3, r0, r3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	3332      	adds	r3, #50	@ 0x32
 80043ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004484 <UART_SetConfig+0x1c4>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	f003 0207 	and.w	r2, r3, #7
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	440a      	add	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043de:	e04a      	b.n	8004476 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009a      	lsls	r2, r3, #2
 80043ea:	441a      	add	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	4a23      	ldr	r2, [pc, #140]	@ (8004484 <UART_SetConfig+0x1c4>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	0119      	lsls	r1, r3, #4
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009a      	lsls	r2, r3, #2
 800440a:	441a      	add	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	fbb2 f2f3 	udiv	r2, r2, r3
 8004416:	4b1b      	ldr	r3, [pc, #108]	@ (8004484 <UART_SetConfig+0x1c4>)
 8004418:	fba3 0302 	umull	r0, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	2064      	movs	r0, #100	@ 0x64
 8004420:	fb00 f303 	mul.w	r3, r0, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	3332      	adds	r3, #50	@ 0x32
 800442a:	4a16      	ldr	r2, [pc, #88]	@ (8004484 <UART_SetConfig+0x1c4>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004436:	4419      	add	r1, r3
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	009a      	lsls	r2, r3, #2
 8004442:	441a      	add	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	fbb2 f2f3 	udiv	r2, r2, r3
 800444e:	4b0d      	ldr	r3, [pc, #52]	@ (8004484 <UART_SetConfig+0x1c4>)
 8004450:	fba3 0302 	umull	r0, r3, r3, r2
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	2064      	movs	r0, #100	@ 0x64
 8004458:	fb00 f303 	mul.w	r3, r0, r3
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	3332      	adds	r3, #50	@ 0x32
 8004462:	4a08      	ldr	r2, [pc, #32]	@ (8004484 <UART_SetConfig+0x1c4>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	f003 020f 	and.w	r2, r3, #15
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	440a      	add	r2, r1
 8004474:	609a      	str	r2, [r3, #8]
}
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40013800 	.word	0x40013800
 8004484:	51eb851f 	.word	0x51eb851f

08004488 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800449a:	2b84      	cmp	r3, #132	@ 0x84
 800449c:	d005      	beq.n	80044aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800449e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4413      	add	r3, r2
 80044a6:	3303      	adds	r3, #3
 80044a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044aa:	68fb      	ldr	r3, [r7, #12]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044bc:	f3ef 8305 	mrs	r3, IPSR
 80044c0:	607b      	str	r3, [r7, #4]
  return(result);
 80044c2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044dc:	f001 f952 	bl	8005784 <vTaskStartScheduler>
  
  return osOK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e8:	b089      	sub	sp, #36	@ 0x24
 80044ea:	af04      	add	r7, sp, #16
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <osThreadCreate+0x54>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01c      	beq.n	800453a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685c      	ldr	r4, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691e      	ldr	r6, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ffb8 	bl	8004488 <makeFreeRtosPriority>
 8004518:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004522:	9202      	str	r2, [sp, #8]
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	9100      	str	r1, [sp, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	4632      	mov	r2, r6
 800452c:	4629      	mov	r1, r5
 800452e:	4620      	mov	r0, r4
 8004530:	f000 ff63 	bl	80053fa <xTaskCreateStatic>
 8004534:	4603      	mov	r3, r0
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e01c      	b.n	8004574 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685c      	ldr	r4, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004546:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff ff9a 	bl	8004488 <makeFreeRtosPriority>
 8004554:	4602      	mov	r2, r0
 8004556:	f107 030c 	add.w	r3, r7, #12
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	9200      	str	r2, [sp, #0]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	4632      	mov	r2, r6
 8004562:	4629      	mov	r1, r5
 8004564:	4620      	mov	r0, r4
 8004566:	f000 ffa7 	bl	80054b8 <xTaskCreate>
 800456a:	4603      	mov	r3, r0
 800456c:	2b01      	cmp	r3, #1
 800456e:	d001      	beq.n	8004574 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	e000      	b.n	8004576 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004574:	68fb      	ldr	r3, [r7, #12]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800457e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <osDelay+0x16>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	e000      	b.n	8004596 <osDelay+0x18>
 8004594:	2301      	movs	r3, #1
 8004596:	4618      	mov	r0, r3
 8004598:	f001 f8be 	bl	8005718 <vTaskDelay>
  
  return osOK;
 800459c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4619      	mov	r1, r3
 80045bc:	2001      	movs	r0, #1
 80045be:	f000 fab5 	bl	8004b2c <xQueueCreateMutexStatic>
 80045c2:	4603      	mov	r3, r0
 80045c4:	e003      	b.n	80045ce <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80045c6:	2001      	movs	r0, #1
 80045c8:	f000 fa98 	bl	8004afc <xQueueCreateMutex>
 80045cc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <osMutexWait+0x18>
    return osErrorParameter;
 80045ec:	2380      	movs	r3, #128	@ 0x80
 80045ee:	e03a      	b.n	8004666 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d103      	bne.n	8004604 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80045fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e009      	b.n	8004618 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d006      	beq.n	8004618 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <osMutexWait+0x40>
      ticks = 1;
 8004614:	2301      	movs	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004618:	f7ff ff4d 	bl	80044b6 <inHandlerMode>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d017      	beq.n	8004652 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004622:	f107 0308 	add.w	r3, r7, #8
 8004626:	461a      	mov	r2, r3
 8004628:	2100      	movs	r1, #0
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fd3c 	bl	80050a8 <xQueueReceiveFromISR>
 8004630:	4603      	mov	r3, r0
 8004632:	2b01      	cmp	r3, #1
 8004634:	d001      	beq.n	800463a <osMutexWait+0x62>
      return osErrorOS;
 8004636:	23ff      	movs	r3, #255	@ 0xff
 8004638:	e015      	b.n	8004666 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d011      	beq.n	8004664 <osMutexWait+0x8c>
 8004640:	4b0b      	ldr	r3, [pc, #44]	@ (8004670 <osMutexWait+0x98>)
 8004642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	e008      	b.n	8004664 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fc17 	bl	8004e88 <xQueueSemaphoreTake>
 800465a:	4603      	mov	r3, r0
 800465c:	2b01      	cmp	r3, #1
 800465e:	d001      	beq.n	8004664 <osMutexWait+0x8c>
    return osErrorOS;
 8004660:	23ff      	movs	r3, #255	@ 0xff
 8004662:	e000      	b.n	8004666 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004680:	2300      	movs	r3, #0
 8004682:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004684:	f7ff ff17 	bl	80044b6 <inHandlerMode>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800468e:	f107 0308 	add.w	r3, r7, #8
 8004692:	4619      	mov	r1, r3
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fb67 	bl	8004d68 <xQueueGiveFromISR>
 800469a:	4603      	mov	r3, r0
 800469c:	2b01      	cmp	r3, #1
 800469e:	d001      	beq.n	80046a4 <osMutexRelease+0x30>
      return osErrorOS;
 80046a0:	23ff      	movs	r3, #255	@ 0xff
 80046a2:	e017      	b.n	80046d4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d013      	beq.n	80046d2 <osMutexRelease+0x5e>
 80046aa:	4b0c      	ldr	r3, [pc, #48]	@ (80046dc <osMutexRelease+0x68>)
 80046ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	e00a      	b.n	80046d2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80046bc:	2300      	movs	r3, #0
 80046be:	2200      	movs	r2, #0
 80046c0:	2100      	movs	r1, #0
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fa4e 	bl	8004b64 <xQueueGenericSend>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d001      	beq.n	80046d2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80046ce:	23ff      	movs	r3, #255	@ 0xff
 80046d0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80046d2:	68fb      	ldr	r3, [r7, #12]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f103 0208 	add.w	r2, r3, #8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f04f 32ff 	mov.w	r2, #4294967295
 80046f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f103 0208 	add.w	r2, r3, #8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f103 0208 	add.w	r2, r3, #8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr

0800471e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	601a      	str	r2, [r3, #0]
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d103      	bne.n	800479c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e00c      	b.n	80047b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3308      	adds	r3, #8
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	e002      	b.n	80047aa <vListInsert+0x2e>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d2f6      	bcs.n	80047a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	601a      	str	r2, [r3, #0]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6892      	ldr	r2, [r2, #8]
 8004802:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6852      	ldr	r2, [r2, #4]
 800480c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	d103      	bne.n	8004820 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	1e5a      	subs	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr
	...

08004840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10b      	bne.n	800486c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004866:	bf00      	nop
 8004868:	bf00      	nop
 800486a:	e7fd      	b.n	8004868 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800486c:	f001 fed6 	bl	800661c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004878:	68f9      	ldr	r1, [r7, #12]
 800487a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	441a      	add	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489c:	3b01      	subs	r3, #1
 800489e:	68f9      	ldr	r1, [r7, #12]
 80048a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	441a      	add	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	22ff      	movs	r2, #255	@ 0xff
 80048b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	22ff      	movs	r2, #255	@ 0xff
 80048b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d114      	bne.n	80048ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01a      	beq.n	8004900 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3310      	adds	r3, #16
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 f9a6 	bl	8005c20 <xTaskRemoveFromEventList>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d012      	beq.n	8004900 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <xQueueGenericReset+0xd0>)
 80048dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	e009      	b.n	8004900 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3310      	adds	r3, #16
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff fef5 	bl	80046e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3324      	adds	r3, #36	@ 0x24
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fef0 	bl	80046e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004900:	f001 febc 	bl	800667c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004904:	2301      	movs	r3, #1
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08e      	sub	sp, #56	@ 0x38
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	e7fd      	b.n	800493c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10b      	bne.n	800495e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	e7fd      	b.n	800495a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <xQueueGenericCreateStatic+0x56>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <xQueueGenericCreateStatic+0x5a>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <xQueueGenericCreateStatic+0x5c>
 800496e:	2300      	movs	r3, #0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	623b      	str	r3, [r7, #32]
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <xQueueGenericCreateStatic+0x84>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <xQueueGenericCreateStatic+0x88>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <xQueueGenericCreateStatic+0x8a>
 800499c:	2300      	movs	r3, #0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10b      	bne.n	80049ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	61fb      	str	r3, [r7, #28]
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	e7fd      	b.n	80049b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049ba:	2348      	movs	r3, #72	@ 0x48
 80049bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2b48      	cmp	r3, #72	@ 0x48
 80049c2:	d00b      	beq.n	80049dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	61bb      	str	r3, [r7, #24]
}
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80049e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00d      	beq.n	8004a02 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049ee:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80049f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	4613      	mov	r3, r2
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f844 	bl	8004a8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3730      	adds	r7, #48	@ 0x30
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	@ 0x28
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	4613      	mov	r3, r2
 8004a18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	613b      	str	r3, [r7, #16]
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	e004      	b.n	8004a4e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	3348      	adds	r3, #72	@ 0x48
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 fee4 	bl	8006820 <pvPortMalloc>
 8004a58:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00f      	beq.n	8004a80 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	3348      	adds	r3, #72	@ 0x48
 8004a64:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a6e:	79fa      	ldrb	r2, [r7, #7]
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4613      	mov	r3, r2
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f805 	bl	8004a8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a80:	69bb      	ldr	r3, [r7, #24]
	}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e002      	b.n	8004aac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ab8:	2101      	movs	r1, #1
 8004aba:	69b8      	ldr	r0, [r7, #24]
 8004abc:	f7ff fec0 	bl	8004840 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00e      	beq.n	8004af4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f838 	bl	8004b64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b06:	2301      	movs	r3, #1
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	461a      	mov	r2, r3
 8004b12:	6939      	ldr	r1, [r7, #16]
 8004b14:	6978      	ldr	r0, [r7, #20]
 8004b16:	f7ff ff79 	bl	8004a0c <xQueueGenericCreate>
 8004b1a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff ffd3 	bl	8004ac8 <prvInitialiseMutex>

		return pxNewQueue;
 8004b22:	68fb      	ldr	r3, [r7, #12]
	}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	4603      	mov	r3, r0
 8004b34:	6039      	str	r1, [r7, #0]
 8004b36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2200      	movs	r2, #0
 8004b48:	6939      	ldr	r1, [r7, #16]
 8004b4a:	6978      	ldr	r0, [r7, #20]
 8004b4c:	f7ff fee2 	bl	8004914 <xQueueGenericCreateStatic>
 8004b50:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff ffb8 	bl	8004ac8 <prvInitialiseMutex>

		return pxNewQueue;
 8004b58:	68fb      	ldr	r3, [r7, #12]
	}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08e      	sub	sp, #56	@ 0x38
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b72:	2300      	movs	r3, #0
 8004b74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <xQueueGenericSend+0x34>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d103      	bne.n	8004ba6 <xQueueGenericSend+0x42>
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <xQueueGenericSend+0x46>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <xQueueGenericSend+0x48>
 8004baa:	2300      	movs	r3, #0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10b      	bne.n	8004bc8 <xQueueGenericSend+0x64>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	e7fd      	b.n	8004bc4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d103      	bne.n	8004bd6 <xQueueGenericSend+0x72>
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <xQueueGenericSend+0x76>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <xQueueGenericSend+0x78>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10b      	bne.n	8004bf8 <xQueueGenericSend+0x94>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	623b      	str	r3, [r7, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	bf00      	nop
 8004bf6:	e7fd      	b.n	8004bf4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bf8:	f001 f9d6 	bl	8005fa8 <xTaskGetSchedulerState>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <xQueueGenericSend+0xa4>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <xQueueGenericSend+0xa8>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <xQueueGenericSend+0xaa>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10b      	bne.n	8004c2a <xQueueGenericSend+0xc6>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	61fb      	str	r3, [r7, #28]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c2a:	f001 fcf7 	bl	800661c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <xQueueGenericSend+0xdc>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d129      	bne.n	8004c94 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c46:	f000 fac8 	bl	80051da <prvCopyDataToQueue>
 8004c4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d010      	beq.n	8004c76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c56:	3324      	adds	r3, #36	@ 0x24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 ffe1 	bl	8005c20 <xTaskRemoveFromEventList>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c64:	4b3f      	ldr	r3, [pc, #252]	@ (8004d64 <xQueueGenericSend+0x200>)
 8004c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	e00a      	b.n	8004c8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c7c:	4b39      	ldr	r3, [pc, #228]	@ (8004d64 <xQueueGenericSend+0x200>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c8c:	f001 fcf6 	bl	800667c <vPortExitCritical>
				return pdPASS;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e063      	b.n	8004d5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c9a:	f001 fcef 	bl	800667c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e05c      	b.n	8004d5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	4618      	mov	r0, r3
 8004cae:	f001 f81b 	bl	8005ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cb6:	f001 fce1 	bl	800667c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cba:	f000 fdc5 	bl	8005848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cbe:	f001 fcad 	bl	800661c <vPortEnterCritical>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cc8:	b25b      	sxtb	r3, r3
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d103      	bne.n	8004cd8 <xQueueGenericSend+0x174>
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cde:	b25b      	sxtb	r3, r3
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d103      	bne.n	8004cee <xQueueGenericSend+0x18a>
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cee:	f001 fcc5 	bl	800667c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cf2:	1d3a      	adds	r2, r7, #4
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 f80a 	bl	8005d14 <xTaskCheckForTimeOut>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d124      	bne.n	8004d50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d08:	f000 fb5f 	bl	80053ca <prvIsQueueFull>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d018      	beq.n	8004d44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	3310      	adds	r3, #16
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 ff5a 	bl	8005bd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d22:	f000 faea 	bl	80052fa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d26:	f000 fd9d 	bl	8005864 <xTaskResumeAll>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f47f af7c 	bne.w	8004c2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d32:	4b0c      	ldr	r3, [pc, #48]	@ (8004d64 <xQueueGenericSend+0x200>)
 8004d34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	e772      	b.n	8004c2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d46:	f000 fad8 	bl	80052fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d4a:	f000 fd8b 	bl	8005864 <xTaskResumeAll>
 8004d4e:	e76c      	b.n	8004c2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d52:	f000 fad2 	bl	80052fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d56:	f000 fd85 	bl	8005864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d5a:	2300      	movs	r3, #0
		}
	}
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3738      	adds	r7, #56	@ 0x38
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	e000ed04 	.word	0xe000ed04

08004d68 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08e      	sub	sp, #56	@ 0x38
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	623b      	str	r3, [r7, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
 8004d92:	e7fd      	b.n	8004d90 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00b      	beq.n	8004db4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	61fb      	str	r3, [r7, #28]
}
 8004dae:	bf00      	nop
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <xQueueGiveFromISR+0x5c>
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <xQueueGiveFromISR+0x60>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <xQueueGiveFromISR+0x62>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10b      	bne.n	8004de6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	61bb      	str	r3, [r7, #24]
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	e7fd      	b.n	8004de2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004de6:	f001 fcdb 	bl	80067a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dea:	f3ef 8211 	mrs	r2, BASEPRI
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	617a      	str	r2, [r7, #20]
 8004e00:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d22b      	bcs.n	8004e6e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d112      	bne.n	8004e58 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3c:	3324      	adds	r3, #36	@ 0x24
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 feee 	bl	8005c20 <xTaskRemoveFromEventList>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00e      	beq.n	8004e68 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00b      	beq.n	8004e68 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	e007      	b.n	8004e68 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	b25a      	sxtb	r2, r3
 8004e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e6c:	e001      	b.n	8004e72 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e74:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3738      	adds	r7, #56	@ 0x38
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08e      	sub	sp, #56	@ 0x38
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10b      	bne.n	8004ebc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	623b      	str	r3, [r7, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	bf00      	nop
 8004eba:	e7fd      	b.n	8004eb8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00b      	beq.n	8004edc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	61fb      	str	r3, [r7, #28]
}
 8004ed6:	bf00      	nop
 8004ed8:	bf00      	nop
 8004eda:	e7fd      	b.n	8004ed8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004edc:	f001 f864 	bl	8005fa8 <xTaskGetSchedulerState>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <xQueueSemaphoreTake+0x64>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <xQueueSemaphoreTake+0x68>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <xQueueSemaphoreTake+0x6a>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10b      	bne.n	8004f0e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	61bb      	str	r3, [r7, #24]
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	e7fd      	b.n	8004f0a <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f0e:	f001 fb85 	bl	800661c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f16:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d024      	beq.n	8004f68 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	1e5a      	subs	r2, r3, #1
 8004f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f24:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004f2e:	f001 fa09 	bl	8006344 <pvTaskIncrementMutexHeldCount>
 8004f32:	4602      	mov	r2, r0
 8004f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f36:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00f      	beq.n	8004f60 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f42:	3310      	adds	r3, #16
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fe6b 	bl	8005c20 <xTaskRemoveFromEventList>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f50:	4b54      	ldr	r3, [pc, #336]	@ (80050a4 <xQueueSemaphoreTake+0x21c>)
 8004f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f60:	f001 fb8c 	bl	800667c <vPortExitCritical>
				return pdPASS;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e098      	b.n	800509a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d112      	bne.n	8004f94 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00b      	beq.n	8004f8c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	617b      	str	r3, [r7, #20]
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f8c:	f001 fb76 	bl	800667c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e082      	b.n	800509a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f9a:	f107 030c 	add.w	r3, r7, #12
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fea2 	bl	8005ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fa8:	f001 fb68 	bl	800667c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fac:	f000 fc4c 	bl	8005848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fb0:	f001 fb34 	bl	800661c <vPortEnterCritical>
 8004fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fba:	b25b      	sxtb	r3, r3
 8004fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc0:	d103      	bne.n	8004fca <xQueueSemaphoreTake+0x142>
 8004fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fd0:	b25b      	sxtb	r3, r3
 8004fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd6:	d103      	bne.n	8004fe0 <xQueueSemaphoreTake+0x158>
 8004fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fe0:	f001 fb4c 	bl	800667c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fe4:	463a      	mov	r2, r7
 8004fe6:	f107 030c 	add.w	r3, r7, #12
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fe91 	bl	8005d14 <xTaskCheckForTimeOut>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d132      	bne.n	800505e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ff8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ffa:	f000 f9d0 	bl	800539e <prvIsQueueEmpty>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d026      	beq.n	8005052 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800500c:	f001 fb06 	bl	800661c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	4618      	mov	r0, r3
 8005016:	f000 ffe5 	bl	8005fe4 <xTaskPriorityInherit>
 800501a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800501c:	f001 fb2e 	bl	800667c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005022:	3324      	adds	r3, #36	@ 0x24
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	4611      	mov	r1, r2
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fdd3 	bl	8005bd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800502e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005030:	f000 f963 	bl	80052fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005034:	f000 fc16 	bl	8005864 <xTaskResumeAll>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	f47f af67 	bne.w	8004f0e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005040:	4b18      	ldr	r3, [pc, #96]	@ (80050a4 <xQueueSemaphoreTake+0x21c>)
 8005042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	e75d      	b.n	8004f0e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005052:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005054:	f000 f951 	bl	80052fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005058:	f000 fc04 	bl	8005864 <xTaskResumeAll>
 800505c:	e757      	b.n	8004f0e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800505e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005060:	f000 f94b 	bl	80052fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005064:	f000 fbfe 	bl	8005864 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005068:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800506a:	f000 f998 	bl	800539e <prvIsQueueEmpty>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	f43f af4c 	beq.w	8004f0e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800507c:	f001 face 	bl	800661c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005080:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005082:	f000 f893 	bl	80051ac <prvGetDisinheritPriorityAfterTimeout>
 8005086:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800508e:	4618      	mov	r0, r3
 8005090:	f001 f8b6 	bl	8006200 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005094:	f001 faf2 	bl	800667c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005098:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800509a:	4618      	mov	r0, r3
 800509c:	3738      	adds	r7, #56	@ 0x38
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	e000ed04 	.word	0xe000ed04

080050a8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08e      	sub	sp, #56	@ 0x38
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10b      	bne.n	80050d6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	623b      	str	r3, [r7, #32]
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	e7fd      	b.n	80050d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d103      	bne.n	80050e4 <xQueueReceiveFromISR+0x3c>
 80050dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <xQueueReceiveFromISR+0x40>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <xQueueReceiveFromISR+0x42>
 80050e8:	2300      	movs	r3, #0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	61fb      	str	r3, [r7, #28]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005106:	f001 fb4b 	bl	80067a0 <vPortValidateInterruptPriority>
	__asm volatile
 800510a:	f3ef 8211 	mrs	r2, BASEPRI
 800510e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	61ba      	str	r2, [r7, #24]
 8005120:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005122:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	2b00      	cmp	r3, #0
 8005130:	d02f      	beq.n	8005192 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005140:	f000 f8b5 	bl	80052ae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005146:	1e5a      	subs	r2, r3, #1
 8005148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800514c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d112      	bne.n	800517c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d016      	beq.n	800518c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	3310      	adds	r3, #16
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fd5c 	bl	8005c20 <xTaskRemoveFromEventList>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00e      	beq.n	800518c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e007      	b.n	800518c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800517c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005180:	3301      	adds	r3, #1
 8005182:	b2db      	uxtb	r3, r3
 8005184:	b25a      	sxtb	r2, r3
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800518c:	2301      	movs	r3, #1
 800518e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005190:	e001      	b.n	8005196 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005192:	2300      	movs	r3, #0
 8005194:	637b      	str	r3, [r7, #52]	@ 0x34
 8005196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005198:	613b      	str	r3, [r7, #16]
	__asm volatile
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f383 8811 	msr	BASEPRI, r3
}
 80051a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3738      	adds	r7, #56	@ 0x38
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d006      	beq.n	80051ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f1c3 0307 	rsb	r3, r3, #7
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	e001      	b.n	80051ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80051ce:	68fb      	ldr	r3, [r7, #12]
	}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr

080051da <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b086      	sub	sp, #24
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10d      	bne.n	8005214 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d14d      	bne.n	800529c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 ff73 	bl	80060f0 <xTaskPriorityDisinherit>
 800520a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	605a      	str	r2, [r3, #4]
 8005212:	e043      	b.n	800529c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d119      	bne.n	800524e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6898      	ldr	r0, [r3, #8]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	461a      	mov	r2, r3
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	f001 fd15 	bl	8006c54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	441a      	add	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d32b      	bcc.n	800529c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	609a      	str	r2, [r3, #8]
 800524c:	e026      	b.n	800529c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68d8      	ldr	r0, [r3, #12]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	461a      	mov	r2, r3
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	f001 fcfb 	bl	8006c54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	425b      	negs	r3, r3
 8005268:	441a      	add	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d207      	bcs.n	800528a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	425b      	negs	r3, r3
 8005284:	441a      	add	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d105      	bne.n	800529c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	3b01      	subs	r3, #1
 800529a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80052a4:	697b      	ldr	r3, [r7, #20]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d018      	beq.n	80052f2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c8:	441a      	add	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d303      	bcc.n	80052e2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68d9      	ldr	r1, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	461a      	mov	r2, r3
 80052ec:	6838      	ldr	r0, [r7, #0]
 80052ee:	f001 fcb1 	bl	8006c54 <memcpy>
	}
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005302:	f001 f98b 	bl	800661c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800530c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800530e:	e011      	b.n	8005334 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3324      	adds	r3, #36	@ 0x24
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fc7f 	bl	8005c20 <xTaskRemoveFromEventList>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005328:	f000 fd58 	bl	8005ddc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	3b01      	subs	r3, #1
 8005330:	b2db      	uxtb	r3, r3
 8005332:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005338:	2b00      	cmp	r3, #0
 800533a:	dce9      	bgt.n	8005310 <prvUnlockQueue+0x16>
 800533c:	e000      	b.n	8005340 <prvUnlockQueue+0x46>
					break;
 800533e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	22ff      	movs	r2, #255	@ 0xff
 8005344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005348:	f001 f998 	bl	800667c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800534c:	f001 f966 	bl	800661c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005356:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005358:	e011      	b.n	800537e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d012      	beq.n	8005388 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3310      	adds	r3, #16
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fc5a 	bl	8005c20 <xTaskRemoveFromEventList>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005372:	f000 fd33 	bl	8005ddc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005376:	7bbb      	ldrb	r3, [r7, #14]
 8005378:	3b01      	subs	r3, #1
 800537a:	b2db      	uxtb	r3, r3
 800537c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800537e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005382:	2b00      	cmp	r3, #0
 8005384:	dce9      	bgt.n	800535a <prvUnlockQueue+0x60>
 8005386:	e000      	b.n	800538a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005388:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	22ff      	movs	r2, #255	@ 0xff
 800538e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005392:	f001 f973 	bl	800667c <vPortExitCritical>
}
 8005396:	bf00      	nop
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053a6:	f001 f939 	bl	800661c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053b2:	2301      	movs	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e001      	b.n	80053bc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053bc:	f001 f95e 	bl	800667c <vPortExitCritical>

	return xReturn;
 80053c0:	68fb      	ldr	r3, [r7, #12]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053d2:	f001 f923 	bl	800661c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053de:	429a      	cmp	r2, r3
 80053e0:	d102      	bne.n	80053e8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053e2:	2301      	movs	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e001      	b.n	80053ec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053ec:	f001 f946 	bl	800667c <vPortExitCritical>

	return xReturn;
 80053f0:	68fb      	ldr	r3, [r7, #12]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b08e      	sub	sp, #56	@ 0x38
 80053fe:	af04      	add	r7, sp, #16
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	607a      	str	r2, [r7, #4]
 8005406:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10b      	bne.n	8005426 <xTaskCreateStatic+0x2c>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	623b      	str	r3, [r7, #32]
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	e7fd      	b.n	8005422 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10b      	bne.n	8005444 <xTaskCreateStatic+0x4a>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	61fb      	str	r3, [r7, #28]
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005444:	2354      	movs	r3, #84	@ 0x54
 8005446:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2b54      	cmp	r3, #84	@ 0x54
 800544c:	d00b      	beq.n	8005466 <xTaskCreateStatic+0x6c>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	61bb      	str	r3, [r7, #24]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01e      	beq.n	80054aa <xTaskCreateStatic+0xb0>
 800546c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546e:	2b00      	cmp	r3, #0
 8005470:	d01b      	beq.n	80054aa <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800547a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005484:	2300      	movs	r3, #0
 8005486:	9303      	str	r3, [sp, #12]
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	9302      	str	r3, [sp, #8]
 800548c:	f107 0314 	add.w	r3, r7, #20
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f850 	bl	8005542 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054a4:	f000 f8ce 	bl	8005644 <prvAddNewTaskToReadyList>
 80054a8:	e001      	b.n	80054ae <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054ae:	697b      	ldr	r3, [r7, #20]
	}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3728      	adds	r7, #40	@ 0x28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08c      	sub	sp, #48	@ 0x30
 80054bc:	af04      	add	r7, sp, #16
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f001 f9a7 	bl	8006820 <pvPortMalloc>
 80054d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00e      	beq.n	80054f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80054da:	2054      	movs	r0, #84	@ 0x54
 80054dc:	f001 f9a0 	bl	8006820 <pvPortMalloc>
 80054e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80054ee:	e005      	b.n	80054fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054f0:	6978      	ldr	r0, [r7, #20]
 80054f2:	f001 fa5d 	bl	80069b0 <vPortFree>
 80054f6:	e001      	b.n	80054fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d017      	beq.n	8005532 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800550a:	88fa      	ldrh	r2, [r7, #6]
 800550c:	2300      	movs	r3, #0
 800550e:	9303      	str	r3, [sp, #12]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f80e 	bl	8005542 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005526:	69f8      	ldr	r0, [r7, #28]
 8005528:	f000 f88c 	bl	8005644 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800552c:	2301      	movs	r3, #1
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	e002      	b.n	8005538 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005532:	f04f 33ff 	mov.w	r3, #4294967295
 8005536:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005538:	69bb      	ldr	r3, [r7, #24]
	}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b088      	sub	sp, #32
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800555a:	3b01      	subs	r3, #1
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f023 0307 	bic.w	r3, r3, #7
 8005568:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00b      	beq.n	800558c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	617b      	str	r3, [r7, #20]
}
 8005586:	bf00      	nop
 8005588:	bf00      	nop
 800558a:	e7fd      	b.n	8005588 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	e012      	b.n	80055b8 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	7819      	ldrb	r1, [r3, #0]
 800559a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	4413      	add	r3, r2
 80055a0:	3334      	adds	r3, #52	@ 0x34
 80055a2:	460a      	mov	r2, r1
 80055a4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d006      	beq.n	80055c0 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	3301      	adds	r3, #1
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	2b0f      	cmp	r3, #15
 80055bc:	d9e9      	bls.n	8005592 <prvInitialiseNewTask+0x50>
 80055be:	e000      	b.n	80055c2 <prvInitialiseNewTask+0x80>
		{
			break;
 80055c0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055cc:	2b06      	cmp	r3, #6
 80055ce:	d901      	bls.n	80055d4 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055d0:	2306      	movs	r3, #6
 80055d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055de:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	2200      	movs	r2, #0
 80055e4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	3304      	adds	r3, #4
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff f897 	bl	800471e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f2:	3318      	adds	r3, #24
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff f892 	bl	800471e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005602:	f1c3 0207 	rsb	r2, r3, #7
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800560e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005612:	2200      	movs	r2, #0
 8005614:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	68f9      	ldr	r1, [r7, #12]
 8005622:	69b8      	ldr	r0, [r7, #24]
 8005624:	f000 ff08 	bl	8006438 <pxPortInitialiseStack>
 8005628:	4602      	mov	r2, r0
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800562e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800563a:	bf00      	nop
 800563c:	3720      	adds	r7, #32
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800564c:	f000 ffe6 	bl	800661c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005650:	4b2a      	ldr	r3, [pc, #168]	@ (80056fc <prvAddNewTaskToReadyList+0xb8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	4a29      	ldr	r2, [pc, #164]	@ (80056fc <prvAddNewTaskToReadyList+0xb8>)
 8005658:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800565a:	4b29      	ldr	r3, [pc, #164]	@ (8005700 <prvAddNewTaskToReadyList+0xbc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005662:	4a27      	ldr	r2, [pc, #156]	@ (8005700 <prvAddNewTaskToReadyList+0xbc>)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005668:	4b24      	ldr	r3, [pc, #144]	@ (80056fc <prvAddNewTaskToReadyList+0xb8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d110      	bne.n	8005692 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005670:	f000 fbd8 	bl	8005e24 <prvInitialiseTaskLists>
 8005674:	e00d      	b.n	8005692 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005676:	4b23      	ldr	r3, [pc, #140]	@ (8005704 <prvAddNewTaskToReadyList+0xc0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800567e:	4b20      	ldr	r3, [pc, #128]	@ (8005700 <prvAddNewTaskToReadyList+0xbc>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	429a      	cmp	r2, r3
 800568a:	d802      	bhi.n	8005692 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800568c:	4a1c      	ldr	r2, [pc, #112]	@ (8005700 <prvAddNewTaskToReadyList+0xbc>)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005692:	4b1d      	ldr	r3, [pc, #116]	@ (8005708 <prvAddNewTaskToReadyList+0xc4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3301      	adds	r3, #1
 8005698:	4a1b      	ldr	r2, [pc, #108]	@ (8005708 <prvAddNewTaskToReadyList+0xc4>)
 800569a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	2201      	movs	r2, #1
 80056a2:	409a      	lsls	r2, r3
 80056a4:	4b19      	ldr	r3, [pc, #100]	@ (800570c <prvAddNewTaskToReadyList+0xc8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	4a18      	ldr	r2, [pc, #96]	@ (800570c <prvAddNewTaskToReadyList+0xc8>)
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4a15      	ldr	r2, [pc, #84]	@ (8005710 <prvAddNewTaskToReadyList+0xcc>)
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7ff f836 	bl	8004736 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056ca:	f000 ffd7 	bl	800667c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005704 <prvAddNewTaskToReadyList+0xc0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00e      	beq.n	80056f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005700 <prvAddNewTaskToReadyList+0xbc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d207      	bcs.n	80056f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005714 <prvAddNewTaskToReadyList+0xd0>)
 80056e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056f4:	bf00      	nop
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	2000053c 	.word	0x2000053c
 8005700:	2000043c 	.word	0x2000043c
 8005704:	20000548 	.word	0x20000548
 8005708:	20000558 	.word	0x20000558
 800570c:	20000544 	.word	0x20000544
 8005710:	20000440 	.word	0x20000440
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d018      	beq.n	800575c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800572a:	4b14      	ldr	r3, [pc, #80]	@ (800577c <vTaskDelay+0x64>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <vTaskDelay+0x32>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	60bb      	str	r3, [r7, #8]
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	e7fd      	b.n	8005746 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800574a:	f000 f87d 	bl	8005848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800574e:	2100      	movs	r1, #0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fe0b 	bl	800636c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005756:	f000 f885 	bl	8005864 <xTaskResumeAll>
 800575a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005762:	4b07      	ldr	r3, [pc, #28]	@ (8005780 <vTaskDelay+0x68>)
 8005764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000564 	.word	0x20000564
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	@ 0x28
 8005788:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005792:	463a      	mov	r2, r7
 8005794:	1d39      	adds	r1, r7, #4
 8005796:	f107 0308 	add.w	r3, r7, #8
 800579a:	4618      	mov	r0, r3
 800579c:	f7fb fbca 	bl	8000f34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	9202      	str	r2, [sp, #8]
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	2300      	movs	r3, #0
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	2300      	movs	r3, #0
 80057b0:	460a      	mov	r2, r1
 80057b2:	491f      	ldr	r1, [pc, #124]	@ (8005830 <vTaskStartScheduler+0xac>)
 80057b4:	481f      	ldr	r0, [pc, #124]	@ (8005834 <vTaskStartScheduler+0xb0>)
 80057b6:	f7ff fe20 	bl	80053fa <xTaskCreateStatic>
 80057ba:	4603      	mov	r3, r0
 80057bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005838 <vTaskStartScheduler+0xb4>)
 80057be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005838 <vTaskStartScheduler+0xb4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057c8:	2301      	movs	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	e001      	b.n	80057d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d116      	bne.n	8005806 <vTaskStartScheduler+0x82>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	613b      	str	r3, [r7, #16]
}
 80057ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057ec:	4b13      	ldr	r3, [pc, #76]	@ (800583c <vTaskStartScheduler+0xb8>)
 80057ee:	f04f 32ff 	mov.w	r2, #4294967295
 80057f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057f4:	4b12      	ldr	r3, [pc, #72]	@ (8005840 <vTaskStartScheduler+0xbc>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80057fa:	4b12      	ldr	r3, [pc, #72]	@ (8005844 <vTaskStartScheduler+0xc0>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005800:	f000 fe9a 	bl	8006538 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005804:	e00f      	b.n	8005826 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d10b      	bne.n	8005826 <vTaskStartScheduler+0xa2>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	60fb      	str	r3, [r7, #12]
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	e7fd      	b.n	8005822 <vTaskStartScheduler+0x9e>
}
 8005826:	bf00      	nop
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	08006f0c 	.word	0x08006f0c
 8005834:	08005df5 	.word	0x08005df5
 8005838:	20000560 	.word	0x20000560
 800583c:	2000055c 	.word	0x2000055c
 8005840:	20000548 	.word	0x20000548
 8005844:	20000540 	.word	0x20000540

08005848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800584c:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <vTaskSuspendAll+0x18>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3301      	adds	r3, #1
 8005852:	4a03      	ldr	r2, [pc, #12]	@ (8005860 <vTaskSuspendAll+0x18>)
 8005854:	6013      	str	r3, [r2, #0]
}
 8005856:	bf00      	nop
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	20000564 	.word	0x20000564

08005864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800586e:	2300      	movs	r3, #0
 8005870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005872:	4b42      	ldr	r3, [pc, #264]	@ (800597c <xTaskResumeAll+0x118>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10b      	bne.n	8005892 <xTaskResumeAll+0x2e>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	603b      	str	r3, [r7, #0]
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	e7fd      	b.n	800588e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005892:	f000 fec3 	bl	800661c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005896:	4b39      	ldr	r3, [pc, #228]	@ (800597c <xTaskResumeAll+0x118>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3b01      	subs	r3, #1
 800589c:	4a37      	ldr	r2, [pc, #220]	@ (800597c <xTaskResumeAll+0x118>)
 800589e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058a0:	4b36      	ldr	r3, [pc, #216]	@ (800597c <xTaskResumeAll+0x118>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d161      	bne.n	800596c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058a8:	4b35      	ldr	r3, [pc, #212]	@ (8005980 <xTaskResumeAll+0x11c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d05d      	beq.n	800596c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058b0:	e02e      	b.n	8005910 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80058b2:	4b34      	ldr	r3, [pc, #208]	@ (8005984 <xTaskResumeAll+0x120>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3318      	adds	r3, #24
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe ff94 	bl	80047ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fe ff8f 	bl	80047ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	2201      	movs	r2, #1
 80058d4:	409a      	lsls	r2, r3
 80058d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005988 <xTaskResumeAll+0x124>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4313      	orrs	r3, r2
 80058dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005988 <xTaskResumeAll+0x124>)
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4a27      	ldr	r2, [pc, #156]	@ (800598c <xTaskResumeAll+0x128>)
 80058ee:	441a      	add	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4619      	mov	r1, r3
 80058f6:	4610      	mov	r0, r2
 80058f8:	f7fe ff1d 	bl	8004736 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005900:	4b23      	ldr	r3, [pc, #140]	@ (8005990 <xTaskResumeAll+0x12c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	429a      	cmp	r2, r3
 8005908:	d302      	bcc.n	8005910 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800590a:	4b22      	ldr	r3, [pc, #136]	@ (8005994 <xTaskResumeAll+0x130>)
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005910:	4b1c      	ldr	r3, [pc, #112]	@ (8005984 <xTaskResumeAll+0x120>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1cc      	bne.n	80058b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800591e:	f000 fb1f 	bl	8005f60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005922:	4b1d      	ldr	r3, [pc, #116]	@ (8005998 <xTaskResumeAll+0x134>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d010      	beq.n	8005950 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800592e:	f000 f837 	bl	80059a0 <xTaskIncrementTick>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005938:	4b16      	ldr	r3, [pc, #88]	@ (8005994 <xTaskResumeAll+0x130>)
 800593a:	2201      	movs	r2, #1
 800593c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3b01      	subs	r3, #1
 8005942:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f1      	bne.n	800592e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800594a:	4b13      	ldr	r3, [pc, #76]	@ (8005998 <xTaskResumeAll+0x134>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005950:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <xTaskResumeAll+0x130>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005958:	2301      	movs	r3, #1
 800595a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800595c:	4b0f      	ldr	r3, [pc, #60]	@ (800599c <xTaskResumeAll+0x138>)
 800595e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800596c:	f000 fe86 	bl	800667c <vPortExitCritical>

	return xAlreadyYielded;
 8005970:	68bb      	ldr	r3, [r7, #8]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000564 	.word	0x20000564
 8005980:	2000053c 	.word	0x2000053c
 8005984:	200004fc 	.word	0x200004fc
 8005988:	20000544 	.word	0x20000544
 800598c:	20000440 	.word	0x20000440
 8005990:	2000043c 	.word	0x2000043c
 8005994:	20000550 	.word	0x20000550
 8005998:	2000054c 	.word	0x2000054c
 800599c:	e000ed04 	.word	0xe000ed04

080059a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059aa:	4b51      	ldr	r3, [pc, #324]	@ (8005af0 <xTaskIncrementTick+0x150>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f040 808e 	bne.w	8005ad0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059b4:	4b4f      	ldr	r3, [pc, #316]	@ (8005af4 <xTaskIncrementTick+0x154>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059bc:	4a4d      	ldr	r2, [pc, #308]	@ (8005af4 <xTaskIncrementTick+0x154>)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d121      	bne.n	8005a0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059c8:	4b4b      	ldr	r3, [pc, #300]	@ (8005af8 <xTaskIncrementTick+0x158>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	603b      	str	r3, [r7, #0]
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	e7fd      	b.n	80059e6 <xTaskIncrementTick+0x46>
 80059ea:	4b43      	ldr	r3, [pc, #268]	@ (8005af8 <xTaskIncrementTick+0x158>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	4b42      	ldr	r3, [pc, #264]	@ (8005afc <xTaskIncrementTick+0x15c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a40      	ldr	r2, [pc, #256]	@ (8005af8 <xTaskIncrementTick+0x158>)
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	4a40      	ldr	r2, [pc, #256]	@ (8005afc <xTaskIncrementTick+0x15c>)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	4b40      	ldr	r3, [pc, #256]	@ (8005b00 <xTaskIncrementTick+0x160>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	4a3e      	ldr	r2, [pc, #248]	@ (8005b00 <xTaskIncrementTick+0x160>)
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	f000 faaa 	bl	8005f60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b04 <xTaskIncrementTick+0x164>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d34d      	bcc.n	8005ab2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a16:	4b38      	ldr	r3, [pc, #224]	@ (8005af8 <xTaskIncrementTick+0x158>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <xTaskIncrementTick+0x84>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <xTaskIncrementTick+0x86>
 8005a24:	2300      	movs	r3, #0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d004      	beq.n	8005a34 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a2a:	4b36      	ldr	r3, [pc, #216]	@ (8005b04 <xTaskIncrementTick+0x164>)
 8005a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a30:	601a      	str	r2, [r3, #0]
					break;
 8005a32:	e03e      	b.n	8005ab2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a34:	4b30      	ldr	r3, [pc, #192]	@ (8005af8 <xTaskIncrementTick+0x158>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d203      	bcs.n	8005a54 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b04 <xTaskIncrementTick+0x164>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6013      	str	r3, [r2, #0]
						break;
 8005a52:	e02e      	b.n	8005ab2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe fec7 	bl	80047ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	3318      	adds	r3, #24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe febe 	bl	80047ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	2201      	movs	r2, #1
 8005a76:	409a      	lsls	r2, r3
 8005a78:	4b23      	ldr	r3, [pc, #140]	@ (8005b08 <xTaskIncrementTick+0x168>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	4a22      	ldr	r2, [pc, #136]	@ (8005b08 <xTaskIncrementTick+0x168>)
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005b0c <xTaskIncrementTick+0x16c>)
 8005a90:	441a      	add	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	3304      	adds	r3, #4
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f7fe fe4c 	bl	8004736 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b10 <xTaskIncrementTick+0x170>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d3b4      	bcc.n	8005a16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ab0:	e7b1      	b.n	8005a16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ab2:	4b17      	ldr	r3, [pc, #92]	@ (8005b10 <xTaskIncrementTick+0x170>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab8:	4914      	ldr	r1, [pc, #80]	@ (8005b0c <xTaskIncrementTick+0x16c>)
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d907      	bls.n	8005ada <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005aca:	2301      	movs	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e004      	b.n	8005ada <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ad0:	4b10      	ldr	r3, [pc, #64]	@ (8005b14 <xTaskIncrementTick+0x174>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8005b14 <xTaskIncrementTick+0x174>)
 8005ad8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ada:	4b0f      	ldr	r3, [pc, #60]	@ (8005b18 <xTaskIncrementTick+0x178>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ae6:	697b      	ldr	r3, [r7, #20]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20000564 	.word	0x20000564
 8005af4:	20000540 	.word	0x20000540
 8005af8:	200004f4 	.word	0x200004f4
 8005afc:	200004f8 	.word	0x200004f8
 8005b00:	20000554 	.word	0x20000554
 8005b04:	2000055c 	.word	0x2000055c
 8005b08:	20000544 	.word	0x20000544
 8005b0c:	20000440 	.word	0x20000440
 8005b10:	2000043c 	.word	0x2000043c
 8005b14:	2000054c 	.word	0x2000054c
 8005b18:	20000550 	.word	0x20000550

08005b1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b22:	4b27      	ldr	r3, [pc, #156]	@ (8005bc0 <vTaskSwitchContext+0xa4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b2a:	4b26      	ldr	r3, [pc, #152]	@ (8005bc4 <vTaskSwitchContext+0xa8>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b30:	e040      	b.n	8005bb4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005b32:	4b24      	ldr	r3, [pc, #144]	@ (8005bc4 <vTaskSwitchContext+0xa8>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005b38:	4b23      	ldr	r3, [pc, #140]	@ (8005bc8 <vTaskSwitchContext+0xac>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	fab3 f383 	clz	r3, r3
 8005b44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	f1c3 031f 	rsb	r3, r3, #31
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	491f      	ldr	r1, [pc, #124]	@ (8005bcc <vTaskSwitchContext+0xb0>)
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10b      	bne.n	8005b7a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	607b      	str	r3, [r7, #4]
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	e7fd      	b.n	8005b76 <vTaskSwitchContext+0x5a>
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4a11      	ldr	r2, [pc, #68]	@ (8005bcc <vTaskSwitchContext+0xb0>)
 8005b86:	4413      	add	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	605a      	str	r2, [r3, #4]
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d104      	bne.n	8005baa <vTaskSwitchContext+0x8e>
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	605a      	str	r2, [r3, #4]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4a07      	ldr	r2, [pc, #28]	@ (8005bd0 <vTaskSwitchContext+0xb4>)
 8005bb2:	6013      	str	r3, [r2, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	371c      	adds	r7, #28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	20000564 	.word	0x20000564
 8005bc4:	20000550 	.word	0x20000550
 8005bc8:	20000544 	.word	0x20000544
 8005bcc:	20000440 	.word	0x20000440
 8005bd0:	2000043c 	.word	0x2000043c

08005bd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	60fb      	str	r3, [r7, #12]
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bfc:	4b07      	ldr	r3, [pc, #28]	@ (8005c1c <vTaskPlaceOnEventList+0x48>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3318      	adds	r3, #24
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fe fdb9 	bl	800477c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	6838      	ldr	r0, [r7, #0]
 8005c0e:	f000 fbad 	bl	800636c <prvAddCurrentTaskToDelayedList>
}
 8005c12:	bf00      	nop
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	2000043c 	.word	0x2000043c

08005c20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10b      	bne.n	8005c4e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	60fb      	str	r3, [r7, #12]
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	e7fd      	b.n	8005c4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3318      	adds	r3, #24
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe fdca 	bl	80047ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c58:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd0 <xTaskRemoveFromEventList+0xb0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d11c      	bne.n	8005c9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fe fdc1 	bl	80047ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6e:	2201      	movs	r2, #1
 8005c70:	409a      	lsls	r2, r3
 8005c72:	4b18      	ldr	r3, [pc, #96]	@ (8005cd4 <xTaskRemoveFromEventList+0xb4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	4a16      	ldr	r2, [pc, #88]	@ (8005cd4 <xTaskRemoveFromEventList+0xb4>)
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4a13      	ldr	r2, [pc, #76]	@ (8005cd8 <xTaskRemoveFromEventList+0xb8>)
 8005c8a:	441a      	add	r2, r3
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f7fe fd4f 	bl	8004736 <vListInsertEnd>
 8005c98:	e005      	b.n	8005ca6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	3318      	adds	r3, #24
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	480e      	ldr	r0, [pc, #56]	@ (8005cdc <xTaskRemoveFromEventList+0xbc>)
 8005ca2:	f7fe fd48 	bl	8004736 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005caa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <xTaskRemoveFromEventList+0xc0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d905      	bls.n	8005cc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce4 <xTaskRemoveFromEventList+0xc4>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e001      	b.n	8005cc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005cc4:	697b      	ldr	r3, [r7, #20]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000564 	.word	0x20000564
 8005cd4:	20000544 	.word	0x20000544
 8005cd8:	20000440 	.word	0x20000440
 8005cdc:	200004fc 	.word	0x200004fc
 8005ce0:	2000043c 	.word	0x2000043c
 8005ce4:	20000550 	.word	0x20000550

08005ce8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cf0:	4b06      	ldr	r3, [pc, #24]	@ (8005d0c <vTaskInternalSetTimeOutState+0x24>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cf8:	4b05      	ldr	r3, [pc, #20]	@ (8005d10 <vTaskInternalSetTimeOutState+0x28>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	605a      	str	r2, [r3, #4]
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000554 	.word	0x20000554
 8005d10:	20000540 	.word	0x20000540

08005d14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10b      	bne.n	8005d3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	613b      	str	r3, [r7, #16]
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	e7fd      	b.n	8005d38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	60fb      	str	r3, [r7, #12]
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	e7fd      	b.n	8005d56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d5a:	f000 fc5f 	bl	800661c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd4 <xTaskCheckForTimeOut+0xc0>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d102      	bne.n	8005d7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	e023      	b.n	8005dc6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4b15      	ldr	r3, [pc, #84]	@ (8005dd8 <xTaskCheckForTimeOut+0xc4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d007      	beq.n	8005d9a <xTaskCheckForTimeOut+0x86>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d302      	bcc.n	8005d9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d94:	2301      	movs	r3, #1
 8005d96:	61fb      	str	r3, [r7, #28]
 8005d98:	e015      	b.n	8005dc6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d20b      	bcs.n	8005dbc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad2      	subs	r2, r2, r3
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff ff99 	bl	8005ce8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	e004      	b.n	8005dc6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dc6:	f000 fc59 	bl	800667c <vPortExitCritical>

	return xReturn;
 8005dca:	69fb      	ldr	r3, [r7, #28]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3720      	adds	r7, #32
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000540 	.word	0x20000540
 8005dd8:	20000554 	.word	0x20000554

08005ddc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005de0:	4b03      	ldr	r3, [pc, #12]	@ (8005df0 <vTaskMissedYield+0x14>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
}
 8005de6:	bf00      	nop
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20000550 	.word	0x20000550

08005df4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005dfc:	f000 f852 	bl	8005ea4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e00:	4b06      	ldr	r3, [pc, #24]	@ (8005e1c <prvIdleTask+0x28>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d9f9      	bls.n	8005dfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e08:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <prvIdleTask+0x2c>)
 8005e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e18:	e7f0      	b.n	8005dfc <prvIdleTask+0x8>
 8005e1a:	bf00      	nop
 8005e1c:	20000440 	.word	0x20000440
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	607b      	str	r3, [r7, #4]
 8005e2e:	e00c      	b.n	8005e4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4a12      	ldr	r2, [pc, #72]	@ (8005e84 <prvInitialiseTaskLists+0x60>)
 8005e3c:	4413      	add	r3, r2
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe fc4e 	bl	80046e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3301      	adds	r3, #1
 8005e48:	607b      	str	r3, [r7, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b06      	cmp	r3, #6
 8005e4e:	d9ef      	bls.n	8005e30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e50:	480d      	ldr	r0, [pc, #52]	@ (8005e88 <prvInitialiseTaskLists+0x64>)
 8005e52:	f7fe fc45 	bl	80046e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e56:	480d      	ldr	r0, [pc, #52]	@ (8005e8c <prvInitialiseTaskLists+0x68>)
 8005e58:	f7fe fc42 	bl	80046e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e5c:	480c      	ldr	r0, [pc, #48]	@ (8005e90 <prvInitialiseTaskLists+0x6c>)
 8005e5e:	f7fe fc3f 	bl	80046e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e62:	480c      	ldr	r0, [pc, #48]	@ (8005e94 <prvInitialiseTaskLists+0x70>)
 8005e64:	f7fe fc3c 	bl	80046e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e68:	480b      	ldr	r0, [pc, #44]	@ (8005e98 <prvInitialiseTaskLists+0x74>)
 8005e6a:	f7fe fc39 	bl	80046e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e9c <prvInitialiseTaskLists+0x78>)
 8005e70:	4a05      	ldr	r2, [pc, #20]	@ (8005e88 <prvInitialiseTaskLists+0x64>)
 8005e72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea0 <prvInitialiseTaskLists+0x7c>)
 8005e76:	4a05      	ldr	r2, [pc, #20]	@ (8005e8c <prvInitialiseTaskLists+0x68>)
 8005e78:	601a      	str	r2, [r3, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000440 	.word	0x20000440
 8005e88:	200004cc 	.word	0x200004cc
 8005e8c:	200004e0 	.word	0x200004e0
 8005e90:	200004fc 	.word	0x200004fc
 8005e94:	20000510 	.word	0x20000510
 8005e98:	20000528 	.word	0x20000528
 8005e9c:	200004f4 	.word	0x200004f4
 8005ea0:	200004f8 	.word	0x200004f8

08005ea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eaa:	e019      	b.n	8005ee0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005eac:	f000 fbb6 	bl	800661c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005eb0:	4b10      	ldr	r3, [pc, #64]	@ (8005ef4 <prvCheckTasksWaitingTermination+0x50>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fe fc95 	bl	80047ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef8 <prvCheckTasksWaitingTermination+0x54>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8005ef8 <prvCheckTasksWaitingTermination+0x54>)
 8005eca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <prvCheckTasksWaitingTermination+0x58>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8005efc <prvCheckTasksWaitingTermination+0x58>)
 8005ed4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ed6:	f000 fbd1 	bl	800667c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f810 	bl	8005f00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ee0:	4b06      	ldr	r3, [pc, #24]	@ (8005efc <prvCheckTasksWaitingTermination+0x58>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e1      	bne.n	8005eac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000510 	.word	0x20000510
 8005ef8:	2000053c 	.word	0x2000053c
 8005efc:	20000524 	.word	0x20000524

08005f00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d108      	bne.n	8005f24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fd4a 	bl	80069b0 <vPortFree>
				vPortFree( pxTCB );
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fd47 	bl	80069b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f22:	e019      	b.n	8005f58 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d103      	bne.n	8005f36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fd3e 	bl	80069b0 <vPortFree>
	}
 8005f34:	e010      	b.n	8005f58 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d00b      	beq.n	8005f58 <prvDeleteTCB+0x58>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	60fb      	str	r3, [r7, #12]
}
 8005f52:	bf00      	nop
 8005f54:	bf00      	nop
 8005f56:	e7fd      	b.n	8005f54 <prvDeleteTCB+0x54>
	}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f66:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa0 <prvResetNextTaskUnblockTime+0x40>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <prvResetNextTaskUnblockTime+0x14>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e000      	b.n	8005f76 <prvResetNextTaskUnblockTime+0x16>
 8005f74:	2300      	movs	r3, #0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d004      	beq.n	8005f84 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa4 <prvResetNextTaskUnblockTime+0x44>)
 8005f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f80:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f82:	e008      	b.n	8005f96 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f84:	4b06      	ldr	r3, [pc, #24]	@ (8005fa0 <prvResetNextTaskUnblockTime+0x40>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	4a04      	ldr	r2, [pc, #16]	@ (8005fa4 <prvResetNextTaskUnblockTime+0x44>)
 8005f94:	6013      	str	r3, [r2, #0]
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr
 8005fa0:	200004f4 	.word	0x200004f4
 8005fa4:	2000055c 	.word	0x2000055c

08005fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fae:	4b0b      	ldr	r3, [pc, #44]	@ (8005fdc <xTaskGetSchedulerState+0x34>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	607b      	str	r3, [r7, #4]
 8005fba:	e008      	b.n	8005fce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fbc:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <xTaskGetSchedulerState+0x38>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	607b      	str	r3, [r7, #4]
 8005fc8:	e001      	b.n	8005fce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fce:	687b      	ldr	r3, [r7, #4]
	}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	20000548 	.word	0x20000548
 8005fe0:	20000564 	.word	0x20000564

08005fe4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d06e      	beq.n	80060d8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffe:	4b39      	ldr	r3, [pc, #228]	@ (80060e4 <xTaskPriorityInherit+0x100>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006004:	429a      	cmp	r2, r3
 8006006:	d25e      	bcs.n	80060c6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	2b00      	cmp	r3, #0
 800600e:	db06      	blt.n	800601e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006010:	4b34      	ldr	r3, [pc, #208]	@ (80060e4 <xTaskPriorityInherit+0x100>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006016:	f1c3 0207 	rsb	r2, r3, #7
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6959      	ldr	r1, [r3, #20]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4a2e      	ldr	r2, [pc, #184]	@ (80060e8 <xTaskPriorityInherit+0x104>)
 8006030:	4413      	add	r3, r2
 8006032:	4299      	cmp	r1, r3
 8006034:	d101      	bne.n	800603a <xTaskPriorityInherit+0x56>
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <xTaskPriorityInherit+0x58>
 800603a:	2300      	movs	r3, #0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d03a      	beq.n	80060b6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	3304      	adds	r3, #4
 8006044:	4618      	mov	r0, r3
 8006046:	f7fe fbd1 	bl	80047ec <uxListRemove>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d115      	bne.n	800607c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006054:	4924      	ldr	r1, [pc, #144]	@ (80060e8 <xTaskPriorityInherit+0x104>)
 8006056:	4613      	mov	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	440b      	add	r3, r1
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <xTaskPriorityInherit+0x98>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606a:	2201      	movs	r2, #1
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	43da      	mvns	r2, r3
 8006072:	4b1e      	ldr	r3, [pc, #120]	@ (80060ec <xTaskPriorityInherit+0x108>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4013      	ands	r3, r2
 8006078:	4a1c      	ldr	r2, [pc, #112]	@ (80060ec <xTaskPriorityInherit+0x108>)
 800607a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800607c:	4b19      	ldr	r3, [pc, #100]	@ (80060e4 <xTaskPriorityInherit+0x100>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608a:	2201      	movs	r2, #1
 800608c:	409a      	lsls	r2, r3
 800608e:	4b17      	ldr	r3, [pc, #92]	@ (80060ec <xTaskPriorityInherit+0x108>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4313      	orrs	r3, r2
 8006094:	4a15      	ldr	r2, [pc, #84]	@ (80060ec <xTaskPriorityInherit+0x108>)
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4a10      	ldr	r2, [pc, #64]	@ (80060e8 <xTaskPriorityInherit+0x104>)
 80060a6:	441a      	add	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f7fe fb41 	bl	8004736 <vListInsertEnd>
 80060b4:	e004      	b.n	80060c0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060b6:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <xTaskPriorityInherit+0x100>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80060c0:	2301      	movs	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	e008      	b.n	80060d8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060ca:	4b06      	ldr	r3, [pc, #24]	@ (80060e4 <xTaskPriorityInherit+0x100>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d201      	bcs.n	80060d8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80060d4:	2301      	movs	r3, #1
 80060d6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060d8:	68fb      	ldr	r3, [r7, #12]
	}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	2000043c 	.word	0x2000043c
 80060e8:	20000440 	.word	0x20000440
 80060ec:	20000544 	.word	0x20000544

080060f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d070      	beq.n	80061e8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006106:	4b3b      	ldr	r3, [pc, #236]	@ (80061f4 <xTaskPriorityDisinherit+0x104>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	429a      	cmp	r2, r3
 800610e:	d00b      	beq.n	8006128 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	60fb      	str	r3, [r7, #12]
}
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	e7fd      	b.n	8006124 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10b      	bne.n	8006148 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	60bb      	str	r3, [r7, #8]
}
 8006142:	bf00      	nop
 8006144:	bf00      	nop
 8006146:	e7fd      	b.n	8006144 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800614c:	1e5a      	subs	r2, r3, #1
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615a:	429a      	cmp	r2, r3
 800615c:	d044      	beq.n	80061e8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006162:	2b00      	cmp	r3, #0
 8006164:	d140      	bne.n	80061e8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3304      	adds	r3, #4
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fb3e 	bl	80047ec <uxListRemove>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d115      	bne.n	80061a2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617a:	491f      	ldr	r1, [pc, #124]	@ (80061f8 <xTaskPriorityDisinherit+0x108>)
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <xTaskPriorityDisinherit+0xb2>
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	2201      	movs	r2, #1
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	43da      	mvns	r2, r3
 8006198:	4b18      	ldr	r3, [pc, #96]	@ (80061fc <xTaskPriorityDisinherit+0x10c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4013      	ands	r3, r2
 800619e:	4a17      	ldr	r2, [pc, #92]	@ (80061fc <xTaskPriorityDisinherit+0x10c>)
 80061a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ae:	f1c3 0207 	rsb	r2, r3, #7
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ba:	2201      	movs	r2, #1
 80061bc:	409a      	lsls	r2, r3
 80061be:	4b0f      	ldr	r3, [pc, #60]	@ (80061fc <xTaskPriorityDisinherit+0x10c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	4a0d      	ldr	r2, [pc, #52]	@ (80061fc <xTaskPriorityDisinherit+0x10c>)
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4a08      	ldr	r2, [pc, #32]	@ (80061f8 <xTaskPriorityDisinherit+0x108>)
 80061d6:	441a      	add	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	3304      	adds	r3, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	4610      	mov	r0, r2
 80061e0:	f7fe faa9 	bl	8004736 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061e4:	2301      	movs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061e8:	697b      	ldr	r3, [r7, #20]
	}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	2000043c 	.word	0x2000043c
 80061f8:	20000440 	.word	0x20000440
 80061fc:	20000544 	.word	0x20000544

08006200 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800620e:	2301      	movs	r3, #1
 8006210:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 808a 	beq.w	800632e <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10b      	bne.n	800623a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	60fb      	str	r3, [r7, #12]
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	e7fd      	b.n	8006236 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d902      	bls.n	800624a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	e002      	b.n	8006250 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	429a      	cmp	r2, r3
 8006258:	d069      	beq.n	800632e <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	429a      	cmp	r2, r3
 8006262:	d164      	bne.n	800632e <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006264:	4b34      	ldr	r3, [pc, #208]	@ (8006338 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	429a      	cmp	r2, r3
 800626c:	d10b      	bne.n	8006286 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	60bb      	str	r3, [r7, #8]
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	e7fd      	b.n	8006282 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	db04      	blt.n	80062a4 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f1c3 0207 	rsb	r2, r3, #7
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	6959      	ldr	r1, [r3, #20]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4a22      	ldr	r2, [pc, #136]	@ (800633c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80062b4:	4413      	add	r3, r2
 80062b6:	4299      	cmp	r1, r3
 80062b8:	d101      	bne.n	80062be <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e000      	b.n	80062c0 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 80062be:	2300      	movs	r3, #0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d034      	beq.n	800632e <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fe fa8f 	bl	80047ec <uxListRemove>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d115      	bne.n	8006300 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d8:	4918      	ldr	r1, [pc, #96]	@ (800633c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	440b      	add	r3, r1
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <vTaskPriorityDisinheritAfterTimeout+0x100>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ee:	2201      	movs	r2, #1
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	43da      	mvns	r2, r3
 80062f6:	4b12      	ldr	r3, [pc, #72]	@ (8006340 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4013      	ands	r3, r2
 80062fc:	4a10      	ldr	r2, [pc, #64]	@ (8006340 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80062fe:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006304:	2201      	movs	r2, #1
 8006306:	409a      	lsls	r2, r3
 8006308:	4b0d      	ldr	r3, [pc, #52]	@ (8006340 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4313      	orrs	r3, r2
 800630e:	4a0c      	ldr	r2, [pc, #48]	@ (8006340 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4a07      	ldr	r2, [pc, #28]	@ (800633c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006320:	441a      	add	r2, r3
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	3304      	adds	r3, #4
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7fe fa04 	bl	8004736 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800632e:	bf00      	nop
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	2000043c 	.word	0x2000043c
 800633c:	20000440 	.word	0x20000440
 8006340:	20000544 	.word	0x20000544

08006344 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006348:	4b07      	ldr	r3, [pc, #28]	@ (8006368 <pvTaskIncrementMutexHeldCount+0x24>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006350:	4b05      	ldr	r3, [pc, #20]	@ (8006368 <pvTaskIncrementMutexHeldCount+0x24>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006356:	3201      	adds	r2, #1
 8006358:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800635a:	4b03      	ldr	r3, [pc, #12]	@ (8006368 <pvTaskIncrementMutexHeldCount+0x24>)
 800635c:	681b      	ldr	r3, [r3, #0]
	}
 800635e:	4618      	mov	r0, r3
 8006360:	46bd      	mov	sp, r7
 8006362:	bc80      	pop	{r7}
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	2000043c 	.word	0x2000043c

0800636c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006376:	4b29      	ldr	r3, [pc, #164]	@ (800641c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800637c:	4b28      	ldr	r3, [pc, #160]	@ (8006420 <prvAddCurrentTaskToDelayedList+0xb4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3304      	adds	r3, #4
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fa32 	bl	80047ec <uxListRemove>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800638e:	4b24      	ldr	r3, [pc, #144]	@ (8006420 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	2201      	movs	r2, #1
 8006396:	fa02 f303 	lsl.w	r3, r2, r3
 800639a:	43da      	mvns	r2, r3
 800639c:	4b21      	ldr	r3, [pc, #132]	@ (8006424 <prvAddCurrentTaskToDelayedList+0xb8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4013      	ands	r3, r2
 80063a2:	4a20      	ldr	r2, [pc, #128]	@ (8006424 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ac:	d10a      	bne.n	80063c4 <prvAddCurrentTaskToDelayedList+0x58>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d007      	beq.n	80063c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3304      	adds	r3, #4
 80063ba:	4619      	mov	r1, r3
 80063bc:	481a      	ldr	r0, [pc, #104]	@ (8006428 <prvAddCurrentTaskToDelayedList+0xbc>)
 80063be:	f7fe f9ba 	bl	8004736 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063c2:	e026      	b.n	8006412 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4413      	add	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063cc:	4b14      	ldr	r3, [pc, #80]	@ (8006420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d209      	bcs.n	80063f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063dc:	4b13      	ldr	r3, [pc, #76]	@ (800642c <prvAddCurrentTaskToDelayedList+0xc0>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f7fe f9c7 	bl	800477c <vListInsert>
}
 80063ee:	e010      	b.n	8006412 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006430 <prvAddCurrentTaskToDelayedList+0xc4>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4619      	mov	r1, r3
 80063fc:	4610      	mov	r0, r2
 80063fe:	f7fe f9bd 	bl	800477c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006402:	4b0c      	ldr	r3, [pc, #48]	@ (8006434 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	d202      	bcs.n	8006412 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800640c:	4a09      	ldr	r2, [pc, #36]	@ (8006434 <prvAddCurrentTaskToDelayedList+0xc8>)
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6013      	str	r3, [r2, #0]
}
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000540 	.word	0x20000540
 8006420:	2000043c 	.word	0x2000043c
 8006424:	20000544 	.word	0x20000544
 8006428:	20000528 	.word	0x20000528
 800642c:	200004f8 	.word	0x200004f8
 8006430:	200004f4 	.word	0x200004f4
 8006434:	2000055c 	.word	0x2000055c

08006438 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3b04      	subs	r3, #4
 8006448:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3b04      	subs	r3, #4
 8006456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f023 0201 	bic.w	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3b04      	subs	r3, #4
 8006466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006468:	4a08      	ldr	r2, [pc, #32]	@ (800648c <pxPortInitialiseStack+0x54>)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3b14      	subs	r3, #20
 8006472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3b20      	subs	r3, #32
 800647e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006480:	68fb      	ldr	r3, [r7, #12]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	bc80      	pop	{r7}
 800648a:	4770      	bx	lr
 800648c:	08006491 	.word	0x08006491

08006490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006496:	2300      	movs	r3, #0
 8006498:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800649a:	4b12      	ldr	r3, [pc, #72]	@ (80064e4 <prvTaskExitError+0x54>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d00b      	beq.n	80064bc <prvTaskExitError+0x2c>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	60fb      	str	r3, [r7, #12]
}
 80064b6:	bf00      	nop
 80064b8:	bf00      	nop
 80064ba:	e7fd      	b.n	80064b8 <prvTaskExitError+0x28>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60bb      	str	r3, [r7, #8]
}
 80064ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064d0:	bf00      	nop
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0fc      	beq.n	80064d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr
 80064e4:	20000010 	.word	0x20000010
	...

080064f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064f0:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <pxCurrentTCBConst2>)
 80064f2:	6819      	ldr	r1, [r3, #0]
 80064f4:	6808      	ldr	r0, [r1, #0]
 80064f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064fa:	f380 8809 	msr	PSP, r0
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f04f 0000 	mov.w	r0, #0
 8006506:	f380 8811 	msr	BASEPRI, r0
 800650a:	f04e 0e0d 	orr.w	lr, lr, #13
 800650e:	4770      	bx	lr

08006510 <pxCurrentTCBConst2>:
 8006510:	2000043c 	.word	0x2000043c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop

08006518 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006518:	4806      	ldr	r0, [pc, #24]	@ (8006534 <prvPortStartFirstTask+0x1c>)
 800651a:	6800      	ldr	r0, [r0, #0]
 800651c:	6800      	ldr	r0, [r0, #0]
 800651e:	f380 8808 	msr	MSP, r0
 8006522:	b662      	cpsie	i
 8006524:	b661      	cpsie	f
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	df00      	svc	0
 8006530:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006532:	bf00      	nop
 8006534:	e000ed08 	.word	0xe000ed08

08006538 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800653e:	4b32      	ldr	r3, [pc, #200]	@ (8006608 <xPortStartScheduler+0xd0>)
 8006540:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	22ff      	movs	r2, #255	@ 0xff
 800654e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006560:	b2da      	uxtb	r2, r3
 8006562:	4b2a      	ldr	r3, [pc, #168]	@ (800660c <xPortStartScheduler+0xd4>)
 8006564:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006566:	4b2a      	ldr	r3, [pc, #168]	@ (8006610 <xPortStartScheduler+0xd8>)
 8006568:	2207      	movs	r2, #7
 800656a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800656c:	e009      	b.n	8006582 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800656e:	4b28      	ldr	r3, [pc, #160]	@ (8006610 <xPortStartScheduler+0xd8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3b01      	subs	r3, #1
 8006574:	4a26      	ldr	r2, [pc, #152]	@ (8006610 <xPortStartScheduler+0xd8>)
 8006576:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	b2db      	uxtb	r3, r3
 8006580:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658a:	2b80      	cmp	r3, #128	@ 0x80
 800658c:	d0ef      	beq.n	800656e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800658e:	4b20      	ldr	r3, [pc, #128]	@ (8006610 <xPortStartScheduler+0xd8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f1c3 0307 	rsb	r3, r3, #7
 8006596:	2b04      	cmp	r3, #4
 8006598:	d00b      	beq.n	80065b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	60bb      	str	r3, [r7, #8]
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	e7fd      	b.n	80065ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065b2:	4b17      	ldr	r3, [pc, #92]	@ (8006610 <xPortStartScheduler+0xd8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	4a15      	ldr	r2, [pc, #84]	@ (8006610 <xPortStartScheduler+0xd8>)
 80065ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065bc:	4b14      	ldr	r3, [pc, #80]	@ (8006610 <xPortStartScheduler+0xd8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065c4:	4a12      	ldr	r2, [pc, #72]	@ (8006610 <xPortStartScheduler+0xd8>)
 80065c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065d0:	4b10      	ldr	r3, [pc, #64]	@ (8006614 <xPortStartScheduler+0xdc>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a0f      	ldr	r2, [pc, #60]	@ (8006614 <xPortStartScheduler+0xdc>)
 80065d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006614 <xPortStartScheduler+0xdc>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006614 <xPortStartScheduler+0xdc>)
 80065e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80065e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065e8:	f000 f8b8 	bl	800675c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <xPortStartScheduler+0xe0>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065f2:	f7ff ff91 	bl	8006518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065f6:	f7ff fa91 	bl	8005b1c <vTaskSwitchContext>
	prvTaskExitError();
 80065fa:	f7ff ff49 	bl	8006490 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	e000e400 	.word	0xe000e400
 800660c:	20000568 	.word	0x20000568
 8006610:	2000056c 	.word	0x2000056c
 8006614:	e000ed20 	.word	0xe000ed20
 8006618:	20000010 	.word	0x20000010

0800661c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006636:	4b0f      	ldr	r3, [pc, #60]	@ (8006674 <vPortEnterCritical+0x58>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	4a0d      	ldr	r2, [pc, #52]	@ (8006674 <vPortEnterCritical+0x58>)
 800663e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006640:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <vPortEnterCritical+0x58>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d110      	bne.n	800666a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006648:	4b0b      	ldr	r3, [pc, #44]	@ (8006678 <vPortEnterCritical+0x5c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00b      	beq.n	800666a <vPortEnterCritical+0x4e>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	603b      	str	r3, [r7, #0]
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	e7fd      	b.n	8006666 <vPortEnterCritical+0x4a>
	}
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr
 8006674:	20000010 	.word	0x20000010
 8006678:	e000ed04 	.word	0xe000ed04

0800667c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006682:	4b12      	ldr	r3, [pc, #72]	@ (80066cc <vPortExitCritical+0x50>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <vPortExitCritical+0x26>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	607b      	str	r3, [r7, #4]
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	e7fd      	b.n	800669e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066a2:	4b0a      	ldr	r3, [pc, #40]	@ (80066cc <vPortExitCritical+0x50>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	4a08      	ldr	r2, [pc, #32]	@ (80066cc <vPortExitCritical+0x50>)
 80066aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066ac:	4b07      	ldr	r3, [pc, #28]	@ (80066cc <vPortExitCritical+0x50>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d105      	bne.n	80066c0 <vPortExitCritical+0x44>
 80066b4:	2300      	movs	r3, #0
 80066b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	f383 8811 	msr	BASEPRI, r3
}
 80066be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000010 	.word	0x20000010

080066d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066d0:	f3ef 8009 	mrs	r0, PSP
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <pxCurrentTCBConst>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066e0:	6010      	str	r0, [r2, #0]
 80066e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80066e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80066ea:	f380 8811 	msr	BASEPRI, r0
 80066ee:	f7ff fa15 	bl	8005b1c <vTaskSwitchContext>
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f380 8811 	msr	BASEPRI, r0
 80066fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066fe:	6819      	ldr	r1, [r3, #0]
 8006700:	6808      	ldr	r0, [r1, #0]
 8006702:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006706:	f380 8809 	msr	PSP, r0
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	4770      	bx	lr

08006710 <pxCurrentTCBConst>:
 8006710:	2000043c 	.word	0x2000043c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop

08006718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	607b      	str	r3, [r7, #4]
}
 8006730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006732:	f7ff f935 	bl	80059a0 <xTaskIncrementTick>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800673c:	4b06      	ldr	r3, [pc, #24]	@ (8006758 <SysTick_Handler+0x40>)
 800673e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	2300      	movs	r3, #0
 8006746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006760:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <vPortSetupTimerInterrupt+0x30>)
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006766:	4b0a      	ldr	r3, [pc, #40]	@ (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800676c:	4b09      	ldr	r3, [pc, #36]	@ (8006794 <vPortSetupTimerInterrupt+0x38>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a09      	ldr	r2, [pc, #36]	@ (8006798 <vPortSetupTimerInterrupt+0x3c>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	099b      	lsrs	r3, r3, #6
 8006778:	4a08      	ldr	r2, [pc, #32]	@ (800679c <vPortSetupTimerInterrupt+0x40>)
 800677a:	3b01      	subs	r3, #1
 800677c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800677e:	4b03      	ldr	r3, [pc, #12]	@ (800678c <vPortSetupTimerInterrupt+0x30>)
 8006780:	2207      	movs	r2, #7
 8006782:	601a      	str	r2, [r3, #0]
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr
 800678c:	e000e010 	.word	0xe000e010
 8006790:	e000e018 	.word	0xe000e018
 8006794:	20000004 	.word	0x20000004
 8006798:	10624dd3 	.word	0x10624dd3
 800679c:	e000e014 	.word	0xe000e014

080067a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067a6:	f3ef 8305 	mrs	r3, IPSR
 80067aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b0f      	cmp	r3, #15
 80067b0:	d915      	bls.n	80067de <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067b2:	4a17      	ldr	r2, [pc, #92]	@ (8006810 <vPortValidateInterruptPriority+0x70>)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067bc:	4b15      	ldr	r3, [pc, #84]	@ (8006814 <vPortValidateInterruptPriority+0x74>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	7afa      	ldrb	r2, [r7, #11]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d20b      	bcs.n	80067de <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	607b      	str	r3, [r7, #4]
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	e7fd      	b.n	80067da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067de:	4b0e      	ldr	r3, [pc, #56]	@ (8006818 <vPortValidateInterruptPriority+0x78>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067e6:	4b0d      	ldr	r3, [pc, #52]	@ (800681c <vPortValidateInterruptPriority+0x7c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d90b      	bls.n	8006806 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	603b      	str	r3, [r7, #0]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <vPortValidateInterruptPriority+0x62>
	}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr
 8006810:	e000e3f0 	.word	0xe000e3f0
 8006814:	20000568 	.word	0x20000568
 8006818:	e000ed0c 	.word	0xe000ed0c
 800681c:	2000056c 	.word	0x2000056c

08006820 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08a      	sub	sp, #40	@ 0x28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006828:	2300      	movs	r3, #0
 800682a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800682c:	f7ff f80c 	bl	8005848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006830:	4b5a      	ldr	r3, [pc, #360]	@ (800699c <pvPortMalloc+0x17c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006838:	f000 f916 	bl	8006a68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800683c:	4b58      	ldr	r3, [pc, #352]	@ (80069a0 <pvPortMalloc+0x180>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4013      	ands	r3, r2
 8006844:	2b00      	cmp	r3, #0
 8006846:	f040 8090 	bne.w	800696a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01e      	beq.n	800688e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006850:	2208      	movs	r2, #8
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4413      	add	r3, r2
 8006856:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	2b00      	cmp	r3, #0
 8006860:	d015      	beq.n	800688e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f023 0307 	bic.w	r3, r3, #7
 8006868:	3308      	adds	r3, #8
 800686a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <pvPortMalloc+0x6e>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	617b      	str	r3, [r7, #20]
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	e7fd      	b.n	800688a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d06a      	beq.n	800696a <pvPortMalloc+0x14a>
 8006894:	4b43      	ldr	r3, [pc, #268]	@ (80069a4 <pvPortMalloc+0x184>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	429a      	cmp	r2, r3
 800689c:	d865      	bhi.n	800696a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800689e:	4b42      	ldr	r3, [pc, #264]	@ (80069a8 <pvPortMalloc+0x188>)
 80068a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068a2:	4b41      	ldr	r3, [pc, #260]	@ (80069a8 <pvPortMalloc+0x188>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068a8:	e004      	b.n	80068b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d903      	bls.n	80068c6 <pvPortMalloc+0xa6>
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f1      	bne.n	80068aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068c6:	4b35      	ldr	r3, [pc, #212]	@ (800699c <pvPortMalloc+0x17c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d04c      	beq.n	800696a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2208      	movs	r2, #8
 80068d6:	4413      	add	r3, r2
 80068d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	1ad2      	subs	r2, r2, r3
 80068ea:	2308      	movs	r3, #8
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d920      	bls.n	8006934 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4413      	add	r3, r2
 80068f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00b      	beq.n	800691c <pvPortMalloc+0xfc>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	613b      	str	r3, [r7, #16]
}
 8006916:	bf00      	nop
 8006918:	bf00      	nop
 800691a:	e7fd      	b.n	8006918 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	1ad2      	subs	r2, r2, r3
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800692e:	69b8      	ldr	r0, [r7, #24]
 8006930:	f000 f8fc 	bl	8006b2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006934:	4b1b      	ldr	r3, [pc, #108]	@ (80069a4 <pvPortMalloc+0x184>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	4a19      	ldr	r2, [pc, #100]	@ (80069a4 <pvPortMalloc+0x184>)
 8006940:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006942:	4b18      	ldr	r3, [pc, #96]	@ (80069a4 <pvPortMalloc+0x184>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4b19      	ldr	r3, [pc, #100]	@ (80069ac <pvPortMalloc+0x18c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d203      	bcs.n	8006956 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800694e:	4b15      	ldr	r3, [pc, #84]	@ (80069a4 <pvPortMalloc+0x184>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a16      	ldr	r2, [pc, #88]	@ (80069ac <pvPortMalloc+0x18c>)
 8006954:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	4b11      	ldr	r3, [pc, #68]	@ (80069a0 <pvPortMalloc+0x180>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	431a      	orrs	r2, r3
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800696a:	f7fe ff7b 	bl	8005864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <pvPortMalloc+0x170>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	60fb      	str	r3, [r7, #12]
}
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	e7fd      	b.n	800698c <pvPortMalloc+0x16c>
	return pvReturn;
 8006990:	69fb      	ldr	r3, [r7, #28]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3728      	adds	r7, #40	@ 0x28
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20004578 	.word	0x20004578
 80069a0:	20004584 	.word	0x20004584
 80069a4:	2000457c 	.word	0x2000457c
 80069a8:	20004570 	.word	0x20004570
 80069ac:	20004580 	.word	0x20004580

080069b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d04a      	beq.n	8006a58 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069c2:	2308      	movs	r3, #8
 80069c4:	425b      	negs	r3, r3
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4413      	add	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	4b22      	ldr	r3, [pc, #136]	@ (8006a60 <vPortFree+0xb0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4013      	ands	r3, r2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <vPortFree+0x46>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60fb      	str	r3, [r7, #12]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <vPortFree+0x66>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60bb      	str	r3, [r7, #8]
}
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
 8006a14:	e7fd      	b.n	8006a12 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	4b11      	ldr	r3, [pc, #68]	@ (8006a60 <vPortFree+0xb0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d019      	beq.n	8006a58 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d115      	bne.n	8006a58 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	4b0b      	ldr	r3, [pc, #44]	@ (8006a60 <vPortFree+0xb0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	401a      	ands	r2, r3
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a3c:	f7fe ff04 	bl	8005848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	4b07      	ldr	r3, [pc, #28]	@ (8006a64 <vPortFree+0xb4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4413      	add	r3, r2
 8006a4a:	4a06      	ldr	r2, [pc, #24]	@ (8006a64 <vPortFree+0xb4>)
 8006a4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a4e:	6938      	ldr	r0, [r7, #16]
 8006a50:	f000 f86c 	bl	8006b2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a54:	f7fe ff06 	bl	8005864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a58:	bf00      	nop
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20004584 	.word	0x20004584
 8006a64:	2000457c 	.word	0x2000457c

08006a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006a72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a74:	4b27      	ldr	r3, [pc, #156]	@ (8006b14 <prvHeapInit+0xac>)
 8006a76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00c      	beq.n	8006a9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3307      	adds	r3, #7
 8006a86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0307 	bic.w	r3, r3, #7
 8006a8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	4a1f      	ldr	r2, [pc, #124]	@ (8006b14 <prvHeapInit+0xac>)
 8006a98:	4413      	add	r3, r2
 8006a9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b18 <prvHeapInit+0xb0>)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8006b18 <prvHeapInit+0xb0>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ab4:	2208      	movs	r2, #8
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	1a9b      	subs	r3, r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0307 	bic.w	r3, r3, #7
 8006ac2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4a15      	ldr	r2, [pc, #84]	@ (8006b1c <prvHeapInit+0xb4>)
 8006ac8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006aca:	4b14      	ldr	r3, [pc, #80]	@ (8006b1c <prvHeapInit+0xb4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ad2:	4b12      	ldr	r3, [pc, #72]	@ (8006b1c <prvHeapInit+0xb4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	1ad2      	subs	r2, r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8006b1c <prvHeapInit+0xb4>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	4a0a      	ldr	r2, [pc, #40]	@ (8006b20 <prvHeapInit+0xb8>)
 8006af6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	4a09      	ldr	r2, [pc, #36]	@ (8006b24 <prvHeapInit+0xbc>)
 8006afe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b00:	4b09      	ldr	r3, [pc, #36]	@ (8006b28 <prvHeapInit+0xc0>)
 8006b02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006b06:	601a      	str	r2, [r3, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc80      	pop	{r7}
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20000570 	.word	0x20000570
 8006b18:	20004570 	.word	0x20004570
 8006b1c:	20004578 	.word	0x20004578
 8006b20:	20004580 	.word	0x20004580
 8006b24:	2000457c 	.word	0x2000457c
 8006b28:	20004584 	.word	0x20004584

08006b2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b34:	4b27      	ldr	r3, [pc, #156]	@ (8006bd4 <prvInsertBlockIntoFreeList+0xa8>)
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e002      	b.n	8006b40 <prvInsertBlockIntoFreeList+0x14>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d8f7      	bhi.n	8006b3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	4413      	add	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d108      	bne.n	8006b6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	441a      	add	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	441a      	add	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d118      	bne.n	8006bb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	4b14      	ldr	r3, [pc, #80]	@ (8006bd8 <prvInsertBlockIntoFreeList+0xac>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d00d      	beq.n	8006baa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	441a      	add	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	e008      	b.n	8006bbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006baa:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <prvInsertBlockIntoFreeList+0xac>)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	e003      	b.n	8006bbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d002      	beq.n	8006bca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr
 8006bd4:	20004570 	.word	0x20004570
 8006bd8:	20004578 	.word	0x20004578

08006bdc <memset>:
 8006bdc:	4603      	mov	r3, r0
 8006bde:	4402      	add	r2, r0
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d100      	bne.n	8006be6 <memset+0xa>
 8006be4:	4770      	bx	lr
 8006be6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bea:	e7f9      	b.n	8006be0 <memset+0x4>

08006bec <strcat>:
 8006bec:	4602      	mov	r2, r0
 8006bee:	b510      	push	{r4, lr}
 8006bf0:	7814      	ldrb	r4, [r2, #0]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	3201      	adds	r2, #1
 8006bf6:	2c00      	cmp	r4, #0
 8006bf8:	d1fa      	bne.n	8006bf0 <strcat+0x4>
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c00:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c04:	2a00      	cmp	r2, #0
 8006c06:	d1f9      	bne.n	8006bfc <strcat+0x10>
 8006c08:	bd10      	pop	{r4, pc}
	...

08006c0c <__libc_init_array>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	2600      	movs	r6, #0
 8006c10:	4d0c      	ldr	r5, [pc, #48]	@ (8006c44 <__libc_init_array+0x38>)
 8006c12:	4c0d      	ldr	r4, [pc, #52]	@ (8006c48 <__libc_init_array+0x3c>)
 8006c14:	1b64      	subs	r4, r4, r5
 8006c16:	10a4      	asrs	r4, r4, #2
 8006c18:	42a6      	cmp	r6, r4
 8006c1a:	d109      	bne.n	8006c30 <__libc_init_array+0x24>
 8006c1c:	f000 f828 	bl	8006c70 <_init>
 8006c20:	2600      	movs	r6, #0
 8006c22:	4d0a      	ldr	r5, [pc, #40]	@ (8006c4c <__libc_init_array+0x40>)
 8006c24:	4c0a      	ldr	r4, [pc, #40]	@ (8006c50 <__libc_init_array+0x44>)
 8006c26:	1b64      	subs	r4, r4, r5
 8006c28:	10a4      	asrs	r4, r4, #2
 8006c2a:	42a6      	cmp	r6, r4
 8006c2c:	d105      	bne.n	8006c3a <__libc_init_array+0x2e>
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c34:	4798      	blx	r3
 8006c36:	3601      	adds	r6, #1
 8006c38:	e7ee      	b.n	8006c18 <__libc_init_array+0xc>
 8006c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3e:	4798      	blx	r3
 8006c40:	3601      	adds	r6, #1
 8006c42:	e7f2      	b.n	8006c2a <__libc_init_array+0x1e>
 8006c44:	08006f40 	.word	0x08006f40
 8006c48:	08006f40 	.word	0x08006f40
 8006c4c:	08006f40 	.word	0x08006f40
 8006c50:	08006f44 	.word	0x08006f44

08006c54 <memcpy>:
 8006c54:	440a      	add	r2, r1
 8006c56:	4291      	cmp	r1, r2
 8006c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c5c:	d100      	bne.n	8006c60 <memcpy+0xc>
 8006c5e:	4770      	bx	lr
 8006c60:	b510      	push	{r4, lr}
 8006c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c66:	4291      	cmp	r1, r2
 8006c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c6c:	d1f9      	bne.n	8006c62 <memcpy+0xe>
 8006c6e:	bd10      	pop	{r4, pc}

08006c70 <_init>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr

08006c7c <_fini>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr
