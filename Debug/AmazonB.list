
AmazonB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079a4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08007ae4  08007ae4  00008ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc0  08007cc0  00009078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007cc0  08007cc0  00008cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc8  08007cc8  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc8  08007cc8  00008cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ccc  08007ccc  00008ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007cd0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026bc  20000078  08007d48  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002734  08007d48  00009734  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129cf  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa7  00000000  00000000  0001ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001ea18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5c  00000000  00000000  0001fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e4b  00000000  00000000  000208cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013742  00000000  00000000  00039717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009caca  00000000  00000000  0004ce59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054b8  00000000  00000000  000e9968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000eee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007acc 	.word	0x08007acc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007acc 	.word	0x08007acc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_frsub>:
 8000190:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__addsf3>
 8000196:	bf00      	nop

08000198 <__aeabi_fsub>:
 8000198:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800019c <__addsf3>:
 800019c:	0042      	lsls	r2, r0, #1
 800019e:	bf1f      	itttt	ne
 80001a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001a4:	ea92 0f03 	teqne	r2, r3
 80001a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001b0:	d06a      	beq.n	8000288 <__addsf3+0xec>
 80001b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001ba:	bfc1      	itttt	gt
 80001bc:	18d2      	addgt	r2, r2, r3
 80001be:	4041      	eorgt	r1, r0
 80001c0:	4048      	eorgt	r0, r1
 80001c2:	4041      	eorgt	r1, r0
 80001c4:	bfb8      	it	lt
 80001c6:	425b      	neglt	r3, r3
 80001c8:	2b19      	cmp	r3, #25
 80001ca:	bf88      	it	hi
 80001cc:	4770      	bxhi	lr
 80001ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001da:	bf18      	it	ne
 80001dc:	4240      	negne	r0, r0
 80001de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ea:	bf18      	it	ne
 80001ec:	4249      	negne	r1, r1
 80001ee:	ea92 0f03 	teq	r2, r3
 80001f2:	d03f      	beq.n	8000274 <__addsf3+0xd8>
 80001f4:	f1a2 0201 	sub.w	r2, r2, #1
 80001f8:	fa41 fc03 	asr.w	ip, r1, r3
 80001fc:	eb10 000c 	adds.w	r0, r0, ip
 8000200:	f1c3 0320 	rsb	r3, r3, #32
 8000204:	fa01 f103 	lsl.w	r1, r1, r3
 8000208:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800020c:	d502      	bpl.n	8000214 <__addsf3+0x78>
 800020e:	4249      	negs	r1, r1
 8000210:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000214:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000218:	d313      	bcc.n	8000242 <__addsf3+0xa6>
 800021a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800021e:	d306      	bcc.n	800022e <__addsf3+0x92>
 8000220:	0840      	lsrs	r0, r0, #1
 8000222:	ea4f 0131 	mov.w	r1, r1, rrx
 8000226:	f102 0201 	add.w	r2, r2, #1
 800022a:	2afe      	cmp	r2, #254	@ 0xfe
 800022c:	d251      	bcs.n	80002d2 <__addsf3+0x136>
 800022e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000232:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000236:	bf08      	it	eq
 8000238:	f020 0001 	biceq.w	r0, r0, #1
 800023c:	ea40 0003 	orr.w	r0, r0, r3
 8000240:	4770      	bx	lr
 8000242:	0049      	lsls	r1, r1, #1
 8000244:	eb40 0000 	adc.w	r0, r0, r0
 8000248:	3a01      	subs	r2, #1
 800024a:	bf28      	it	cs
 800024c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000250:	d2ed      	bcs.n	800022e <__addsf3+0x92>
 8000252:	fab0 fc80 	clz	ip, r0
 8000256:	f1ac 0c08 	sub.w	ip, ip, #8
 800025a:	ebb2 020c 	subs.w	r2, r2, ip
 800025e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000262:	bfaa      	itet	ge
 8000264:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000268:	4252      	neglt	r2, r2
 800026a:	4318      	orrge	r0, r3
 800026c:	bfbc      	itt	lt
 800026e:	40d0      	lsrlt	r0, r2
 8000270:	4318      	orrlt	r0, r3
 8000272:	4770      	bx	lr
 8000274:	f092 0f00 	teq	r2, #0
 8000278:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800027c:	bf06      	itte	eq
 800027e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000282:	3201      	addeq	r2, #1
 8000284:	3b01      	subne	r3, #1
 8000286:	e7b5      	b.n	80001f4 <__addsf3+0x58>
 8000288:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800028c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000290:	bf18      	it	ne
 8000292:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000296:	d021      	beq.n	80002dc <__addsf3+0x140>
 8000298:	ea92 0f03 	teq	r2, r3
 800029c:	d004      	beq.n	80002a8 <__addsf3+0x10c>
 800029e:	f092 0f00 	teq	r2, #0
 80002a2:	bf08      	it	eq
 80002a4:	4608      	moveq	r0, r1
 80002a6:	4770      	bx	lr
 80002a8:	ea90 0f01 	teq	r0, r1
 80002ac:	bf1c      	itt	ne
 80002ae:	2000      	movne	r0, #0
 80002b0:	4770      	bxne	lr
 80002b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80002b6:	d104      	bne.n	80002c2 <__addsf3+0x126>
 80002b8:	0040      	lsls	r0, r0, #1
 80002ba:	bf28      	it	cs
 80002bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002c0:	4770      	bx	lr
 80002c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002c6:	bf3c      	itt	cc
 80002c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002cc:	4770      	bxcc	lr
 80002ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002da:	4770      	bx	lr
 80002dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002e0:	bf16      	itet	ne
 80002e2:	4608      	movne	r0, r1
 80002e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002e8:	4601      	movne	r1, r0
 80002ea:	0242      	lsls	r2, r0, #9
 80002ec:	bf06      	itte	eq
 80002ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002f2:	ea90 0f01 	teqeq	r0, r1
 80002f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002fa:	4770      	bx	lr

080002fc <__aeabi_ui2f>:
 80002fc:	f04f 0300 	mov.w	r3, #0
 8000300:	e004      	b.n	800030c <__aeabi_i2f+0x8>
 8000302:	bf00      	nop

08000304 <__aeabi_i2f>:
 8000304:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000308:	bf48      	it	mi
 800030a:	4240      	negmi	r0, r0
 800030c:	ea5f 0c00 	movs.w	ip, r0
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000318:	4601      	mov	r1, r0
 800031a:	f04f 0000 	mov.w	r0, #0
 800031e:	e01c      	b.n	800035a <__aeabi_l2f+0x2a>

08000320 <__aeabi_ul2f>:
 8000320:	ea50 0201 	orrs.w	r2, r0, r1
 8000324:	bf08      	it	eq
 8000326:	4770      	bxeq	lr
 8000328:	f04f 0300 	mov.w	r3, #0
 800032c:	e00a      	b.n	8000344 <__aeabi_l2f+0x14>
 800032e:	bf00      	nop

08000330 <__aeabi_l2f>:
 8000330:	ea50 0201 	orrs.w	r2, r0, r1
 8000334:	bf08      	it	eq
 8000336:	4770      	bxeq	lr
 8000338:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800033c:	d502      	bpl.n	8000344 <__aeabi_l2f+0x14>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	ea5f 0c01 	movs.w	ip, r1
 8000348:	bf02      	ittt	eq
 800034a:	4684      	moveq	ip, r0
 800034c:	4601      	moveq	r1, r0
 800034e:	2000      	moveq	r0, #0
 8000350:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000354:	bf08      	it	eq
 8000356:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800035a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800035e:	fabc f28c 	clz	r2, ip
 8000362:	3a08      	subs	r2, #8
 8000364:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000368:	db10      	blt.n	800038c <__aeabi_l2f+0x5c>
 800036a:	fa01 fc02 	lsl.w	ip, r1, r2
 800036e:	4463      	add	r3, ip
 8000370:	fa00 fc02 	lsl.w	ip, r0, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800037c:	fa20 f202 	lsr.w	r2, r0, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	f020 0001 	biceq.w	r0, r0, #1
 800038a:	4770      	bx	lr
 800038c:	f102 0220 	add.w	r2, r2, #32
 8000390:	fa01 fc02 	lsl.w	ip, r1, r2
 8000394:	f1c2 0220 	rsb	r2, r2, #32
 8000398:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800039c:	fa21 f202 	lsr.w	r2, r1, r2
 80003a0:	eb43 0002 	adc.w	r0, r3, r2
 80003a4:	bf08      	it	eq
 80003a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003aa:	4770      	bx	lr

080003ac <__aeabi_fmul>:
 80003ac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003b4:	bf1e      	ittt	ne
 80003b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ba:	ea92 0f0c 	teqne	r2, ip
 80003be:	ea93 0f0c 	teqne	r3, ip
 80003c2:	d06f      	beq.n	80004a4 <__aeabi_fmul+0xf8>
 80003c4:	441a      	add	r2, r3
 80003c6:	ea80 0c01 	eor.w	ip, r0, r1
 80003ca:	0240      	lsls	r0, r0, #9
 80003cc:	bf18      	it	ne
 80003ce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003d2:	d01e      	beq.n	8000412 <__aeabi_fmul+0x66>
 80003d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003d8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003dc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003e0:	fba0 3101 	umull	r3, r1, r0, r1
 80003e4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003e8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ec:	bf3e      	ittt	cc
 80003ee:	0049      	lslcc	r1, r1, #1
 80003f0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003f4:	005b      	lslcc	r3, r3, #1
 80003f6:	ea40 0001 	orr.w	r0, r0, r1
 80003fa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003fe:	2afd      	cmp	r2, #253	@ 0xfd
 8000400:	d81d      	bhi.n	800043e <__aeabi_fmul+0x92>
 8000402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000406:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800040a:	bf08      	it	eq
 800040c:	f020 0001 	biceq.w	r0, r0, #1
 8000410:	4770      	bx	lr
 8000412:	f090 0f00 	teq	r0, #0
 8000416:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800041a:	bf08      	it	eq
 800041c:	0249      	lsleq	r1, r1, #9
 800041e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000422:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000426:	3a7f      	subs	r2, #127	@ 0x7f
 8000428:	bfc2      	ittt	gt
 800042a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800042e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000432:	4770      	bxgt	lr
 8000434:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000438:	f04f 0300 	mov.w	r3, #0
 800043c:	3a01      	subs	r2, #1
 800043e:	dc5d      	bgt.n	80004fc <__aeabi_fmul+0x150>
 8000440:	f112 0f19 	cmn.w	r2, #25
 8000444:	bfdc      	itt	le
 8000446:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800044a:	4770      	bxle	lr
 800044c:	f1c2 0200 	rsb	r2, r2, #0
 8000450:	0041      	lsls	r1, r0, #1
 8000452:	fa21 f102 	lsr.w	r1, r1, r2
 8000456:	f1c2 0220 	rsb	r2, r2, #32
 800045a:	fa00 fc02 	lsl.w	ip, r0, r2
 800045e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000462:	f140 0000 	adc.w	r0, r0, #0
 8000466:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800046a:	bf08      	it	eq
 800046c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000470:	4770      	bx	lr
 8000472:	f092 0f00 	teq	r2, #0
 8000476:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800047a:	bf02      	ittt	eq
 800047c:	0040      	lsleq	r0, r0, #1
 800047e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000482:	3a01      	subeq	r2, #1
 8000484:	d0f9      	beq.n	800047a <__aeabi_fmul+0xce>
 8000486:	ea40 000c 	orr.w	r0, r0, ip
 800048a:	f093 0f00 	teq	r3, #0
 800048e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000492:	bf02      	ittt	eq
 8000494:	0049      	lsleq	r1, r1, #1
 8000496:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800049a:	3b01      	subeq	r3, #1
 800049c:	d0f9      	beq.n	8000492 <__aeabi_fmul+0xe6>
 800049e:	ea41 010c 	orr.w	r1, r1, ip
 80004a2:	e78f      	b.n	80003c4 <__aeabi_fmul+0x18>
 80004a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a8:	ea92 0f0c 	teq	r2, ip
 80004ac:	bf18      	it	ne
 80004ae:	ea93 0f0c 	teqne	r3, ip
 80004b2:	d00a      	beq.n	80004ca <__aeabi_fmul+0x11e>
 80004b4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004b8:	bf18      	it	ne
 80004ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004be:	d1d8      	bne.n	8000472 <__aeabi_fmul+0xc6>
 80004c0:	ea80 0001 	eor.w	r0, r0, r1
 80004c4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c8:	4770      	bx	lr
 80004ca:	f090 0f00 	teq	r0, #0
 80004ce:	bf17      	itett	ne
 80004d0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004d4:	4608      	moveq	r0, r1
 80004d6:	f091 0f00 	teqne	r1, #0
 80004da:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004de:	d014      	beq.n	800050a <__aeabi_fmul+0x15e>
 80004e0:	ea92 0f0c 	teq	r2, ip
 80004e4:	d101      	bne.n	80004ea <__aeabi_fmul+0x13e>
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	d10f      	bne.n	800050a <__aeabi_fmul+0x15e>
 80004ea:	ea93 0f0c 	teq	r3, ip
 80004ee:	d103      	bne.n	80004f8 <__aeabi_fmul+0x14c>
 80004f0:	024b      	lsls	r3, r1, #9
 80004f2:	bf18      	it	ne
 80004f4:	4608      	movne	r0, r1
 80004f6:	d108      	bne.n	800050a <__aeabi_fmul+0x15e>
 80004f8:	ea80 0001 	eor.w	r0, r0, r1
 80004fc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000500:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000504:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000508:	4770      	bx	lr
 800050a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800050e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000512:	4770      	bx	lr

08000514 <__aeabi_fdiv>:
 8000514:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000518:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800051c:	bf1e      	ittt	ne
 800051e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000522:	ea92 0f0c 	teqne	r2, ip
 8000526:	ea93 0f0c 	teqne	r3, ip
 800052a:	d069      	beq.n	8000600 <__aeabi_fdiv+0xec>
 800052c:	eba2 0203 	sub.w	r2, r2, r3
 8000530:	ea80 0c01 	eor.w	ip, r0, r1
 8000534:	0249      	lsls	r1, r1, #9
 8000536:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800053a:	d037      	beq.n	80005ac <__aeabi_fdiv+0x98>
 800053c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000540:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000544:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000548:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800054c:	428b      	cmp	r3, r1
 800054e:	bf38      	it	cc
 8000550:	005b      	lslcc	r3, r3, #1
 8000552:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000556:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800055a:	428b      	cmp	r3, r1
 800055c:	bf24      	itt	cs
 800055e:	1a5b      	subcs	r3, r3, r1
 8000560:	ea40 000c 	orrcs.w	r0, r0, ip
 8000564:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000568:	bf24      	itt	cs
 800056a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800056e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000572:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000576:	bf24      	itt	cs
 8000578:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800057c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000580:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000584:	bf24      	itt	cs
 8000586:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800058a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	bf18      	it	ne
 8000592:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000596:	d1e0      	bne.n	800055a <__aeabi_fdiv+0x46>
 8000598:	2afd      	cmp	r2, #253	@ 0xfd
 800059a:	f63f af50 	bhi.w	800043e <__aeabi_fmul+0x92>
 800059e:	428b      	cmp	r3, r1
 80005a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005a4:	bf08      	it	eq
 80005a6:	f020 0001 	biceq.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80005b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005b4:	327f      	adds	r2, #127	@ 0x7f
 80005b6:	bfc2      	ittt	gt
 80005b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80005bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005c0:	4770      	bxgt	lr
 80005c2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005c6:	f04f 0300 	mov.w	r3, #0
 80005ca:	3a01      	subs	r2, #1
 80005cc:	e737      	b.n	800043e <__aeabi_fmul+0x92>
 80005ce:	f092 0f00 	teq	r2, #0
 80005d2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005d6:	bf02      	ittt	eq
 80005d8:	0040      	lsleq	r0, r0, #1
 80005da:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005de:	3a01      	subeq	r2, #1
 80005e0:	d0f9      	beq.n	80005d6 <__aeabi_fdiv+0xc2>
 80005e2:	ea40 000c 	orr.w	r0, r0, ip
 80005e6:	f093 0f00 	teq	r3, #0
 80005ea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ee:	bf02      	ittt	eq
 80005f0:	0049      	lsleq	r1, r1, #1
 80005f2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005f6:	3b01      	subeq	r3, #1
 80005f8:	d0f9      	beq.n	80005ee <__aeabi_fdiv+0xda>
 80005fa:	ea41 010c 	orr.w	r1, r1, ip
 80005fe:	e795      	b.n	800052c <__aeabi_fdiv+0x18>
 8000600:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000604:	ea92 0f0c 	teq	r2, ip
 8000608:	d108      	bne.n	800061c <__aeabi_fdiv+0x108>
 800060a:	0242      	lsls	r2, r0, #9
 800060c:	f47f af7d 	bne.w	800050a <__aeabi_fmul+0x15e>
 8000610:	ea93 0f0c 	teq	r3, ip
 8000614:	f47f af70 	bne.w	80004f8 <__aeabi_fmul+0x14c>
 8000618:	4608      	mov	r0, r1
 800061a:	e776      	b.n	800050a <__aeabi_fmul+0x15e>
 800061c:	ea93 0f0c 	teq	r3, ip
 8000620:	d104      	bne.n	800062c <__aeabi_fdiv+0x118>
 8000622:	024b      	lsls	r3, r1, #9
 8000624:	f43f af4c 	beq.w	80004c0 <__aeabi_fmul+0x114>
 8000628:	4608      	mov	r0, r1
 800062a:	e76e      	b.n	800050a <__aeabi_fmul+0x15e>
 800062c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000630:	bf18      	it	ne
 8000632:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000636:	d1ca      	bne.n	80005ce <__aeabi_fdiv+0xba>
 8000638:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800063c:	f47f af5c 	bne.w	80004f8 <__aeabi_fmul+0x14c>
 8000640:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000644:	f47f af3c 	bne.w	80004c0 <__aeabi_fmul+0x114>
 8000648:	e75f      	b.n	800050a <__aeabi_fmul+0x15e>
 800064a:	bf00      	nop

0800064c <__gesf2>:
 800064c:	f04f 3cff 	mov.w	ip, #4294967295
 8000650:	e006      	b.n	8000660 <__cmpsf2+0x4>
 8000652:	bf00      	nop

08000654 <__lesf2>:
 8000654:	f04f 0c01 	mov.w	ip, #1
 8000658:	e002      	b.n	8000660 <__cmpsf2+0x4>
 800065a:	bf00      	nop

0800065c <__cmpsf2>:
 800065c:	f04f 0c01 	mov.w	ip, #1
 8000660:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000664:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000668:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	bf18      	it	ne
 8000672:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000676:	d011      	beq.n	800069c <__cmpsf2+0x40>
 8000678:	b001      	add	sp, #4
 800067a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800067e:	bf18      	it	ne
 8000680:	ea90 0f01 	teqne	r0, r1
 8000684:	bf58      	it	pl
 8000686:	ebb2 0003 	subspl.w	r0, r2, r3
 800068a:	bf88      	it	hi
 800068c:	17c8      	asrhi	r0, r1, #31
 800068e:	bf38      	it	cc
 8000690:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000694:	bf18      	it	ne
 8000696:	f040 0001 	orrne.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006a0:	d102      	bne.n	80006a8 <__cmpsf2+0x4c>
 80006a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80006a6:	d105      	bne.n	80006b4 <__cmpsf2+0x58>
 80006a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80006ac:	d1e4      	bne.n	8000678 <__cmpsf2+0x1c>
 80006ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80006b2:	d0e1      	beq.n	8000678 <__cmpsf2+0x1c>
 80006b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__aeabi_cfrcmple>:
 80006bc:	4684      	mov	ip, r0
 80006be:	4608      	mov	r0, r1
 80006c0:	4661      	mov	r1, ip
 80006c2:	e7ff      	b.n	80006c4 <__aeabi_cfcmpeq>

080006c4 <__aeabi_cfcmpeq>:
 80006c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006c6:	f7ff ffc9 	bl	800065c <__cmpsf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006d4 <__aeabi_fcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cfcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cfcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cfcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffd2 	bl	80006bc <__aeabi_cfrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_fcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc8 	bl	80006bc <__aeabi_cfrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_f2iz>:
 8000738:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800073c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000740:	d30f      	bcc.n	8000762 <__aeabi_f2iz+0x2a>
 8000742:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000746:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800074a:	d90d      	bls.n	8000768 <__aeabi_f2iz+0x30>
 800074c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000750:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000754:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000758:	fa23 f002 	lsr.w	r0, r3, r2
 800075c:	bf18      	it	ne
 800075e:	4240      	negne	r0, r0
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2iz+0x3a>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d105      	bne.n	800077e <__aeabi_f2iz+0x46>
 8000772:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000776:	bf08      	it	eq
 8000778:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800077c:	4770      	bx	lr
 800077e:	f04f 0000 	mov.w	r0, #0
 8000782:	4770      	bx	lr

08000784 <__aeabi_uldivmod>:
 8000784:	b953      	cbnz	r3, 800079c <__aeabi_uldivmod+0x18>
 8000786:	b94a      	cbnz	r2, 800079c <__aeabi_uldivmod+0x18>
 8000788:	2900      	cmp	r1, #0
 800078a:	bf08      	it	eq
 800078c:	2800      	cmpeq	r0, #0
 800078e:	bf1c      	itt	ne
 8000790:	f04f 31ff 	movne.w	r1, #4294967295
 8000794:	f04f 30ff 	movne.w	r0, #4294967295
 8000798:	f000 b98c 	b.w	8000ab4 <__aeabi_idiv0>
 800079c:	f1ad 0c08 	sub.w	ip, sp, #8
 80007a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007a4:	f000 f806 	bl	80007b4 <__udivmoddi4>
 80007a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b0:	b004      	add	sp, #16
 80007b2:	4770      	bx	lr

080007b4 <__udivmoddi4>:
 80007b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007b8:	9d08      	ldr	r5, [sp, #32]
 80007ba:	468e      	mov	lr, r1
 80007bc:	4604      	mov	r4, r0
 80007be:	4688      	mov	r8, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14a      	bne.n	800085a <__udivmoddi4+0xa6>
 80007c4:	428a      	cmp	r2, r1
 80007c6:	4617      	mov	r7, r2
 80007c8:	d962      	bls.n	8000890 <__udivmoddi4+0xdc>
 80007ca:	fab2 f682 	clz	r6, r2
 80007ce:	b14e      	cbz	r6, 80007e4 <__udivmoddi4+0x30>
 80007d0:	f1c6 0320 	rsb	r3, r6, #32
 80007d4:	fa01 f806 	lsl.w	r8, r1, r6
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	40b7      	lsls	r7, r6
 80007de:	ea43 0808 	orr.w	r8, r3, r8
 80007e2:	40b4      	lsls	r4, r6
 80007e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80007ec:	fa1f fc87 	uxth.w	ip, r7
 80007f0:	fb0e 8811 	mls	r8, lr, r1, r8
 80007f4:	fb01 f20c 	mul.w	r2, r1, ip
 80007f8:	0c23      	lsrs	r3, r4, #16
 80007fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007fe:	429a      	cmp	r2, r3
 8000800:	d909      	bls.n	8000816 <__udivmoddi4+0x62>
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	f101 30ff 	add.w	r0, r1, #4294967295
 8000808:	f080 80eb 	bcs.w	80009e2 <__udivmoddi4+0x22e>
 800080c:	429a      	cmp	r2, r3
 800080e:	f240 80e8 	bls.w	80009e2 <__udivmoddi4+0x22e>
 8000812:	3902      	subs	r1, #2
 8000814:	443b      	add	r3, r7
 8000816:	1a9a      	subs	r2, r3, r2
 8000818:	fbb2 f0fe 	udiv	r0, r2, lr
 800081c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000820:	fb00 fc0c 	mul.w	ip, r0, ip
 8000824:	b2a3      	uxth	r3, r4
 8000826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800082a:	459c      	cmp	ip, r3
 800082c:	d909      	bls.n	8000842 <__udivmoddi4+0x8e>
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	f100 32ff 	add.w	r2, r0, #4294967295
 8000834:	f080 80d7 	bcs.w	80009e6 <__udivmoddi4+0x232>
 8000838:	459c      	cmp	ip, r3
 800083a:	f240 80d4 	bls.w	80009e6 <__udivmoddi4+0x232>
 800083e:	443b      	add	r3, r7
 8000840:	3802      	subs	r0, #2
 8000842:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000846:	2100      	movs	r1, #0
 8000848:	eba3 030c 	sub.w	r3, r3, ip
 800084c:	b11d      	cbz	r5, 8000856 <__udivmoddi4+0xa2>
 800084e:	2200      	movs	r2, #0
 8000850:	40f3      	lsrs	r3, r6
 8000852:	e9c5 3200 	strd	r3, r2, [r5]
 8000856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800085a:	428b      	cmp	r3, r1
 800085c:	d905      	bls.n	800086a <__udivmoddi4+0xb6>
 800085e:	b10d      	cbz	r5, 8000864 <__udivmoddi4+0xb0>
 8000860:	e9c5 0100 	strd	r0, r1, [r5]
 8000864:	2100      	movs	r1, #0
 8000866:	4608      	mov	r0, r1
 8000868:	e7f5      	b.n	8000856 <__udivmoddi4+0xa2>
 800086a:	fab3 f183 	clz	r1, r3
 800086e:	2900      	cmp	r1, #0
 8000870:	d146      	bne.n	8000900 <__udivmoddi4+0x14c>
 8000872:	4573      	cmp	r3, lr
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xc8>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 8108 	bhi.w	8000a8c <__udivmoddi4+0x2d8>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000882:	2001      	movs	r0, #1
 8000884:	4690      	mov	r8, r2
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e5      	beq.n	8000856 <__udivmoddi4+0xa2>
 800088a:	e9c5 4800 	strd	r4, r8, [r5]
 800088e:	e7e2      	b.n	8000856 <__udivmoddi4+0xa2>
 8000890:	2a00      	cmp	r2, #0
 8000892:	f000 8091 	beq.w	80009b8 <__udivmoddi4+0x204>
 8000896:	fab2 f682 	clz	r6, r2
 800089a:	2e00      	cmp	r6, #0
 800089c:	f040 80a5 	bne.w	80009ea <__udivmoddi4+0x236>
 80008a0:	1a8a      	subs	r2, r1, r2
 80008a2:	2101      	movs	r1, #1
 80008a4:	0c03      	lsrs	r3, r0, #16
 80008a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008aa:	b280      	uxth	r0, r0
 80008ac:	b2bc      	uxth	r4, r7
 80008ae:	fbb2 fcfe 	udiv	ip, r2, lr
 80008b2:	fb0e 221c 	mls	r2, lr, ip, r2
 80008b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ba:	fb04 f20c 	mul.w	r2, r4, ip
 80008be:	429a      	cmp	r2, r3
 80008c0:	d907      	bls.n	80008d2 <__udivmoddi4+0x11e>
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008c8:	d202      	bcs.n	80008d0 <__udivmoddi4+0x11c>
 80008ca:	429a      	cmp	r2, r3
 80008cc:	f200 80e3 	bhi.w	8000a96 <__udivmoddi4+0x2e2>
 80008d0:	46c4      	mov	ip, r8
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	fbb3 f2fe 	udiv	r2, r3, lr
 80008d8:	fb0e 3312 	mls	r3, lr, r2, r3
 80008dc:	fb02 f404 	mul.w	r4, r2, r4
 80008e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008e4:	429c      	cmp	r4, r3
 80008e6:	d907      	bls.n	80008f8 <__udivmoddi4+0x144>
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	f102 30ff 	add.w	r0, r2, #4294967295
 80008ee:	d202      	bcs.n	80008f6 <__udivmoddi4+0x142>
 80008f0:	429c      	cmp	r4, r3
 80008f2:	f200 80cd 	bhi.w	8000a90 <__udivmoddi4+0x2dc>
 80008f6:	4602      	mov	r2, r0
 80008f8:	1b1b      	subs	r3, r3, r4
 80008fa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008fe:	e7a5      	b.n	800084c <__udivmoddi4+0x98>
 8000900:	f1c1 0620 	rsb	r6, r1, #32
 8000904:	408b      	lsls	r3, r1
 8000906:	fa22 f706 	lsr.w	r7, r2, r6
 800090a:	431f      	orrs	r7, r3
 800090c:	fa2e fa06 	lsr.w	sl, lr, r6
 8000910:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000914:	fbba f8f9 	udiv	r8, sl, r9
 8000918:	fa0e fe01 	lsl.w	lr, lr, r1
 800091c:	fa20 f306 	lsr.w	r3, r0, r6
 8000920:	fb09 aa18 	mls	sl, r9, r8, sl
 8000924:	fa1f fc87 	uxth.w	ip, r7
 8000928:	ea43 030e 	orr.w	r3, r3, lr
 800092c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000930:	fb08 f00c 	mul.w	r0, r8, ip
 8000934:	0c1c      	lsrs	r4, r3, #16
 8000936:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800093a:	42a0      	cmp	r0, r4
 800093c:	fa02 f201 	lsl.w	r2, r2, r1
 8000940:	d90a      	bls.n	8000958 <__udivmoddi4+0x1a4>
 8000942:	193c      	adds	r4, r7, r4
 8000944:	f108 3aff 	add.w	sl, r8, #4294967295
 8000948:	f080 809e 	bcs.w	8000a88 <__udivmoddi4+0x2d4>
 800094c:	42a0      	cmp	r0, r4
 800094e:	f240 809b 	bls.w	8000a88 <__udivmoddi4+0x2d4>
 8000952:	f1a8 0802 	sub.w	r8, r8, #2
 8000956:	443c      	add	r4, r7
 8000958:	1a24      	subs	r4, r4, r0
 800095a:	b298      	uxth	r0, r3
 800095c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000960:	fb09 4413 	mls	r4, r9, r3, r4
 8000964:	fb03 fc0c 	mul.w	ip, r3, ip
 8000968:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800096c:	45a4      	cmp	ip, r4
 800096e:	d909      	bls.n	8000984 <__udivmoddi4+0x1d0>
 8000970:	193c      	adds	r4, r7, r4
 8000972:	f103 30ff 	add.w	r0, r3, #4294967295
 8000976:	f080 8085 	bcs.w	8000a84 <__udivmoddi4+0x2d0>
 800097a:	45a4      	cmp	ip, r4
 800097c:	f240 8082 	bls.w	8000a84 <__udivmoddi4+0x2d0>
 8000980:	3b02      	subs	r3, #2
 8000982:	443c      	add	r4, r7
 8000984:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000988:	eba4 040c 	sub.w	r4, r4, ip
 800098c:	fba0 8c02 	umull	r8, ip, r0, r2
 8000990:	4564      	cmp	r4, ip
 8000992:	4643      	mov	r3, r8
 8000994:	46e1      	mov	r9, ip
 8000996:	d364      	bcc.n	8000a62 <__udivmoddi4+0x2ae>
 8000998:	d061      	beq.n	8000a5e <__udivmoddi4+0x2aa>
 800099a:	b15d      	cbz	r5, 80009b4 <__udivmoddi4+0x200>
 800099c:	ebbe 0203 	subs.w	r2, lr, r3
 80009a0:	eb64 0409 	sbc.w	r4, r4, r9
 80009a4:	fa04 f606 	lsl.w	r6, r4, r6
 80009a8:	fa22 f301 	lsr.w	r3, r2, r1
 80009ac:	431e      	orrs	r6, r3
 80009ae:	40cc      	lsrs	r4, r1
 80009b0:	e9c5 6400 	strd	r6, r4, [r5]
 80009b4:	2100      	movs	r1, #0
 80009b6:	e74e      	b.n	8000856 <__udivmoddi4+0xa2>
 80009b8:	fbb1 fcf2 	udiv	ip, r1, r2
 80009bc:	0c01      	lsrs	r1, r0, #16
 80009be:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009c2:	b280      	uxth	r0, r0
 80009c4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009c8:	463b      	mov	r3, r7
 80009ca:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ce:	4638      	mov	r0, r7
 80009d0:	463c      	mov	r4, r7
 80009d2:	46b8      	mov	r8, r7
 80009d4:	46be      	mov	lr, r7
 80009d6:	2620      	movs	r6, #32
 80009d8:	eba2 0208 	sub.w	r2, r2, r8
 80009dc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009e0:	e765      	b.n	80008ae <__udivmoddi4+0xfa>
 80009e2:	4601      	mov	r1, r0
 80009e4:	e717      	b.n	8000816 <__udivmoddi4+0x62>
 80009e6:	4610      	mov	r0, r2
 80009e8:	e72b      	b.n	8000842 <__udivmoddi4+0x8e>
 80009ea:	f1c6 0120 	rsb	r1, r6, #32
 80009ee:	fa2e fc01 	lsr.w	ip, lr, r1
 80009f2:	40b7      	lsls	r7, r6
 80009f4:	fa0e fe06 	lsl.w	lr, lr, r6
 80009f8:	fa20 f101 	lsr.w	r1, r0, r1
 80009fc:	ea41 010e 	orr.w	r1, r1, lr
 8000a00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a04:	fbbc f8fe 	udiv	r8, ip, lr
 8000a08:	b2bc      	uxth	r4, r7
 8000a0a:	fb0e cc18 	mls	ip, lr, r8, ip
 8000a0e:	fb08 f904 	mul.w	r9, r8, r4
 8000a12:	0c0a      	lsrs	r2, r1, #16
 8000a14:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a18:	40b0      	lsls	r0, r6
 8000a1a:	4591      	cmp	r9, r2
 8000a1c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a20:	b280      	uxth	r0, r0
 8000a22:	d93e      	bls.n	8000aa2 <__udivmoddi4+0x2ee>
 8000a24:	18ba      	adds	r2, r7, r2
 8000a26:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a2a:	d201      	bcs.n	8000a30 <__udivmoddi4+0x27c>
 8000a2c:	4591      	cmp	r9, r2
 8000a2e:	d81f      	bhi.n	8000a70 <__udivmoddi4+0x2bc>
 8000a30:	eba2 0209 	sub.w	r2, r2, r9
 8000a34:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a38:	fb09 f804 	mul.w	r8, r9, r4
 8000a3c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000a40:	b28a      	uxth	r2, r1
 8000a42:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000a46:	4542      	cmp	r2, r8
 8000a48:	d229      	bcs.n	8000a9e <__udivmoddi4+0x2ea>
 8000a4a:	18ba      	adds	r2, r7, r2
 8000a4c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a50:	d2c2      	bcs.n	80009d8 <__udivmoddi4+0x224>
 8000a52:	4542      	cmp	r2, r8
 8000a54:	d2c0      	bcs.n	80009d8 <__udivmoddi4+0x224>
 8000a56:	f1a9 0102 	sub.w	r1, r9, #2
 8000a5a:	443a      	add	r2, r7
 8000a5c:	e7bc      	b.n	80009d8 <__udivmoddi4+0x224>
 8000a5e:	45c6      	cmp	lr, r8
 8000a60:	d29b      	bcs.n	800099a <__udivmoddi4+0x1e6>
 8000a62:	ebb8 0302 	subs.w	r3, r8, r2
 8000a66:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	46e1      	mov	r9, ip
 8000a6e:	e794      	b.n	800099a <__udivmoddi4+0x1e6>
 8000a70:	eba7 0909 	sub.w	r9, r7, r9
 8000a74:	444a      	add	r2, r9
 8000a76:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a7a:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a7e:	fb09 f804 	mul.w	r8, r9, r4
 8000a82:	e7db      	b.n	8000a3c <__udivmoddi4+0x288>
 8000a84:	4603      	mov	r3, r0
 8000a86:	e77d      	b.n	8000984 <__udivmoddi4+0x1d0>
 8000a88:	46d0      	mov	r8, sl
 8000a8a:	e765      	b.n	8000958 <__udivmoddi4+0x1a4>
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	e6fa      	b.n	8000886 <__udivmoddi4+0xd2>
 8000a90:	443b      	add	r3, r7
 8000a92:	3a02      	subs	r2, #2
 8000a94:	e730      	b.n	80008f8 <__udivmoddi4+0x144>
 8000a96:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a9a:	443b      	add	r3, r7
 8000a9c:	e719      	b.n	80008d2 <__udivmoddi4+0x11e>
 8000a9e:	4649      	mov	r1, r9
 8000aa0:	e79a      	b.n	80009d8 <__udivmoddi4+0x224>
 8000aa2:	eba2 0209 	sub.w	r2, r2, r9
 8000aa6:	fbb2 f9fe 	udiv	r9, r2, lr
 8000aaa:	46c4      	mov	ip, r8
 8000aac:	fb09 f804 	mul.w	r8, r9, r4
 8000ab0:	e7c4      	b.n	8000a3c <__udivmoddi4+0x288>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <DHT22_DelayUs>:
/* Private functions */
static void DHT22_SetPinOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
static void DHT22_SetPinInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
static uint8_t DHT22_CheckResponse(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

void DHT22_DelayUs(uint16_t us) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = us * (SystemCoreClock / 1000000) / 4;
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8000af8 <DHT22_DelayUs+0x40>)
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	490c      	ldr	r1, [pc, #48]	@ (8000afc <DHT22_DelayUs+0x44>)
 8000aca:	fba1 1202 	umull	r1, r2, r1, r2
 8000ace:	0c92      	lsrs	r2, r2, #18
 8000ad0:	fb02 f303 	mul.w	r3, r2, r3
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	60fb      	str	r3, [r7, #12]
    volatile uint32_t count;
    for(count = 0; count < ticks; count++);
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	e002      	b.n	8000ae4 <DHT22_DelayUs+0x2c>
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f8      	bhi.n	8000ade <DHT22_DelayUs+0x26>
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	20000004 	.word	0x20000004
 8000afc:	431bde83 	.word	0x431bde83

08000b00 <DHT22_SetPinOutput>:

static void DHT22_SetPinOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f001 fd5a 	bl	80025ec <HAL_GPIO_Init>
}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <DHT22_SetPinInput>:

static void DHT22_SetPinInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000b5c:	887b      	ldrh	r3, [r7, #2]
 8000b5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f001 fd3c 	bl	80025ec <HAL_GPIO_Init>
}
 8000b74:	bf00      	nop
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <DHT22_ReadData>:

DHT22_Status DHT22_ReadData(DHT22_DataTypedef *data, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	4613      	mov	r3, r2
 8000b88:	80fb      	strh	r3, [r7, #6]
    uint8_t bits[5] = {0};
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	711a      	strb	r2, [r3, #4]
    uint32_t timeout;
    uint8_t i, j;

    /* Inicializa a comunicação */
    DHT22_SetPinOutput(GPIOx, GPIO_Pin);
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	4619      	mov	r1, r3
 8000b98:	68b8      	ldr	r0, [r7, #8]
 8000b9a:	f7ff ffb1 	bl	8000b00 <DHT22_SetPinOutput>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	68b8      	ldr	r0, [r7, #8]
 8000ba6:	f001 fec8 	bl	800293a <HAL_GPIO_WritePin>
    DHT22_DelayUs(1100);  // 1.1ms LOW
 8000baa:	f240 404c 	movw	r0, #1100	@ 0x44c
 8000bae:	f7ff ff83 	bl	8000ab8 <DHT22_DelayUs>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	68b8      	ldr	r0, [r7, #8]
 8000bba:	f001 febe 	bl	800293a <HAL_GPIO_WritePin>
    DHT22_DelayUs(40);    // 40us HIGH
 8000bbe:	2028      	movs	r0, #40	@ 0x28
 8000bc0:	f7ff ff7a 	bl	8000ab8 <DHT22_DelayUs>
    DHT22_SetPinInput(GPIOx, GPIO_Pin);
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	68b8      	ldr	r0, [r7, #8]
 8000bca:	f7ff ffb9 	bl	8000b40 <DHT22_SetPinInput>

    /* Verifica resposta do sensor */
    if(!DHT22_CheckResponse(GPIOx, GPIO_Pin)) {
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	68b8      	ldr	r0, [r7, #8]
 8000bd4:	f000 f8a4 	bl	8000d20 <DHT22_CheckResponse>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <DHT22_ReadData+0x66>
        return DHT22_ERROR_TIMEOUT;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e097      	b.n	8000d12 <DHT22_ReadData+0x196>
    }

    /* Lê os 40 bits de dados */
    for(i = 0; i < 5; i++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	76fb      	strb	r3, [r7, #27]
 8000be6:	e055      	b.n	8000c94 <DHT22_ReadData+0x118>
        for(j = 0; j < 8; j++) {
 8000be8:	2300      	movs	r3, #0
 8000bea:	76bb      	strb	r3, [r7, #26]
 8000bec:	e04c      	b.n	8000c88 <DHT22_ReadData+0x10c>
            timeout = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
            while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
 8000bf2:	e009      	b.n	8000c08 <DHT22_ReadData+0x8c>
                if(++timeout > DHT22_TIMEOUT) return DHT22_ERROR_TIMEOUT;
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d901      	bls.n	8000c08 <DHT22_ReadData+0x8c>
 8000c04:	2301      	movs	r3, #1
 8000c06:	e084      	b.n	8000d12 <DHT22_ReadData+0x196>
            while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f001 fe7d 	bl	800290c <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0ed      	beq.n	8000bf4 <DHT22_ReadData+0x78>
            }

            DHT22_DelayUs(35);  // Espera 35us
 8000c18:	2023      	movs	r0, #35	@ 0x23
 8000c1a:	f7ff ff4d 	bl	8000ab8 <DHT22_DelayUs>

            if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	4619      	mov	r1, r3
 8000c22:	68b8      	ldr	r0, [r7, #8]
 8000c24:	f001 fe72 	bl	800290c <HAL_GPIO_ReadPin>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d114      	bne.n	8000c58 <DHT22_ReadData+0xdc>
                bits[i] |= (1 << (7 - j));
 8000c2e:	7efb      	ldrb	r3, [r7, #27]
 8000c30:	3320      	adds	r3, #32
 8000c32:	443b      	add	r3, r7
 8000c34:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000c38:	b25a      	sxtb	r2, r3
 8000c3a:	7ebb      	ldrb	r3, [r7, #26]
 8000c3c:	f1c3 0307 	rsb	r3, r3, #7
 8000c40:	2101      	movs	r1, #1
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b25a      	sxtb	r2, r3
 8000c4c:	7efb      	ldrb	r3, [r7, #27]
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	3320      	adds	r3, #32
 8000c52:	443b      	add	r3, r7
 8000c54:	f803 2c10 	strb.w	r2, [r3, #-16]
            }

            timeout = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
            while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8000c5c:	e009      	b.n	8000c72 <DHT22_ReadData+0xf6>
                if(++timeout > DHT22_TIMEOUT) return DHT22_ERROR_TIMEOUT;
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3301      	adds	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d901      	bls.n	8000c72 <DHT22_ReadData+0xf6>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e04f      	b.n	8000d12 <DHT22_ReadData+0x196>
            while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	4619      	mov	r1, r3
 8000c76:	68b8      	ldr	r0, [r7, #8]
 8000c78:	f001 fe48 	bl	800290c <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d0ed      	beq.n	8000c5e <DHT22_ReadData+0xe2>
        for(j = 0; j < 8; j++) {
 8000c82:	7ebb      	ldrb	r3, [r7, #26]
 8000c84:	3301      	adds	r3, #1
 8000c86:	76bb      	strb	r3, [r7, #26]
 8000c88:	7ebb      	ldrb	r3, [r7, #26]
 8000c8a:	2b07      	cmp	r3, #7
 8000c8c:	d9af      	bls.n	8000bee <DHT22_ReadData+0x72>
    for(i = 0; i < 5; i++) {
 8000c8e:	7efb      	ldrb	r3, [r7, #27]
 8000c90:	3301      	adds	r3, #1
 8000c92:	76fb      	strb	r3, [r7, #27]
 8000c94:	7efb      	ldrb	r3, [r7, #27]
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d9a6      	bls.n	8000be8 <DHT22_ReadData+0x6c>
            }
        }
    }

    /* Verifica checksum */
    if(bits[4] != ((bits[0] + bits[1] + bits[2] + bits[3]) & 0xFF)) {
 8000c9a:	7d3b      	ldrb	r3, [r7, #20]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	7c3b      	ldrb	r3, [r7, #16]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	7c7b      	ldrb	r3, [r7, #17]
 8000ca4:	440b      	add	r3, r1
 8000ca6:	7cb9      	ldrb	r1, [r7, #18]
 8000ca8:	440b      	add	r3, r1
 8000caa:	7cf9      	ldrb	r1, [r7, #19]
 8000cac:	440b      	add	r3, r1
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d001      	beq.n	8000cb8 <DHT22_ReadData+0x13c>
        return DHT22_ERROR_CHECKSUM;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e02c      	b.n	8000d12 <DHT22_ReadData+0x196>
    }

    /* Converte e armazena os dados */
    int16_t temp = (bits[2] << 8) | bits[3];
 8000cb8:	7cbb      	ldrb	r3, [r7, #18]
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	7cfb      	ldrb	r3, [r7, #19]
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	833b      	strh	r3, [r7, #24]
    int16_t hum = (bits[0] << 8) | bits[1];
 8000cc8:	7c3b      	ldrb	r3, [r7, #16]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	7c7b      	ldrb	r3, [r7, #17]
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	82fb      	strh	r3, [r7, #22]

    data->Temperature = (float)temp / 10.0f;
 8000cd8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fb11 	bl	8000304 <__aeabi_i2f>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <DHT22_ReadData+0x1a0>)
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fc14 	bl	8000514 <__aeabi_fdiv>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	601a      	str	r2, [r3, #0]
    data->Humidity = (float)hum / 10.0f;
 8000cf4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fb03 	bl	8000304 <__aeabi_i2f>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4906      	ldr	r1, [pc, #24]	@ (8000d1c <DHT22_ReadData+0x1a0>)
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fc06 	bl	8000514 <__aeabi_fdiv>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	605a      	str	r2, [r3, #4]

    return DHT22_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	41200000 	.word	0x41200000

08000d20 <DHT22_CheckResponse>:

static uint8_t DHT22_CheckResponse(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
    uint32_t timeout = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]

    // Espera o pino ficar LOW (80us)
    while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 8000d30:	e00c      	b.n	8000d4c <DHT22_CheckResponse+0x2c>
        if(++timeout > DHT22_TIMEOUT) return 0;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3301      	adds	r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d901      	bls.n	8000d46 <DHT22_CheckResponse+0x26>
 8000d42:	2300      	movs	r3, #0
 8000d44:	e023      	b.n	8000d8e <DHT22_CheckResponse+0x6e>
        DHT22_DelayUs(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff feb6 	bl	8000ab8 <DHT22_DelayUs>
    while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f001 fddb 	bl	800290c <HAL_GPIO_ReadPin>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1ea      	bne.n	8000d32 <DHT22_CheckResponse+0x12>
    }

    timeout = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
    // Espera o pino ficar HIGH (80us)
    while(!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 8000d60:	e00c      	b.n	8000d7c <DHT22_CheckResponse+0x5c>
        if(++timeout > DHT22_TIMEOUT) return 0;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3301      	adds	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d901      	bls.n	8000d76 <DHT22_CheckResponse+0x56>
 8000d72:	2300      	movs	r3, #0
 8000d74:	e00b      	b.n	8000d8e <DHT22_CheckResponse+0x6e>
        DHT22_DelayUs(1);
 8000d76:	2001      	movs	r0, #1
 8000d78:	f7ff fe9e 	bl	8000ab8 <DHT22_DelayUs>
    while(!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f001 fdc3 	bl	800290c <HAL_GPIO_ReadPin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0ea      	beq.n	8000d62 <DHT22_CheckResponse+0x42>
    }

    return 1;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4a06      	ldr	r2, [pc, #24]	@ (8000dc0 <vApplicationGetIdleTaskMemory+0x28>)
 8000da8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2280      	movs	r2, #128	@ 0x80
 8000db4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	20000094 	.word	0x20000094
 8000dc4:	200000e8 	.word	0x200000e8

08000dc8 <SystemClock_Config>:
void CLITask(void const * argument);



void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b094      	sub	sp, #80	@ 0x50
 8000dcc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	2234      	movs	r2, #52	@ 0x34
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 fd9f 	bl	800691a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000dec:	4b23      	ldr	r3, [pc, #140]	@ (8000e7c <SystemClock_Config+0xb4>)
 8000dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df0:	4a22      	ldr	r2, [pc, #136]	@ (8000e7c <SystemClock_Config+0xb4>)
 8000df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df6:	6253      	str	r3, [r2, #36]	@ 0x24
 8000df8:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <SystemClock_Config+0xb4>)
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e04:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <SystemClock_Config+0xb8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <SystemClock_Config+0xb8>)
 8000e0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e12:	6013      	str	r3, [r2, #0]

    /** Initializes the RCC Oscillators */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e24:	2300      	movs	r3, #0
 8000e26:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000e28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000e2e:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 fdaf 	bl	800299c <HAL_RCC_OscConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x80>
    {
        Error_Handler();
 8000e44:	f000 f900 	bl	8001048 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e48:	230f      	movs	r3, #15
 8000e4a:	60bb      	str	r3, [r7, #8]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e58:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	2101      	movs	r1, #1
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 f8c9 	bl	8002ffc <HAL_RCC_ClockConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0xac>
    {
        Error_Handler();
 8000e70:	f000 f8ea 	bl	8001048 <Error_Handler>
    }
}
 8000e74:	bf00      	nop
 8000e76:	3750      	adds	r7, #80	@ 0x50
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40007000 	.word	0x40007000

08000e84 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <MX_GPIO_Init+0xc0>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a29      	ldr	r2, [pc, #164]	@ (8000f44 <MX_GPIO_Init+0xc0>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <MX_GPIO_Init+0xc0>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <MX_GPIO_Init+0xc0>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	4a23      	ldr	r2, [pc, #140]	@ (8000f44 <MX_GPIO_Init+0xc0>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	61d3      	str	r3, [r2, #28]
 8000ebe:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_GPIO_Init+0xc0>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

    /* Configure DHT22 pin (PB10) */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ece:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4819      	ldr	r0, [pc, #100]	@ (8000f48 <MX_GPIO_Init+0xc4>)
 8000ee4:	f001 fb82 	bl	80025ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eee:	4816      	ldr	r0, [pc, #88]	@ (8000f48 <MX_GPIO_Init+0xc4>)
 8000ef0:	f001 fd23 	bl	800293a <HAL_GPIO_WritePin>

    /* Configure LED pin (PA5) */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4810      	ldr	r0, [pc, #64]	@ (8000f4c <MX_GPIO_Init+0xc8>)
 8000f0c:	f001 fb6e 	bl	80025ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2120      	movs	r1, #32
 8000f14:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_GPIO_Init+0xc8>)
 8000f16:	f001 fd10 	bl	800293a <HAL_GPIO_WritePin>

    /* Configure USART2 pins (PA2-TX, PA3-RX) */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <MX_GPIO_Init+0xc8>)
 8000f36:	f001 fb59 	bl	80025ec <HAL_GPIO_Init>
}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40020000 	.word	0x40020000

08000f50 <MX_ADC_Init>:

static void MX_ADC_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]

    hadc.Instance = ADC1;
 8000f60:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000f62:	4a23      	ldr	r2, [pc, #140]	@ (8000ff0 <MX_ADC_Init+0xa0>)
 8000f64:	601a      	str	r2, [r3, #0]
    hadc.Init.ClockPrescaler = TIM_CLOCKPRESCALER_DIV2;  // Mantido para STM32L1
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000f68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f6c:	605a      	str	r2, [r3, #4]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    hadc.Init.ScanConvMode = DISABLE;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
    hadc.Init.ContinuousConvMode = DISABLE;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f90:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
    hadc.Init.NbrOfConversion = 1;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc.Init.DMAContinuousRequests = DISABLE;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000fac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fb0:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fb2:	480e      	ldr	r0, [pc, #56]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000fb4:	f000 fdc2 	bl	8001b3c <HAL_ADC_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_ADC_Init+0x72>
    {
        Error_Handler();
 8000fbe:	f000 f843 	bl	8001048 <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
    sConfig.Rank = 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <MX_ADC_Init+0x9c>)
 8000fd4:	f001 f820 	bl	8002018 <HAL_ADC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC_Init+0x92>
    {
        Error_Handler();
 8000fde:	f000 f833 	bl	8001048 <Error_Handler>
    }
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200002e8 	.word	0x200002e8
 8000ff0:	40012400 	.word	0x40012400

08000ff4 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <MX_USART2_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_USART2_UART_Init+0x4c>)
 800102c:	f002 fca4 	bl	8003978 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8001036:	f000 f807 	bl	8001048 <Error_Handler>
    }
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000033c 	.word	0x2000033c
 8001044:	40004400 	.word	0x40004400

08001048 <Error_Handler>:

void Error_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    /* Turn on LED to indicate error */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2120      	movs	r1, #32
 8001050:	4806      	ldr	r0, [pc, #24]	@ (800106c <Error_Handler+0x24>)
 8001052:	f001 fc72 	bl	800293a <HAL_GPIO_WritePin>

    while(1)
    {
        /* Blink LED in case of error */
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001056:	2120      	movs	r1, #32
 8001058:	4804      	ldr	r0, [pc, #16]	@ (800106c <Error_Handler+0x24>)
 800105a:	f001 fc86 	bl	800296a <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 800105e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001062:	f000 fd49 	bl	8001af8 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001066:	bf00      	nop
 8001068:	e7f5      	b.n	8001056 <Error_Handler+0xe>
 800106a:	bf00      	nop
 800106c:	40020000 	.word	0x40020000

08001070 <main>:
    }
}

int main(void)
{
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b0a6      	sub	sp, #152	@ 0x98
 8001074:	af00      	add	r7, sp, #0
  HAL_Init();
 8001076:	f000 fd1c 	bl	8001ab2 <HAL_Init>
  SystemClock_Config();
 800107a:	f7ff fea5 	bl	8000dc8 <SystemClock_Config>
  MX_GPIO_Init();
 800107e:	f7ff ff01 	bl	8000e84 <MX_GPIO_Init>
  MX_ADC_Init();
 8001082:	f7ff ff65 	bl	8000f50 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8001086:	f7ff ffb5 	bl	8000ff4 <MX_USART2_UART_Init>

  initialise_monitor_handles();
 800108a:	f006 fca1 	bl	80079d0 <initialise_monitor_handles>

  printf("Funciona cacete");
 800108e:	483d      	ldr	r0, [pc, #244]	@ (8001184 <main+0x114>)
 8001090:	f005 fbee 	bl	8006870 <iprintf>

  /* Create mutex for shared data protection */
  osMutexDef(dataMutex);
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  dataMutexHandle = osMutexCreate(osMutex(dataMutex));
 80010a0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80010a4:	4618      	mov	r0, r3
 80010a6:	f003 f808 	bl	80040ba <osMutexCreate>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a36      	ldr	r2, [pc, #216]	@ (8001188 <main+0x118>)
 80010ae:	6013      	str	r3, [r2, #0]

  /* Create tasks */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80010b0:	4b36      	ldr	r3, [pc, #216]	@ (800118c <main+0x11c>)
 80010b2:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80010b6:	461d      	mov	r5, r3
 80010b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010c4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 ff95 	bl	8003ffa <osThreadCreate>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001190 <main+0x120>)
 80010d4:	6013      	str	r3, [r2, #0]

  osThreadDef(sensorTask, SensorTask, osPriorityNormal, 0, 256);
 80010d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001194 <main+0x124>)
 80010d8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80010dc:	461d      	mov	r5, r3
 80010de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 80010ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 ff82 	bl	8003ffa <osThreadCreate>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <main+0x128>)
 80010fa:	6013      	str	r3, [r2, #0]

  osThreadDef(alarmeTask, AlarmeTask, osPriorityHigh, 0, 128); // Prioridade alta
 80010fc:	4b27      	ldr	r3, [pc, #156]	@ (800119c <main+0x12c>)
 80010fe:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001102:	461d      	mov	r5, r3
 8001104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001108:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800110c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  alarmeTaskHandle = osThreadCreate(osThread(alarmeTask), NULL);
 8001110:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f002 ff6f 	bl	8003ffa <osThreadCreate>
 800111c:	4603      	mov	r3, r0
 800111e:	4a20      	ldr	r2, [pc, #128]	@ (80011a0 <main+0x130>)
 8001120:	6013      	str	r3, [r2, #0]

  osThreadDef(loggerTask, LoggerTask, osPriorityBelowNormal, 0, 256);
 8001122:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <main+0x134>)
 8001124:	f107 0420 	add.w	r4, r7, #32
 8001128:	461d      	mov	r5, r3
 800112a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001132:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  loggerTaskHandle = osThreadCreate(osThread(loggerTask), NULL);
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f002 ff5c 	bl	8003ffa <osThreadCreate>
 8001142:	4603      	mov	r3, r0
 8001144:	4a18      	ldr	r2, [pc, #96]	@ (80011a8 <main+0x138>)
 8001146:	6013      	str	r3, [r2, #0]

  osThreadDef(cliTask, CLITask, osPriorityAboveNormal, 0, 256);
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <main+0x13c>)
 800114a:	1d3c      	adds	r4, r7, #4
 800114c:	461d      	mov	r5, r3
 800114e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001152:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001156:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cliTaskHandle = osThreadCreate(osThread(cliTask), NULL);
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f002 ff4b 	bl	8003ffa <osThreadCreate>
 8001164:	4603      	mov	r3, r0
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <main+0x140>)
 8001168:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 800116a:	f002 ff3f 	bl	8003fec <osKernelStart>

  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // LED no PA5
 800116e:	2120      	movs	r1, #32
 8001170:	4810      	ldr	r0, [pc, #64]	@ (80011b4 <main+0x144>)
 8001172:	f001 fbfa 	bl	800296a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001176:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800117a:	f000 fcbd 	bl	8001af8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // LED no PA5
 800117e:	bf00      	nop
 8001180:	e7f5      	b.n	800116e <main+0xfe>
 8001182:	bf00      	nop
 8001184:	08007ae4 	.word	0x08007ae4
 8001188:	200003a4 	.word	0x200003a4
 800118c:	08007b00 	.word	0x08007b00
 8001190:	20000384 	.word	0x20000384
 8001194:	08007b28 	.word	0x08007b28
 8001198:	20000388 	.word	0x20000388
 800119c:	08007b50 	.word	0x08007b50
 80011a0:	2000038c 	.word	0x2000038c
 80011a4:	08007b78 	.word	0x08007b78
 80011a8:	20000390 	.word	0x20000390
 80011ac:	08007b9c 	.word	0x08007b9c
 80011b0:	20000394 	.word	0x20000394
 80011b4:	40020000 	.word	0x40020000

080011b8 <SensorTask>:
  }
}

void SensorTask(void const * argument)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        /* Read pH via ADC */
        HAL_StatusTypeDef adcStatus = HAL_ADC_Start(&hadc);
 80011c0:	4837      	ldr	r0, [pc, #220]	@ (80012a0 <SensorTask+0xe8>)
 80011c2:	f000 fe01 	bl	8001dc8 <HAL_ADC_Start>
 80011c6:	4603      	mov	r3, r0
 80011c8:	77fb      	strb	r3, [r7, #31]
        if (adcStatus == HAL_OK)
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d14d      	bne.n	800126c <SensorTask+0xb4>
        {
            if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK)
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	4832      	ldr	r0, [pc, #200]	@ (80012a0 <SensorTask+0xe8>)
 80011d6:	f000 fe83 	bl	8001ee0 <HAL_ADC_PollForConversion>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d142      	bne.n	8001266 <SensorTask+0xae>
            {
                uint32_t ph_raw = HAL_ADC_GetValue(&hadc);
 80011e0:	482f      	ldr	r0, [pc, #188]	@ (80012a0 <SensorTask+0xe8>)
 80011e2:	f000 ff0d 	bl	8002000 <HAL_ADC_GetValue>
 80011e6:	61b8      	str	r0, [r7, #24]
                HAL_ADC_Stop(&hadc);
 80011e8:	482d      	ldr	r0, [pc, #180]	@ (80012a0 <SensorTask+0xe8>)
 80011ea:	f000 fe4d 	bl	8001e88 <HAL_ADC_Stop>

                float voltage = ph_raw * (3.3f / 4095.0f);
 80011ee:	69b8      	ldr	r0, [r7, #24]
 80011f0:	f7ff f884 	bl	80002fc <__aeabi_ui2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	492b      	ldr	r1, [pc, #172]	@ (80012a4 <SensorTask+0xec>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f8d7 	bl	80003ac <__aeabi_fmul>
 80011fe:	4603      	mov	r3, r0
 8001200:	617b      	str	r3, [r7, #20]
                float calculated_ph = 7.0f + ((2.5f - voltage) / 0.18f);
 8001202:	6979      	ldr	r1, [r7, #20]
 8001204:	4828      	ldr	r0, [pc, #160]	@ (80012a8 <SensorTask+0xf0>)
 8001206:	f7fe ffc7 	bl	8000198 <__aeabi_fsub>
 800120a:	4603      	mov	r3, r0
 800120c:	4927      	ldr	r1, [pc, #156]	@ (80012ac <SensorTask+0xf4>)
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f980 	bl	8000514 <__aeabi_fdiv>
 8001214:	4603      	mov	r3, r0
 8001216:	4926      	ldr	r1, [pc, #152]	@ (80012b0 <SensorTask+0xf8>)
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffbf 	bl	800019c <__addsf3>
 800121e:	4603      	mov	r3, r0
 8001220:	613b      	str	r3, [r7, #16]

                osStatus mutexStatus = osMutexWait(dataMutexHandle, osWaitForever);
 8001222:	4b24      	ldr	r3, [pc, #144]	@ (80012b4 <SensorTask+0xfc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f04f 31ff 	mov.w	r1, #4294967295
 800122a:	4618      	mov	r0, r3
 800122c:	f002 ff5e 	bl	80040ec <osMutexWait>
 8001230:	60f8      	str	r0, [r7, #12]
                if (mutexStatus == osOK)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <SensorTask+0x92>
                {
                    ph = calculated_ph;
 8001238:	4a1f      	ldr	r2, [pc, #124]	@ (80012b8 <SensorTask+0x100>)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	6013      	str	r3, [r2, #0]
                    osMutexRelease(dataMutexHandle);
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <SensorTask+0xfc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f002 ffa0 	bl	8004188 <osMutexRelease>
 8001248:	e010      	b.n	800126c <SensorTask+0xb4>
                }
                else
                {
                    // Log mutex error
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2120      	movs	r1, #32
 800124e:	481b      	ldr	r0, [pc, #108]	@ (80012bc <SensorTask+0x104>)
 8001250:	f001 fb73 	bl	800293a <HAL_GPIO_WritePin>
                    osDelay(100);
 8001254:	2064      	movs	r0, #100	@ 0x64
 8001256:	f002 ff1c 	bl	8004092 <osDelay>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2120      	movs	r1, #32
 800125e:	4817      	ldr	r0, [pc, #92]	@ (80012bc <SensorTask+0x104>)
 8001260:	f001 fb6b 	bl	800293a <HAL_GPIO_WritePin>
 8001264:	e002      	b.n	800126c <SensorTask+0xb4>
                }
            }
            else
            {
                HAL_ADC_Stop(&hadc);
 8001266:	480e      	ldr	r0, [pc, #56]	@ (80012a0 <SensorTask+0xe8>)
 8001268:	f000 fe0e 	bl	8001e88 <HAL_ADC_Stop>
        {
            // Log ADC start error
        }

        /* Read Temperature and Humidity */
        DHT22_Status dhtStatus = DHT22_ReadData(&DHT22_Data, DHT22_PORT, DHT22_PIN);
 800126c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001270:	4913      	ldr	r1, [pc, #76]	@ (80012c0 <SensorTask+0x108>)
 8001272:	4814      	ldr	r0, [pc, #80]	@ (80012c4 <SensorTask+0x10c>)
 8001274:	f7ff fc82 	bl	8000b7c <DHT22_ReadData>
 8001278:	4603      	mov	r3, r0
 800127a:	72fb      	strb	r3, [r7, #11]
        if (dhtStatus != DHT22_OK) {
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d008      	beq.n	8001294 <SensorTask+0xdc>
            // Log DHT22 error based on status
            switch(dhtStatus) {
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d002      	beq.n	800128e <SensorTask+0xd6>
 8001288:	2b02      	cmp	r3, #2
 800128a:	d002      	beq.n	8001292 <SensorTask+0xda>
                case DHT22_ERROR_CHECKSUM:
                    // Checksum error handling
                    break;
                default:
                    // Unknown error
                    break;
 800128c:	e002      	b.n	8001294 <SensorTask+0xdc>
                    break;
 800128e:	bf00      	nop
 8001290:	e000      	b.n	8001294 <SensorTask+0xdc>
                    break;
 8001292:	bf00      	nop
            }
        }

        osDelay(1000);
 8001294:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001298:	f002 fefb 	bl	8004092 <osDelay>
    {
 800129c:	e790      	b.n	80011c0 <SensorTask+0x8>
 800129e:	bf00      	nop
 80012a0:	200002e8 	.word	0x200002e8
 80012a4:	3a534067 	.word	0x3a534067
 80012a8:	40200000 	.word	0x40200000
 80012ac:	3e3851ec 	.word	0x3e3851ec
 80012b0:	40e00000 	.word	0x40e00000
 80012b4:	200003a4 	.word	0x200003a4
 80012b8:	20000000 	.word	0x20000000
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	20000398 	.word	0x20000398

080012c8 <AlarmeTask>:
    }
}

void AlarmeTask(void const * argument)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    float localPh;

    if (osMutexWait(dataMutexHandle, osWaitForever) == osOK)
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <AlarmeTask+0x78>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 ff07 	bl	80040ec <osMutexWait>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d107      	bne.n	80012f4 <AlarmeTask+0x2c>
    {
      localPh = ph;
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <AlarmeTask+0x7c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
      osMutexRelease(dataMutexHandle);
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <AlarmeTask+0x78>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 ff4a 	bl	8004188 <osMutexRelease>
    }

    if (localPh < 4.0f || localPh > 5.5f)
 80012f4:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff f9f5 	bl	80006e8 <__aeabi_fcmplt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d106      	bne.n	8001312 <AlarmeTask+0x4a>
 8001304:	4910      	ldr	r1, [pc, #64]	@ (8001348 <AlarmeTask+0x80>)
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f7ff fa0c 	bl	8000724 <__aeabi_fcmpgt>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d008      	beq.n	8001324 <AlarmeTask+0x5c>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2120      	movs	r1, #32
 8001316:	480d      	ldr	r0, [pc, #52]	@ (800134c <AlarmeTask+0x84>)
 8001318:	f001 fb0f 	bl	800293a <HAL_GPIO_WritePin>
      led_status = 1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <AlarmeTask+0x88>)
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e007      	b.n	8001334 <AlarmeTask+0x6c>
    }
    else
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2120      	movs	r1, #32
 8001328:	4808      	ldr	r0, [pc, #32]	@ (800134c <AlarmeTask+0x84>)
 800132a:	f001 fb06 	bl	800293a <HAL_GPIO_WritePin>
      led_status = 0;
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <AlarmeTask+0x88>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
    }

    osDelay(500);
 8001334:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001338:	f002 feab 	bl	8004092 <osDelay>
  {
 800133c:	e7c8      	b.n	80012d0 <AlarmeTask+0x8>
 800133e:	bf00      	nop
 8001340:	200003a4 	.word	0x200003a4
 8001344:	20000000 	.word	0x20000000
 8001348:	40b00000 	.word	0x40b00000
 800134c:	40020000 	.word	0x40020000
 8001350:	200003a0 	.word	0x200003a0

08001354 <floatToString>:
  }
}

void floatToString(float value, char *buffer, int decimals) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	@ 0x30
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
    int intPart = (int)value;
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff f9e9 	bl	8000738 <__aeabi_f2iz>
 8001366:	4603      	mov	r3, r0
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float fracPart = fabs(value - intPart); // Parte fracionária absoluta
 800136a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800136c:	f7fe ffca 	bl	8000304 <__aeabi_i2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4619      	mov	r1, r3
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f7fe ff0f 	bl	8000198 <__aeabi_fsub>
 800137a:	4603      	mov	r3, r0
 800137c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Trata números negativos
    if (value < 0) {
 8001382:	f04f 0100 	mov.w	r1, #0
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f7ff f9ae 	bl	80006e8 <__aeabi_fcmplt>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d009      	beq.n	80013a6 <floatToString+0x52>
        *buffer++ = '-';
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	60ba      	str	r2, [r7, #8]
 8001398:	222d      	movs	r2, #45	@ 0x2d
 800139a:	701a      	strb	r2, [r3, #0]
        intPart = abs(intPart);
 800139c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bfb8      	it	lt
 80013a2:	425b      	neglt	r3, r3
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    // Converte parte inteira
    int i = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (intPart == 0) {
 80013aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d126      	bne.n	80013fe <floatToString+0xaa>
        buffer[i++] = '0';
 80013b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80013b6:	461a      	mov	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4413      	add	r3, r2
 80013bc:	2230      	movs	r2, #48	@ 0x30
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	e046      	b.n	8001450 <floatToString+0xfc>
    } else {
        while (intPart > 0) {
            buffer[i++] = (intPart % 10) + '0';
 80013c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013c4:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <floatToString+0x178>)
 80013c6:	fb83 1302 	smull	r1, r3, r3, r2
 80013ca:	1099      	asrs	r1, r3, #2
 80013cc:	17d3      	asrs	r3, r2, #31
 80013ce:	1ac9      	subs	r1, r1, r3
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	1ad1      	subs	r1, r2, r3
 80013da:	b2ca      	uxtb	r2, r1
 80013dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013de:	1c59      	adds	r1, r3, #1
 80013e0:	6279      	str	r1, [r7, #36]	@ 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	440b      	add	r3, r1
 80013e8:	3230      	adds	r2, #48	@ 0x30
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]
            intPart /= 10;
 80013ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f0:	4a36      	ldr	r2, [pc, #216]	@ (80014cc <floatToString+0x178>)
 80013f2:	fb82 1203 	smull	r1, r2, r2, r3
 80013f6:	1092      	asrs	r2, r2, #2
 80013f8:	17db      	asrs	r3, r3, #31
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (intPart > 0) {
 80013fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	dcde      	bgt.n	80013c2 <floatToString+0x6e>
        }
        // Inverte os dígitos
        for (int j = 0; j < i / 2; j++) {
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
 8001408:	e01a      	b.n	8001440 <floatToString+0xec>
            char temp = buffer[j];
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	76fb      	strb	r3, [r7, #27]
            buffer[j] = buffer[i - j - 1];
 8001414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	441a      	add	r2, r3
 8001420:	6a3b      	ldr	r3, [r7, #32]
 8001422:	68b9      	ldr	r1, [r7, #8]
 8001424:	440b      	add	r3, r1
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	701a      	strb	r2, [r3, #0]
            buffer[i - j - 1] = temp;
 800142a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	3b01      	subs	r3, #1
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	4413      	add	r3, r2
 8001436:	7efa      	ldrb	r2, [r7, #27]
 8001438:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < i / 2; j++) {
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	3301      	adds	r3, #1
 800143e:	623b      	str	r3, [r7, #32]
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	0fda      	lsrs	r2, r3, #31
 8001444:	4413      	add	r3, r2
 8001446:	105b      	asrs	r3, r3, #1
 8001448:	461a      	mov	r2, r3
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	4293      	cmp	r3, r2
 800144e:	dbdc      	blt.n	800140a <floatToString+0xb6>
        }
    }

    // Parte decimal
    if (decimals > 0) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	dd31      	ble.n	80014ba <floatToString+0x166>
        buffer[i++] = '.';
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	627a      	str	r2, [r7, #36]	@ 0x24
 800145c:	461a      	mov	r2, r3
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	4413      	add	r3, r2
 8001462:	222e      	movs	r2, #46	@ 0x2e
 8001464:	701a      	strb	r2, [r3, #0]
        for (int d = 0; d < decimals; d++) {
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	e022      	b.n	80014b2 <floatToString+0x15e>
            fracPart *= 10;
 800146c:	4918      	ldr	r1, [pc, #96]	@ (80014d0 <floatToString+0x17c>)
 800146e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001470:	f7fe ff9c 	bl	80003ac <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
            int digit = (int)fracPart;
 8001478:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800147a:	f7ff f95d 	bl	8000738 <__aeabi_f2iz>
 800147e:	4603      	mov	r3, r0
 8001480:	617b      	str	r3, [r7, #20]
            buffer[i++] = digit + '0';
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	1c59      	adds	r1, r3, #1
 800148a:	6279      	str	r1, [r7, #36]	@ 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	440b      	add	r3, r1
 8001492:	3230      	adds	r2, #48	@ 0x30
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
            fracPart -= digit;
 8001498:	6978      	ldr	r0, [r7, #20]
 800149a:	f7fe ff33 	bl	8000304 <__aeabi_i2f>
 800149e:	4603      	mov	r3, r0
 80014a0:	4619      	mov	r1, r3
 80014a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80014a4:	f7fe fe78 	bl	8000198 <__aeabi_fsub>
 80014a8:	4603      	mov	r3, r0
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (int d = 0; d < decimals; d++) {
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	3301      	adds	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dbd8      	blt.n	800146c <floatToString+0x118>
        }
    }

    buffer[i] = '\0'; // Terminador nulo
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	4413      	add	r3, r2
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	3730      	adds	r7, #48	@ 0x30
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	66666667 	.word	0x66666667
 80014d0:	41200000 	.word	0x41200000

080014d4 <LoggerTask>:

void LoggerTask(void const * argument)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b0b3      	sub	sp, #204	@ 0xcc
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    {
        float localTemp, localHum, localPh;
        uint8_t localLed;

        // Cópia segura dos dados
        if (osMutexWait(dataMutexHandle, osWaitForever) == osOK)
 80014dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001658 <LoggerTask+0x184>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fe01 	bl	80040ec <osMutexWait>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d114      	bne.n	800151a <LoggerTask+0x46>
        {
            localTemp = DHT22_Data.Temperature;
 80014f0:	4b5a      	ldr	r3, [pc, #360]	@ (800165c <LoggerTask+0x188>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            localHum = DHT22_Data.Humidity;
 80014f8:	4b58      	ldr	r3, [pc, #352]	@ (800165c <LoggerTask+0x188>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            localPh = ph;
 8001500:	4b57      	ldr	r3, [pc, #348]	@ (8001660 <LoggerTask+0x18c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            localLed = led_status;
 8001508:	4b56      	ldr	r3, [pc, #344]	@ (8001664 <LoggerTask+0x190>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
            osMutexRelease(dataMutexHandle);
 8001510:	4b51      	ldr	r3, [pc, #324]	@ (8001658 <LoggerTask+0x184>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fe37 	bl	8004188 <osMutexRelease>
        }

        // Conversões
        floatToString(localTemp, tempStr, 1);
 800151a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800151e:	2201      	movs	r2, #1
 8001520:	4619      	mov	r1, r3
 8001522:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8001526:	f7ff ff15 	bl	8001354 <floatToString>
        floatToString(localHum, humStr, 1);
 800152a:	f107 0318 	add.w	r3, r7, #24
 800152e:	2201      	movs	r2, #1
 8001530:	4619      	mov	r1, r3
 8001532:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001536:	f7ff ff0d 	bl	8001354 <floatToString>
        floatToString(localPh, phStr, 2);
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	2202      	movs	r2, #2
 8001540:	4619      	mov	r1, r3
 8001542:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001546:	f7ff ff05 	bl	8001354 <floatToString>

        // Montagem manual da string
        strcpy(buffer, "[LOGGER] Temp: ");
 800154a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800154e:	4a46      	ldr	r2, [pc, #280]	@ (8001668 <LoggerTask+0x194>)
 8001550:	461c      	mov	r4, r3
 8001552:	4613      	mov	r3, r2
 8001554:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001556:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        strcat(buffer, tempStr);
 800155a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800155e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f005 f9e0 	bl	800692a <strcat>
        strcat(buffer, " C | Hum: ");
 800156a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe fe06 	bl	8000180 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800157c:	4413      	add	r3, r2
 800157e:	493b      	ldr	r1, [pc, #236]	@ (800166c <LoggerTask+0x198>)
 8001580:	461a      	mov	r2, r3
 8001582:	460b      	mov	r3, r1
 8001584:	cb03      	ldmia	r3!, {r0, r1}
 8001586:	6010      	str	r0, [r2, #0]
 8001588:	6051      	str	r1, [r2, #4]
 800158a:	8819      	ldrh	r1, [r3, #0]
 800158c:	789b      	ldrb	r3, [r3, #2]
 800158e:	8111      	strh	r1, [r2, #8]
 8001590:	7293      	strb	r3, [r2, #10]
        strcat(buffer, humStr);
 8001592:	f107 0218 	add.w	r2, r7, #24
 8001596:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f005 f9c4 	bl	800692a <strcat>
        strcat(buffer, " % | pH: ");
 80015a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fdea 	bl	8000180 <strlen>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015b4:	4413      	add	r3, r2
 80015b6:	492e      	ldr	r1, [pc, #184]	@ (8001670 <LoggerTask+0x19c>)
 80015b8:	461a      	mov	r2, r3
 80015ba:	460b      	mov	r3, r1
 80015bc:	cb03      	ldmia	r3!, {r0, r1}
 80015be:	6010      	str	r0, [r2, #0]
 80015c0:	6051      	str	r1, [r2, #4]
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	8113      	strh	r3, [r2, #8]
        strcat(buffer, phStr);
 80015c6:	f107 0208 	add.w	r2, r7, #8
 80015ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f005 f9aa 	bl	800692a <strcat>
        strcat(buffer, " | LED: ");
 80015d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe fdd0 	bl	8000180 <strlen>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015e8:	4413      	add	r3, r2
 80015ea:	4922      	ldr	r1, [pc, #136]	@ (8001674 <LoggerTask+0x1a0>)
 80015ec:	461a      	mov	r2, r3
 80015ee:	460b      	mov	r3, r1
 80015f0:	cb03      	ldmia	r3!, {r0, r1}
 80015f2:	6010      	str	r0, [r2, #0]
 80015f4:	6051      	str	r1, [r2, #4]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	7213      	strb	r3, [r2, #8]
        strcat(buffer, localLed ? "ON" : "OFF");
 80015fa:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <LoggerTask+0x132>
 8001602:	4a1d      	ldr	r2, [pc, #116]	@ (8001678 <LoggerTask+0x1a4>)
 8001604:	e000      	b.n	8001608 <LoggerTask+0x134>
 8001606:	4a1d      	ldr	r2, [pc, #116]	@ (800167c <LoggerTask+0x1a8>)
 8001608:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f005 f98b 	bl	800692a <strcat>
        strcat(buffer, "\r\n");
 8001614:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe fdb1 	bl	8000180 <strlen>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001626:	4413      	add	r3, r2
 8001628:	4a15      	ldr	r2, [pc, #84]	@ (8001680 <LoggerTask+0x1ac>)
 800162a:	8811      	ldrh	r1, [r2, #0]
 800162c:	7892      	ldrb	r2, [r2, #2]
 800162e:	8019      	strh	r1, [r3, #0]
 8001630:	709a      	strb	r2, [r3, #2]

        // Envia via UART
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001632:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fda2 	bl	8000180 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	480e      	ldr	r0, [pc, #56]	@ (8001684 <LoggerTask+0x1b0>)
 800164a:	f002 f9e5 	bl	8003a18 <HAL_UART_Transmit>

        osDelay(2000);
 800164e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001652:	f002 fd1e 	bl	8004092 <osDelay>
    {
 8001656:	e741      	b.n	80014dc <LoggerTask+0x8>
 8001658:	200003a4 	.word	0x200003a4
 800165c:	20000398 	.word	0x20000398
 8001660:	20000000 	.word	0x20000000
 8001664:	200003a0 	.word	0x200003a0
 8001668:	08007bb8 	.word	0x08007bb8
 800166c:	08007bc8 	.word	0x08007bc8
 8001670:	08007bd4 	.word	0x08007bd4
 8001674:	08007be0 	.word	0x08007be0
 8001678:	08007bec 	.word	0x08007bec
 800167c:	08007bf0 	.word	0x08007bf0
 8001680:	08007bf4 	.word	0x08007bf4
 8001684:	2000033c 	.word	0x2000033c

08001688 <CLITask>:




void CLITask(void const * argument)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint8_t rxData;

  for(;;)
  {
    if (HAL_UART_Receive(&huart2, &rxData, 1, 100) == HAL_OK)
 8001690:	f107 010f 	add.w	r1, r7, #15
 8001694:	2364      	movs	r3, #100	@ 0x64
 8001696:	2201      	movs	r2, #1
 8001698:	4821      	ldr	r0, [pc, #132]	@ (8001720 <CLITask+0x98>)
 800169a:	f002 fa48 	bl	8003b2e <HAL_UART_Receive>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d138      	bne.n	8001716 <CLITask+0x8e>
    {
      if (rxData == 'H' || rxData == 'h')
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	2b48      	cmp	r3, #72	@ 0x48
 80016a8:	d002      	beq.n	80016b0 <CLITask+0x28>
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b68      	cmp	r3, #104	@ 0x68
 80016ae:	d10d      	bne.n	80016cc <CLITask+0x44>
      {
        char *help = "Comandos:\r\n'H' - Ajuda\r\n'R' - Resetar pH para 7.0\r\n";
 80016b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <CLITask+0x9c>)
 80016b2:	613b      	str	r3, [r7, #16]
        HAL_UART_Transmit(&huart2, (uint8_t*)help, strlen(help), HAL_MAX_DELAY);
 80016b4:	6938      	ldr	r0, [r7, #16]
 80016b6:	f7fe fd63 	bl	8000180 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	6939      	ldr	r1, [r7, #16]
 80016c4:	4816      	ldr	r0, [pc, #88]	@ (8001720 <CLITask+0x98>)
 80016c6:	f002 f9a7 	bl	8003a18 <HAL_UART_Transmit>
      {
 80016ca:	e024      	b.n	8001716 <CLITask+0x8e>
      }
      else if (rxData == 'R' || rxData == 'r')
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b52      	cmp	r3, #82	@ 0x52
 80016d0:	d002      	beq.n	80016d8 <CLITask+0x50>
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	2b72      	cmp	r3, #114	@ 0x72
 80016d6:	d11e      	bne.n	8001716 <CLITask+0x8e>
      {
    	  if (osMutexWait(dataMutexHandle, osWaitForever) == osOK)
 80016d8:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <CLITask+0xa0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 fd03 	bl	80040ec <osMutexWait>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <CLITask+0x74>
        {
          ph = 7.0f;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <CLITask+0xa4>)
 80016ee:	4a10      	ldr	r2, [pc, #64]	@ (8001730 <CLITask+0xa8>)
 80016f0:	601a      	str	r2, [r3, #0]
          osMutexRelease(dataMutexHandle);
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <CLITask+0xa0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fd46 	bl	8004188 <osMutexRelease>
        }

        char *msg = "pH resetado para 7.0\r\n";
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <CLITask+0xac>)
 80016fe:	617b      	str	r3, [r7, #20]
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001700:	6978      	ldr	r0, [r7, #20]
 8001702:	f7fe fd3d 	bl	8000180 <strlen>
 8001706:	4603      	mov	r3, r0
 8001708:	b29a      	uxth	r2, r3
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	6979      	ldr	r1, [r7, #20]
 8001710:	4803      	ldr	r0, [pc, #12]	@ (8001720 <CLITask+0x98>)
 8001712:	f002 f981 	bl	8003a18 <HAL_UART_Transmit>
      }
    }
    osDelay(100);
 8001716:	2064      	movs	r0, #100	@ 0x64
 8001718:	f002 fcbb 	bl	8004092 <osDelay>
    if (HAL_UART_Receive(&huart2, &rxData, 1, 100) == HAL_OK)
 800171c:	e7b8      	b.n	8001690 <CLITask+0x8>
 800171e:	bf00      	nop
 8001720:	2000033c 	.word	0x2000033c
 8001724:	08007bf8 	.word	0x08007bf8
 8001728:	200003a4 	.word	0x200003a4
 800172c:	20000000 	.word	0x20000000
 8001730:	40e00000 	.word	0x40e00000
 8001734:	08007c2c 	.word	0x08007c2c

08001738 <StartDefaultTask>:
  }
}

void StartDefaultTask(void const * argument)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  for(;;)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <StartDefaultTask+0x8>

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800174a:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <HAL_MspInit+0x64>)
 800174c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174e:	4a16      	ldr	r2, [pc, #88]	@ (80017a8 <HAL_MspInit+0x64>)
 8001750:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001754:	6253      	str	r3, [r2, #36]	@ 0x24
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <HAL_MspInit+0x64>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_MspInit+0x64>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a10      	ldr	r2, [pc, #64]	@ (80017a8 <HAL_MspInit+0x64>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6213      	str	r3, [r2, #32]
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <HAL_MspInit+0x64>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_MspInit+0x64>)
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <HAL_MspInit+0x64>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001784:	6253      	str	r3, [r2, #36]	@ 0x24
 8001786:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <HAL_MspInit+0x64>)
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	210f      	movs	r1, #15
 8001796:	f06f 0001 	mvn.w	r0, #1
 800179a:	f000 fefc 	bl	8002596 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a15      	ldr	r2, [pc, #84]	@ (8001820 <HAL_ADC_MspInit+0x74>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d123      	bne.n	8001816 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_ADC_MspInit+0x78>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <HAL_ADC_MspInit+0x78>)
 80017d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d8:	6213      	str	r3, [r2, #32]
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_ADC_MspInit+0x78>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_ADC_MspInit+0x78>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <HAL_ADC_MspInit+0x78>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <HAL_ADC_MspInit+0x78>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80017fe:	2323      	movs	r3, #35	@ 0x23
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001802:	2303      	movs	r3, #3
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <HAL_ADC_MspInit+0x7c>)
 8001812:	f000 feeb 	bl	80025ec <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	@ 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40012400 	.word	0x40012400
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000

0800182c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a17      	ldr	r2, [pc, #92]	@ (80018a8 <HAL_UART_MspInit+0x7c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d127      	bne.n	800189e <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <HAL_UART_MspInit+0x80>)
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	4a16      	ldr	r2, [pc, #88]	@ (80018ac <HAL_UART_MspInit+0x80>)
 8001854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001858:	6253      	str	r3, [r2, #36]	@ 0x24
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_UART_MspInit+0x80>)
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_UART_MspInit+0x80>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a10      	ldr	r2, [pc, #64]	@ (80018ac <HAL_UART_MspInit+0x80>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <HAL_UART_MspInit+0x80>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800187e:	230c      	movs	r3, #12
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800188e:	2307      	movs	r3, #7
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <HAL_UART_MspInit+0x84>)
 800189a:	f000 fea7 	bl	80025ec <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	@ 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40004400 	.word	0x40004400
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000

080018b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	@ 0x38
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80018ca:	4b33      	ldr	r3, [pc, #204]	@ (8001998 <HAL_InitTick+0xe4>)
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	4a32      	ldr	r2, [pc, #200]	@ (8001998 <HAL_InitTick+0xe4>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6253      	str	r3, [r2, #36]	@ 0x24
 80018d6:	4b30      	ldr	r3, [pc, #192]	@ (8001998 <HAL_InitTick+0xe4>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e2:	f107 0210 	add.w	r2, r7, #16
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f001 fda9 	bl	8003444 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018fc:	f001 fd7a 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8001900:	6378      	str	r0, [r7, #52]	@ 0x34
 8001902:	e004      	b.n	800190e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001904:	f001 fd76 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8001908:	4603      	mov	r3, r0
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800190e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001910:	4a22      	ldr	r2, [pc, #136]	@ (800199c <HAL_InitTick+0xe8>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0c9b      	lsrs	r3, r3, #18
 8001918:	3b01      	subs	r3, #1
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800191c:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_InitTick+0xec>)
 800191e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001922:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001924:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <HAL_InitTick+0xec>)
 8001926:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800192a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800192c:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <HAL_InitTick+0xec>)
 800192e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001930:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001932:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <HAL_InitTick+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_InitTick+0xec>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 800193e:	4818      	ldr	r0, [pc, #96]	@ (80019a0 <HAL_InitTick+0xec>)
 8001940:	f001 fe10 	bl	8003564 <HAL_TIM_Base_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800194a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800194e:	2b00      	cmp	r3, #0
 8001950:	d11b      	bne.n	800198a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001952:	4813      	ldr	r0, [pc, #76]	@ (80019a0 <HAL_InitTick+0xec>)
 8001954:	f001 fe4e 	bl	80035f4 <HAL_TIM_Base_Start_IT>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800195e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001962:	2b00      	cmp	r3, #0
 8001964:	d111      	bne.n	800198a <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001966:	201c      	movs	r0, #28
 8001968:	f000 fe31 	bl	80025ce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b0f      	cmp	r3, #15
 8001970:	d808      	bhi.n	8001984 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001972:	2200      	movs	r2, #0
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	201c      	movs	r0, #28
 8001978:	f000 fe0d 	bl	8002596 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800197c:	4a09      	ldr	r2, [pc, #36]	@ (80019a4 <HAL_InitTick+0xf0>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e002      	b.n	800198a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800198a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800198e:	4618      	mov	r0, r3
 8001990:	3738      	adds	r7, #56	@ 0x38
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	431bde83 	.word	0x431bde83
 80019a0:	200003a8 	.word	0x200003a8
 80019a4:	20000008 	.word	0x20000008

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <NMI_Handler+0x4>

080019b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <MemManage_Handler+0x4>

080019c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <UsageFault_Handler+0x4>

080019d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <TIM2_IRQHandler+0x10>)
 80019e2:	f001 fe59 	bl	8003698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200003a8 	.word	0x200003a8

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <_sbrk+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <_sbrk+0x60>)
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <_sbrk+0x64>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <_sbrk+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a20:	f004 ffd8 	bl	80069d4 <__errno>
 8001a24:	4603      	mov	r3, r0
 8001a26:	220c      	movs	r2, #12
 8001a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e009      	b.n	8001a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a36:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <_sbrk+0x64>)
 8001a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20014000 	.word	0x20014000
 8001a50:	00000400 	.word	0x00000400
 8001a54:	200003e8 	.word	0x200003e8
 8001a58:	20002738 	.word	0x20002738

08001a5c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a68:	f7ff fff8 	bl	8001a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a6c:	480b      	ldr	r0, [pc, #44]	@ (8001a9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a6e:	490c      	ldr	r1, [pc, #48]	@ (8001aa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a70:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a09      	ldr	r2, [pc, #36]	@ (8001aa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a84:	4c09      	ldr	r4, [pc, #36]	@ (8001aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a92:	f004 ffa5 	bl	80069e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a96:	f7ff faeb 	bl	8001070 <main>
  bx lr
 8001a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001aa4:	08007cd0 	.word	0x08007cd0
  ldr r2, =_sbss
 8001aa8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001aac:	20002734 	.word	0x20002734

08001ab0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_IRQHandler>

08001ab2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 fd5f 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f7ff fef6 	bl	80018b4 <HAL_InitTick>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	71fb      	strb	r3, [r7, #7]
 8001ad2:	e001      	b.n	8001ad8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ad4:	f7ff fe36 	bl	8001744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b02      	ldr	r3, [pc, #8]	@ (8001af4 <HAL_GetTick+0x10>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	200003ec 	.word	0x200003ec

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_GetTick>
 8001b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d004      	beq.n	8001b1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_Delay+0x40>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4413      	add	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b1c:	bf00      	nop
 8001b1e:	f7ff ffe1 	bl	8001ae4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d8f7      	bhi.n	8001b1e <HAL_Delay+0x26>
  {
  }
}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000000c 	.word	0x2000000c

08001b3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08e      	sub	sp, #56	@ 0x38
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e127      	b.n	8001dac <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d115      	bne.n	8001b96 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b78:	4b8e      	ldr	r3, [pc, #568]	@ (8001db4 <HAL_ADC_Init+0x278>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a8d      	ldr	r2, [pc, #564]	@ (8001db4 <HAL_ADC_Init+0x278>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6213      	str	r3, [r2, #32]
 8001b84:	4b8b      	ldr	r3, [pc, #556]	@ (8001db4 <HAL_ADC_Init+0x278>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fe0b 	bl	80017ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 80ff 	bne.w	8001da2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bac:	f023 0302 	bic.w	r3, r3, #2
 8001bb0:	f043 0202 	orr.w	r2, r3, #2
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001bb8:	4b7f      	ldr	r3, [pc, #508]	@ (8001db8 <HAL_ADC_Init+0x27c>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	497c      	ldr	r1, [pc, #496]	@ (8001db8 <HAL_ADC_Init+0x27c>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001bd2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001be0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001bf6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001bfc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	2302      	movs	r3, #2
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001c1e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c22:	4313      	orrs	r3, r2
 8001c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d007      	beq.n	8001c3e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c36:	4313      	orrs	r3, r2
 8001c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c48:	2b40      	cmp	r3, #64	@ 0x40
 8001c4a:	d04f      	beq.n	8001cec <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c52:	4313      	orrs	r3, r2
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c5e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6912      	ldr	r2, [r2, #16]
 8001c64:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8001c68:	d003      	beq.n	8001c72 <HAL_ADC_Init+0x136>
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6912      	ldr	r2, [r2, #16]
 8001c6e:	2a01      	cmp	r2, #1
 8001c70:	d102      	bne.n	8001c78 <HAL_ADC_Init+0x13c>
 8001c72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c76:	e000      	b.n	8001c7a <HAL_ADC_Init+0x13e>
 8001c78:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c7a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d125      	bne.n	8001cd8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d114      	bne.n	8001cc0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8001ca0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	fa92 f2a2 	rbit	r2, r2
 8001ca8:	617a      	str	r2, [r7, #20]
  return result;
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	fab2 f282 	clz	r2, r2
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	4093      	lsls	r3, r2
 8001cb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cbe:	e00b      	b.n	8001cd8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4b37      	ldr	r3, [pc, #220]	@ (8001dbc <HAL_ADC_Init+0x280>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	4b33      	ldr	r3, [pc, #204]	@ (8001dc0 <HAL_ADC_Init+0x284>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d08:	d003      	beq.n	8001d12 <HAL_ADC_Init+0x1d6>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d119      	bne.n	8001d46 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d20:	3b01      	subs	r3, #1
 8001d22:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8001d26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	fa92 f2a2 	rbit	r2, r2
 8001d2e:	60fa      	str	r2, [r7, #12]
  return result;
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	fab2 f282 	clz	r2, r2
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	fa03 f202 	lsl.w	r2, r3, r2
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d44:	e007      	b.n	8001d56 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8001d54:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <HAL_ADC_Init+0x288>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d10b      	bne.n	8001d7e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d70:	f023 0303 	bic.w	r3, r3, #3
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d7c:	e014      	b.n	8001da8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	f023 0312 	bic.w	r3, r3, #18
 8001d86:	f043 0210 	orr.w	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001da0:	e002      	b.n	8001da8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001da8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3738      	adds	r7, #56	@ 0x38
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40012700 	.word	0x40012700
 8001dbc:	fcfc16ff 	.word	0xfcfc16ff
 8001dc0:	c0fff189 	.word	0xc0fff189
 8001dc4:	bf80fffe 	.word	0xbf80fffe

08001dc8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Start+0x1a>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e04e      	b.n	8001e80 <HAL_ADC_Start+0xb8>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa80 	bl	80022f0 <ADC_Enable>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d141      	bne.n	8001e7e <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e24:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e38:	d106      	bne.n	8001e48 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e3e:	f023 0206 	bic.w	r2, r3, #6
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e46:	e002      	b.n	8001e4e <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e5e:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d107      	bne.n	8001e7e <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e7c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_Stop+0x1a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e01a      	b.n	8001ed8 <HAL_ADC_Stop+0x50>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fa7c 	bl	80023a8 <ADC_ConversionStop_Disable>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efc:	d113      	bne.n	8001f26 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f0c:	d10b      	bne.n	8001f26 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f12:	f043 0220 	orr.w	r2, r3, #32
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e068      	b.n	8001ff8 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f26:	f7ff fddd 	bl	8001ae4 <HAL_GetTick>
 8001f2a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f2c:	e021      	b.n	8001f72 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d01d      	beq.n	8001f72 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <HAL_ADC_PollForConversion+0x6c>
 8001f3c:	f7ff fdd2 	bl	8001ae4 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d212      	bcs.n	8001f72 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10b      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	f043 0204 	orr.w	r2, r3, #4
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e042      	b.n	8001ff8 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0d6      	beq.n	8001f2e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d104      	bne.n	8001f92 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0212 	mvn.w	r2, #18
 8001f90:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d124      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d11f      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbc:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d111      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x20>
 8002034:	2302      	movs	r3, #2
 8002036:	e14f      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x2c0>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b06      	cmp	r3, #6
 8002046:	d81c      	bhi.n	8002082 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b05      	subs	r3, #5
 800205a:	221f      	movs	r2, #31
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	4019      	ands	r1, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	3b05      	subs	r3, #5
 8002074:	fa00 f203 	lsl.w	r2, r0, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002080:	e07e      	b.n	8002180 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b0c      	cmp	r3, #12
 8002088:	d81c      	bhi.n	80020c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	3b23      	subs	r3, #35	@ 0x23
 800209c:	221f      	movs	r2, #31
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	4019      	ands	r1, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b23      	subs	r3, #35	@ 0x23
 80020b6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020c2:	e05d      	b.n	8002180 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b12      	cmp	r3, #18
 80020ca:	d81c      	bhi.n	8002106 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	3b41      	subs	r3, #65	@ 0x41
 80020de:	221f      	movs	r2, #31
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4019      	ands	r1, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	3b41      	subs	r3, #65	@ 0x41
 80020f8:	fa00 f203 	lsl.w	r2, r0, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	639a      	str	r2, [r3, #56]	@ 0x38
 8002104:	e03c      	b.n	8002180 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b18      	cmp	r3, #24
 800210c:	d81c      	bhi.n	8002148 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	3b5f      	subs	r3, #95	@ 0x5f
 8002120:	221f      	movs	r2, #31
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	4019      	ands	r1, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	3b5f      	subs	r3, #95	@ 0x5f
 800213a:	fa00 f203 	lsl.w	r2, r0, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	635a      	str	r2, [r3, #52]	@ 0x34
 8002146:	e01b      	b.n	8002180 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	3b7d      	subs	r3, #125	@ 0x7d
 800215a:	221f      	movs	r2, #31
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	4019      	ands	r1, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	3b7d      	subs	r3, #125	@ 0x7d
 8002174:	fa00 f203 	lsl.w	r2, r0, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b09      	cmp	r3, #9
 8002186:	d81a      	bhi.n	80021be <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6959      	ldr	r1, [r3, #20]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	2207      	movs	r2, #7
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	4019      	ands	r1, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6898      	ldr	r0, [r3, #8]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	615a      	str	r2, [r3, #20]
 80021bc:	e05d      	b.n	800227a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b13      	cmp	r3, #19
 80021c4:	d81c      	bhi.n	8002200 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6919      	ldr	r1, [r3, #16]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	3b1e      	subs	r3, #30
 80021d8:	2207      	movs	r2, #7
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	4019      	ands	r1, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6898      	ldr	r0, [r3, #8]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	3b1e      	subs	r3, #30
 80021f2:	fa00 f203 	lsl.w	r2, r0, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	611a      	str	r2, [r3, #16]
 80021fe:	e03c      	b.n	800227a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b1d      	cmp	r3, #29
 8002206:	d81c      	bhi.n	8002242 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68d9      	ldr	r1, [r3, #12]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	3b3c      	subs	r3, #60	@ 0x3c
 800221a:	2207      	movs	r2, #7
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	4019      	ands	r1, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6898      	ldr	r0, [r3, #8]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	3b3c      	subs	r3, #60	@ 0x3c
 8002234:	fa00 f203 	lsl.w	r2, r0, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	e01b      	b.n	800227a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	3b5a      	subs	r3, #90	@ 0x5a
 8002254:	2207      	movs	r2, #7
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	4019      	ands	r1, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6898      	ldr	r0, [r3, #8]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	3b5a      	subs	r3, #90	@ 0x5a
 800226e:	fa00 f203 	lsl.w	r2, r0, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b10      	cmp	r3, #16
 8002280:	d003      	beq.n	800228a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002286:	2b11      	cmp	r3, #17
 8002288:	d121      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800228a:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <HAL_ADC_ConfigChannel+0x2cc>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d11b      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002296:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <HAL_ADC_ConfigChannel+0x2cc>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <HAL_ADC_ConfigChannel+0x2cc>)
 800229c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022a0:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d111      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80022aa:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <HAL_ADC_ConfigChannel+0x2d0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a0f      	ldr	r2, [pc, #60]	@ (80022ec <HAL_ADC_ConfigChannel+0x2d4>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	0c9a      	lsrs	r2, r3, #18
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80022c0:	e002      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f9      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40012700 	.word	0x40012700
 80022e8:	20000004 	.word	0x20000004
 80022ec:	431bde83 	.word	0x431bde83

080022f0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230a:	2b40      	cmp	r3, #64	@ 0x40
 800230c:	d043      	beq.n	8002396 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <ADC_Enable+0xb0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a20      	ldr	r2, [pc, #128]	@ (80023a4 <ADC_Enable+0xb4>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	0c9a      	lsrs	r2, r3, #18
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002332:	e002      	b.n	800233a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	3b01      	subs	r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f9      	bne.n	8002334 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002340:	f7ff fbd0 	bl	8001ae4 <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002346:	e01f      	b.n	8002388 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002348:	f7ff fbcc 	bl	8001ae4 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d918      	bls.n	8002388 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002360:	2b40      	cmp	r3, #64	@ 0x40
 8002362:	d011      	beq.n	8002388 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002368:	f043 0210 	orr.w	r2, r3, #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e007      	b.n	8002398 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002392:	2b40      	cmp	r3, #64	@ 0x40
 8002394:	d1d8      	bne.n	8002348 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000004 	.word	0x20000004
 80023a4:	431bde83 	.word	0x431bde83

080023a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023be:	2b40      	cmp	r3, #64	@ 0x40
 80023c0:	d12e      	bne.n	8002420 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023d2:	f7ff fb87 	bl	8001ae4 <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023d8:	e01b      	b.n	8002412 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80023da:	f7ff fb83 	bl	8001ae4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d914      	bls.n	8002412 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f2:	2b40      	cmp	r3, #64	@ 0x40
 80023f4:	d10d      	bne.n	8002412 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fa:	f043 0210 	orr.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e007      	b.n	8002422 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241c:	2b40      	cmp	r3, #64	@ 0x40
 800241e:	d0dc      	beq.n	80023da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	@ (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4906      	ldr	r1, [pc, #24]	@ (80024c4 <__NVIC_EnableIRQ+0x34>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	@ (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	@ (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	@ 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	@ 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff4f 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a8:	f7ff ff64 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7ff ffb2 	bl	800251c <NVIC_EncodePriority>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff81 	bl	80024c8 <__NVIC_SetPriority>
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff57 	bl	8002490 <__NVIC_EnableIRQ>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002602:	e160      	b.n	80028c6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8152 	beq.w	80028c0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d005      	beq.n	8002634 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002630:	2b02      	cmp	r3, #2
 8002632:	d130      	bne.n	8002696 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800266a:	2201      	movs	r2, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 0201 	and.w	r2, r3, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d017      	beq.n	80026d2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d123      	bne.n	8002726 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	6939      	ldr	r1, [r7, #16]
 8002722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0203 	and.w	r2, r3, #3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 80ac 	beq.w	80028c0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002768:	4b5e      	ldr	r3, [pc, #376]	@ (80028e4 <HAL_GPIO_Init+0x2f8>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4a5d      	ldr	r2, [pc, #372]	@ (80028e4 <HAL_GPIO_Init+0x2f8>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6213      	str	r3, [r2, #32]
 8002774:	4b5b      	ldr	r3, [pc, #364]	@ (80028e4 <HAL_GPIO_Init+0x2f8>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002780:	4a59      	ldr	r2, [pc, #356]	@ (80028e8 <HAL_GPIO_Init+0x2fc>)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3302      	adds	r3, #2
 8002788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a51      	ldr	r2, [pc, #324]	@ (80028ec <HAL_GPIO_Init+0x300>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d025      	beq.n	80027f8 <HAL_GPIO_Init+0x20c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a50      	ldr	r2, [pc, #320]	@ (80028f0 <HAL_GPIO_Init+0x304>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d01f      	beq.n	80027f4 <HAL_GPIO_Init+0x208>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a4f      	ldr	r2, [pc, #316]	@ (80028f4 <HAL_GPIO_Init+0x308>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d019      	beq.n	80027f0 <HAL_GPIO_Init+0x204>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a4e      	ldr	r2, [pc, #312]	@ (80028f8 <HAL_GPIO_Init+0x30c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_GPIO_Init+0x200>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a4d      	ldr	r2, [pc, #308]	@ (80028fc <HAL_GPIO_Init+0x310>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00d      	beq.n	80027e8 <HAL_GPIO_Init+0x1fc>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002900 <HAL_GPIO_Init+0x314>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <HAL_GPIO_Init+0x1f8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002904 <HAL_GPIO_Init+0x318>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_GPIO_Init+0x1f4>
 80027dc:	2306      	movs	r3, #6
 80027de:	e00c      	b.n	80027fa <HAL_GPIO_Init+0x20e>
 80027e0:	2307      	movs	r3, #7
 80027e2:	e00a      	b.n	80027fa <HAL_GPIO_Init+0x20e>
 80027e4:	2305      	movs	r3, #5
 80027e6:	e008      	b.n	80027fa <HAL_GPIO_Init+0x20e>
 80027e8:	2304      	movs	r3, #4
 80027ea:	e006      	b.n	80027fa <HAL_GPIO_Init+0x20e>
 80027ec:	2303      	movs	r3, #3
 80027ee:	e004      	b.n	80027fa <HAL_GPIO_Init+0x20e>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e002      	b.n	80027fa <HAL_GPIO_Init+0x20e>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <HAL_GPIO_Init+0x20e>
 80027f8:	2300      	movs	r3, #0
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	f002 0203 	and.w	r2, r2, #3
 8002800:	0092      	lsls	r2, r2, #2
 8002802:	4093      	lsls	r3, r2
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800280a:	4937      	ldr	r1, [pc, #220]	@ (80028e8 <HAL_GPIO_Init+0x2fc>)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3302      	adds	r3, #2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002818:	4b3b      	ldr	r3, [pc, #236]	@ (8002908 <HAL_GPIO_Init+0x31c>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800283c:	4a32      	ldr	r2, [pc, #200]	@ (8002908 <HAL_GPIO_Init+0x31c>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002842:	4b31      	ldr	r3, [pc, #196]	@ (8002908 <HAL_GPIO_Init+0x31c>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002866:	4a28      	ldr	r2, [pc, #160]	@ (8002908 <HAL_GPIO_Init+0x31c>)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286c:	4b26      	ldr	r3, [pc, #152]	@ (8002908 <HAL_GPIO_Init+0x31c>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002890:	4a1d      	ldr	r2, [pc, #116]	@ (8002908 <HAL_GPIO_Init+0x31c>)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002896:	4b1c      	ldr	r3, [pc, #112]	@ (8002908 <HAL_GPIO_Init+0x31c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028ba:	4a13      	ldr	r2, [pc, #76]	@ (8002908 <HAL_GPIO_Init+0x31c>)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3301      	adds	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f47f ae97 	bne.w	8002604 <HAL_GPIO_Init+0x18>
  }
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40010000 	.word	0x40010000
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40021400 	.word	0x40021400
 8002904:	40021800 	.word	0x40021800
 8002908:	40010400 	.word	0x40010400

0800290c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e001      	b.n	800292e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	807b      	strh	r3, [r7, #2]
 8002946:	4613      	mov	r3, r2
 8002948:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800294a:	787b      	ldrb	r3, [r7, #1]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002950:	887a      	ldrh	r2, [r7, #2]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002956:	e003      	b.n	8002960 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002958:	887b      	ldrh	r3, [r7, #2]
 800295a:	041a      	lsls	r2, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	619a      	str	r2, [r3, #24]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800296a:	b480      	push	{r7}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800297c:	887a      	ldrh	r2, [r7, #2]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	041a      	lsls	r2, r3, #16
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	43d9      	mvns	r1, r3
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	400b      	ands	r3, r1
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	619a      	str	r2, [r3, #24]
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e31d      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ae:	4b94      	ldr	r3, [pc, #592]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b8:	4b91      	ldr	r3, [pc, #580]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d07b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d006      	beq.n	80029e2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d10f      	bne.n	80029fa <HAL_RCC_OscConfig+0x5e>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e0:	d10b      	bne.n	80029fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e2:	4b87      	ldr	r3, [pc, #540]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d06a      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x128>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d166      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e2f7      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d106      	bne.n	8002a10 <HAL_RCC_OscConfig+0x74>
 8002a02:	4b7f      	ldr	r3, [pc, #508]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7e      	ldr	r2, [pc, #504]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e02d      	b.n	8002a6c <HAL_RCC_OscConfig+0xd0>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10c      	bne.n	8002a32 <HAL_RCC_OscConfig+0x96>
 8002a18:	4b79      	ldr	r3, [pc, #484]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a78      	ldr	r2, [pc, #480]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b76      	ldr	r3, [pc, #472]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a75      	ldr	r2, [pc, #468]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	e01c      	b.n	8002a6c <HAL_RCC_OscConfig+0xd0>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0xb8>
 8002a3a:	4b71      	ldr	r3, [pc, #452]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a70      	ldr	r2, [pc, #448]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b6e      	ldr	r3, [pc, #440]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6d      	ldr	r2, [pc, #436]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xd0>
 8002a54:	4b6a      	ldr	r3, [pc, #424]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a69      	ldr	r2, [pc, #420]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b67      	ldr	r3, [pc, #412]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a66      	ldr	r2, [pc, #408]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7ff f836 	bl	8001ae4 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7ff f832 	bl	8001ae4 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	@ 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e2ad      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a8e:	4b5c      	ldr	r3, [pc, #368]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xe0>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff f822 	bl	8001ae4 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7ff f81e 	bl	8001ae4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e299      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ab6:	4b52      	ldr	r3, [pc, #328]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x108>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d05a      	beq.n	8002b88 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d119      	bne.n	8002b12 <HAL_RCC_OscConfig+0x176>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d116      	bne.n	8002b12 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae4:	4b46      	ldr	r3, [pc, #280]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_OscConfig+0x160>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e276      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b40      	ldr	r3, [pc, #256]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	493d      	ldr	r1, [pc, #244]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b10:	e03a      	b.n	8002b88 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d020      	beq.n	8002b5c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c04 <HAL_RCC_OscConfig+0x268>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe ffe0 	bl	8001ae4 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b28:	f7fe ffdc 	bl	8001ae4 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e257      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b3a:	4b31      	ldr	r3, [pc, #196]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b46:	4b2e      	ldr	r3, [pc, #184]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	492a      	ldr	r1, [pc, #168]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
 8002b5a:	e015      	b.n	8002b88 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5c:	4b29      	ldr	r3, [pc, #164]	@ (8002c04 <HAL_RCC_OscConfig+0x268>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe ffbf 	bl	8001ae4 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7fe ffbb 	bl	8001ae4 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e236      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b7c:	4b20      	ldr	r3, [pc, #128]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80b8 	beq.w	8002d06 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d170      	bne.n	8002c7e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b9c:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x218>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e21a      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1a      	ldr	r2, [r3, #32]
 8002bb8:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d921      	bls.n	8002c08 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fc6b 	bl	80034a4 <RCC_SetFlashLatencyFromMSIRange>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e208      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bd8:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	4906      	ldr	r1, [pc, #24]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bea:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	061b      	lsls	r3, r3, #24
 8002bf8:	4901      	ldr	r1, [pc, #4]	@ (8002c00 <HAL_RCC_OscConfig+0x264>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
 8002bfe:	e020      	b.n	8002c42 <HAL_RCC_OscConfig+0x2a6>
 8002c00:	40023800 	.word	0x40023800
 8002c04:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c08:	4b99      	ldr	r3, [pc, #612]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4996      	ldr	r1, [pc, #600]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c1a:	4b95      	ldr	r3, [pc, #596]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	061b      	lsls	r3, r3, #24
 8002c28:	4991      	ldr	r1, [pc, #580]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fc36 	bl	80034a4 <RCC_SetFlashLatencyFromMSIRange>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e1d3      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	0b5b      	lsrs	r3, r3, #13
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c52:	4a87      	ldr	r2, [pc, #540]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002c54:	6892      	ldr	r2, [r2, #8]
 8002c56:	0912      	lsrs	r2, r2, #4
 8002c58:	f002 020f 	and.w	r2, r2, #15
 8002c5c:	4985      	ldr	r1, [pc, #532]	@ (8002e74 <HAL_RCC_OscConfig+0x4d8>)
 8002c5e:	5c8a      	ldrb	r2, [r1, r2]
 8002c60:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c62:	4a85      	ldr	r2, [pc, #532]	@ (8002e78 <HAL_RCC_OscConfig+0x4dc>)
 8002c64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c66:	4b85      	ldr	r3, [pc, #532]	@ (8002e7c <HAL_RCC_OscConfig+0x4e0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fe22 	bl	80018b4 <HAL_InitTick>
 8002c70:	4603      	mov	r3, r0
 8002c72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d045      	beq.n	8002d06 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	e1b5      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d029      	beq.n	8002cda <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c86:	4b7e      	ldr	r3, [pc, #504]	@ (8002e80 <HAL_RCC_OscConfig+0x4e4>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe ff2a 	bl	8001ae4 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c94:	f7fe ff26 	bl	8001ae4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1a1      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ca6:	4b72      	ldr	r3, [pc, #456]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cb2:	4b6f      	ldr	r3, [pc, #444]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	496c      	ldr	r1, [pc, #432]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	4967      	ldr	r1, [pc, #412]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cda:	4b69      	ldr	r3, [pc, #420]	@ (8002e80 <HAL_RCC_OscConfig+0x4e4>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe ff00 	bl	8001ae4 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ce8:	f7fe fefc 	bl	8001ae4 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e177      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d030      	beq.n	8002d74 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d016      	beq.n	8002d48 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8002e84 <HAL_RCC_OscConfig+0x4e8>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7fe fee0 	bl	8001ae4 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fe fedc 	bl	8001ae4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e157      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x38c>
 8002d46:	e015      	b.n	8002d74 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d48:	4b4e      	ldr	r3, [pc, #312]	@ (8002e84 <HAL_RCC_OscConfig+0x4e8>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fec9 	bl	8001ae4 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fe fec5 	bl	8001ae4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e140      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d68:	4b41      	ldr	r3, [pc, #260]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80b5 	beq.w	8002eec <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d86:	4b3a      	ldr	r3, [pc, #232]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10d      	bne.n	8002dae <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	4b37      	ldr	r3, [pc, #220]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	4a36      	ldr	r2, [pc, #216]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	6253      	str	r3, [r2, #36]	@ 0x24
 8002d9e:	4b34      	ldr	r3, [pc, #208]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002daa:	2301      	movs	r3, #1
 8002dac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dae:	4b36      	ldr	r3, [pc, #216]	@ (8002e88 <HAL_RCC_OscConfig+0x4ec>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d118      	bne.n	8002dec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dba:	4b33      	ldr	r3, [pc, #204]	@ (8002e88 <HAL_RCC_OscConfig+0x4ec>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a32      	ldr	r2, [pc, #200]	@ (8002e88 <HAL_RCC_OscConfig+0x4ec>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fe8d 	bl	8001ae4 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dce:	f7fe fe89 	bl	8001ae4 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b64      	cmp	r3, #100	@ 0x64
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e104      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	4b29      	ldr	r3, [pc, #164]	@ (8002e88 <HAL_RCC_OscConfig+0x4ec>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x466>
 8002df4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfe:	6353      	str	r3, [r2, #52]	@ 0x34
 8002e00:	e02d      	b.n	8002e5e <HAL_RCC_OscConfig+0x4c2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x488>
 8002e0a:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e0e:	4a18      	ldr	r2, [pc, #96]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e14:	6353      	str	r3, [r2, #52]	@ 0x34
 8002e16:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1a:	4a15      	ldr	r2, [pc, #84]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e20:	6353      	str	r3, [r2, #52]	@ 0x34
 8002e22:	e01c      	b.n	8002e5e <HAL_RCC_OscConfig+0x4c2>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d10c      	bne.n	8002e46 <HAL_RCC_OscConfig+0x4aa>
 8002e2c:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e30:	4a0f      	ldr	r2, [pc, #60]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e36:	6353      	str	r3, [r2, #52]	@ 0x34
 8002e38:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e42:	6353      	str	r3, [r2, #52]	@ 0x34
 8002e44:	e00b      	b.n	8002e5e <HAL_RCC_OscConfig+0x4c2>
 8002e46:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4a:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e50:	6353      	str	r3, [r2, #52]	@ 0x34
 8002e52:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e56:	4a06      	ldr	r2, [pc, #24]	@ (8002e70 <HAL_RCC_OscConfig+0x4d4>)
 8002e58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e5c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d024      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e66:	f7fe fe3d 	bl	8001ae4 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e6c:	e019      	b.n	8002ea2 <HAL_RCC_OscConfig+0x506>
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	08007c58 	.word	0x08007c58
 8002e78:	20000004 	.word	0x20000004
 8002e7c:	20000008 	.word	0x20000008
 8002e80:	42470020 	.word	0x42470020
 8002e84:	42470680 	.word	0x42470680
 8002e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fe2a 	bl	8001ae4 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0a3      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ea2:	4b54      	ldr	r3, [pc, #336]	@ (8002ff4 <HAL_RCC_OscConfig+0x658>)
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0ee      	beq.n	8002e8c <HAL_RCC_OscConfig+0x4f0>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb0:	f7fe fe18 	bl	8001ae4 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fe14 	bl	8001ae4 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e08d      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ece:	4b49      	ldr	r3, [pc, #292]	@ (8002ff4 <HAL_RCC_OscConfig+0x658>)
 8002ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ee      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eda:	7ffb      	ldrb	r3, [r7, #31]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee0:	4b44      	ldr	r3, [pc, #272]	@ (8002ff4 <HAL_RCC_OscConfig+0x658>)
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	4a43      	ldr	r2, [pc, #268]	@ (8002ff4 <HAL_RCC_OscConfig+0x658>)
 8002ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d079      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d056      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d13b      	bne.n	8002f7a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff8 <HAL_RCC_OscConfig+0x65c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe fdec 	bl	8001ae4 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe fde8 	bl	8001ae4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e063      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f22:	4b34      	ldr	r3, [pc, #208]	@ (8002ff4 <HAL_RCC_OscConfig+0x658>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2e:	4b31      	ldr	r3, [pc, #196]	@ (8002ff4 <HAL_RCC_OscConfig+0x658>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3e:	4319      	orrs	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f44:	430b      	orrs	r3, r1
 8002f46:	492b      	ldr	r1, [pc, #172]	@ (8002ff4 <HAL_RCC_OscConfig+0x658>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff8 <HAL_RCC_OscConfig+0x65c>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f52:	f7fe fdc7 	bl	8001ae4 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7fe fdc3 	bl	8001ae4 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e03e      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f6c:	4b21      	ldr	r3, [pc, #132]	@ (8002ff4 <HAL_RCC_OscConfig+0x658>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x5be>
 8002f78:	e036      	b.n	8002fe8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff8 <HAL_RCC_OscConfig+0x65c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7fe fdb0 	bl	8001ae4 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe fdac 	bl	8001ae4 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e027      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <HAL_RCC_OscConfig+0x658>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5ec>
 8002fa6:	e01f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e01a      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff4 <HAL_RCC_OscConfig+0x658>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	42470060 	.word	0x42470060

08002ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e11a      	b.n	8003246 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003010:	4b8f      	ldr	r3, [pc, #572]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d919      	bls.n	8003052 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <HAL_RCC_ClockConfig+0x34>
 8003024:	4b8a      	ldr	r3, [pc, #552]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a89      	ldr	r2, [pc, #548]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 800302a:	f043 0304 	orr.w	r3, r3, #4
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b87      	ldr	r3, [pc, #540]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 0201 	bic.w	r2, r3, #1
 8003038:	4985      	ldr	r1, [pc, #532]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	4313      	orrs	r3, r2
 800303e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003040:	4b83      	ldr	r3, [pc, #524]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d001      	beq.n	8003052 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0f9      	b.n	8003246 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800305e:	4b7d      	ldr	r3, [pc, #500]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	497a      	ldr	r1, [pc, #488]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 808e 	beq.w	800319a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003086:	4b73      	ldr	r3, [pc, #460]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d121      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0d7      	b.n	8003246 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800309e:	4b6d      	ldr	r3, [pc, #436]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0cb      	b.n	8003246 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b6:	4b67      	ldr	r3, [pc, #412]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e0bf      	b.n	8003246 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030c6:	4b63      	ldr	r3, [pc, #396]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0b7      	b.n	8003246 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	495c      	ldr	r1, [pc, #368]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030e8:	f7fe fcfc 	bl	8001ae4 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d112      	bne.n	800311c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fe fcf4 	bl	8001ae4 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e09b      	b.n	8003246 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800310e:	4b51      	ldr	r3, [pc, #324]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b08      	cmp	r3, #8
 8003118:	d1ee      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xfc>
 800311a:	e03e      	b.n	800319a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d112      	bne.n	800314a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003124:	e00a      	b.n	800313c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003126:	f7fe fcdd 	bl	8001ae4 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e084      	b.n	8003246 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800313c:	4b45      	ldr	r3, [pc, #276]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d1ee      	bne.n	8003126 <HAL_RCC_ClockConfig+0x12a>
 8003148:	e027      	b.n	800319a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d11d      	bne.n	800318e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe fcc6 	bl	8001ae4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e06d      	b.n	8003246 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800316a:	4b3a      	ldr	r3, [pc, #232]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b04      	cmp	r3, #4
 8003174:	d1ee      	bne.n	8003154 <HAL_RCC_ClockConfig+0x158>
 8003176:	e010      	b.n	800319a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003178:	f7fe fcb4 	bl	8001ae4 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e05b      	b.n	8003246 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800318e:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1ee      	bne.n	8003178 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800319a:	4b2d      	ldr	r3, [pc, #180]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d219      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <HAL_RCC_ClockConfig+0x1be>
 80031ae:	4b28      	ldr	r3, [pc, #160]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a27      	ldr	r2, [pc, #156]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 80031b4:	f043 0304 	orr.w	r3, r3, #4
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b25      	ldr	r3, [pc, #148]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0201 	bic.w	r2, r3, #1
 80031c2:	4923      	ldr	r1, [pc, #140]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <HAL_RCC_ClockConfig+0x254>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e034      	b.n	8003246 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4917      	ldr	r1, [pc, #92]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003206:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490f      	ldr	r1, [pc, #60]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f823 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 800321e:	4602      	mov	r2, r0
 8003220:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <HAL_RCC_ClockConfig+0x258>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	490b      	ldr	r1, [pc, #44]	@ (8003258 <HAL_RCC_ClockConfig+0x25c>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a0a      	ldr	r2, [pc, #40]	@ (800325c <HAL_RCC_ClockConfig+0x260>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003236:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fb3a 	bl	80018b4 <HAL_InitTick>
 8003240:	4603      	mov	r3, r0
 8003242:	72fb      	strb	r3, [r7, #11]

  return status;
 8003244:	7afb      	ldrb	r3, [r7, #11]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40023c00 	.word	0x40023c00
 8003254:	40023800 	.word	0x40023800
 8003258:	08007c58 	.word	0x08007c58
 800325c:	20000004 	.word	0x20000004
 8003260:	20000008 	.word	0x20000008

08003264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003268:	b08e      	sub	sp, #56	@ 0x38
 800326a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800326c:	4b58      	ldr	r3, [pc, #352]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x16c>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b0c      	cmp	r3, #12
 800327a:	d00d      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x34>
 800327c:	2b0c      	cmp	r3, #12
 800327e:	f200 8092 	bhi.w	80033a6 <HAL_RCC_GetSysClockFreq+0x142>
 8003282:	2b04      	cmp	r3, #4
 8003284:	d002      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0x28>
 8003286:	2b08      	cmp	r3, #8
 8003288:	d003      	beq.n	8003292 <HAL_RCC_GetSysClockFreq+0x2e>
 800328a:	e08c      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800328c:	4b51      	ldr	r3, [pc, #324]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x170>)
 800328e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003290:	e097      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003292:	4b51      	ldr	r3, [pc, #324]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x174>)
 8003294:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003296:	e094      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329a:	0c9b      	lsrs	r3, r3, #18
 800329c:	f003 020f 	and.w	r2, r3, #15
 80032a0:	4b4e      	ldr	r3, [pc, #312]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x178>)
 80032a2:	5c9b      	ldrb	r3, [r3, r2]
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80032a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a8:	0d9b      	lsrs	r3, r3, #22
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	3301      	adds	r3, #1
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b2:	4b47      	ldr	r3, [pc, #284]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d021      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80032be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c0:	2200      	movs	r2, #0
 80032c2:	61bb      	str	r3, [r7, #24]
 80032c4:	61fa      	str	r2, [r7, #28]
 80032c6:	4b44      	ldr	r3, [pc, #272]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x174>)
 80032c8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80032cc:	464a      	mov	r2, r9
 80032ce:	fb03 f202 	mul.w	r2, r3, r2
 80032d2:	2300      	movs	r3, #0
 80032d4:	4644      	mov	r4, r8
 80032d6:	fb04 f303 	mul.w	r3, r4, r3
 80032da:	4413      	add	r3, r2
 80032dc:	4a3e      	ldr	r2, [pc, #248]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x174>)
 80032de:	4644      	mov	r4, r8
 80032e0:	fba4 0102 	umull	r0, r1, r4, r2
 80032e4:	440b      	add	r3, r1
 80032e6:	4619      	mov	r1, r3
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	2200      	movs	r2, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	617a      	str	r2, [r7, #20]
 80032f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032f4:	f7fd fa46 	bl	8000784 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4613      	mov	r3, r2
 80032fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003300:	e04e      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003304:	2200      	movs	r2, #0
 8003306:	469a      	mov	sl, r3
 8003308:	4693      	mov	fp, r2
 800330a:	4652      	mov	r2, sl
 800330c:	465b      	mov	r3, fp
 800330e:	f04f 0000 	mov.w	r0, #0
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	0159      	lsls	r1, r3, #5
 8003318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800331c:	0150      	lsls	r0, r2, #5
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	ebb2 080a 	subs.w	r8, r2, sl
 8003326:	eb63 090b 	sbc.w	r9, r3, fp
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003336:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800333a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800333e:	ebb2 0408 	subs.w	r4, r2, r8
 8003342:	eb63 0509 	sbc.w	r5, r3, r9
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	00eb      	lsls	r3, r5, #3
 8003350:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003354:	00e2      	lsls	r2, r4, #3
 8003356:	4614      	mov	r4, r2
 8003358:	461d      	mov	r5, r3
 800335a:	eb14 030a 	adds.w	r3, r4, sl
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	eb45 030b 	adc.w	r3, r5, fp
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003372:	4629      	mov	r1, r5
 8003374:	028b      	lsls	r3, r1, #10
 8003376:	4620      	mov	r0, r4
 8003378:	4629      	mov	r1, r5
 800337a:	4604      	mov	r4, r0
 800337c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003380:	4601      	mov	r1, r0
 8003382:	028a      	lsls	r2, r1, #10
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	2200      	movs	r2, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	60fa      	str	r2, [r7, #12]
 8003390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003394:	f7fd f9f6 	bl	8000784 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 80033a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80033a4:	e00d      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80033a6:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	0b5b      	lsrs	r3, r3, #13
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	3301      	adds	r3, #1
 80033b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80033c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3738      	adds	r7, #56	@ 0x38
 80033c8:	46bd      	mov	sp, r7
 80033ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	016e3600 	.word	0x016e3600
 80033dc:	08007c4c 	.word	0x08007c4c

080033e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e4:	4b02      	ldr	r3, [pc, #8]	@ (80033f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	20000004 	.word	0x20000004

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f8:	f7ff fff2 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4903      	ldr	r1, [pc, #12]	@ (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	08007c68 	.word	0x08007c68

0800341c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003420:	f7ff ffde 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	@ (800343c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0adb      	lsrs	r3, r3, #11
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4903      	ldr	r1, [pc, #12]	@ (8003440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	08007c68 	.word	0x08007c68

08003444 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	220f      	movs	r2, #15
 8003452:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003454:	4b11      	ldr	r3, [pc, #68]	@ (800349c <HAL_RCC_GetClockConfig+0x58>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003460:	4b0e      	ldr	r3, [pc, #56]	@ (800349c <HAL_RCC_GetClockConfig+0x58>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800346c:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <HAL_RCC_GetClockConfig+0x58>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003478:	4b08      	ldr	r3, [pc, #32]	@ (800349c <HAL_RCC_GetClockConfig+0x58>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003486:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0201 	and.w	r2, r3, #1
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	601a      	str	r2, [r3, #0]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	40023800 	.word	0x40023800
 80034a0:	40023c00 	.word	0x40023c00

080034a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80034b0:	4b29      	ldr	r3, [pc, #164]	@ (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d12c      	bne.n	8003516 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034bc:	4b26      	ldr	r3, [pc, #152]	@ (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80034c8:	4b24      	ldr	r3, [pc, #144]	@ (800355c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e016      	b.n	8003502 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d4:	4b20      	ldr	r3, [pc, #128]	@ (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034de:	6253      	str	r3, [r2, #36]	@ 0x24
 80034e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80034ec:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80034f4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f6:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	4a17      	ldr	r2, [pc, #92]	@ (8003558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003500:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003508:	d105      	bne.n	8003516 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003510:	d101      	bne.n	8003516 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003512:	2301      	movs	r3, #1
 8003514:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d105      	bne.n	8003528 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800351c:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0f      	ldr	r2, [pc, #60]	@ (8003560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 0201 	bic.w	r2, r3, #1
 8003530:	490b      	ldr	r1, [pc, #44]	@ (8003560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003538:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	429a      	cmp	r2, r3
 8003544:	d001      	beq.n	800354a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40007000 	.word	0x40007000
 8003560:	40023c00 	.word	0x40023c00

08003564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e031      	b.n	80035da <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f829 	bl	80035e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f000 f972 	bl	800388c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d001      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e03a      	b.n	8003682 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d00e      	beq.n	800364c <HAL_TIM_Base_Start_IT+0x58>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a16      	ldr	r2, [pc, #88]	@ (800368c <HAL_TIM_Base_Start_IT+0x98>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_TIM_Base_Start_IT+0x58>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a14      	ldr	r2, [pc, #80]	@ (8003690 <HAL_TIM_Base_Start_IT+0x9c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_TIM_Base_Start_IT+0x58>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <HAL_TIM_Base_Start_IT+0xa0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d111      	bne.n	8003670 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b06      	cmp	r3, #6
 800365c:	d010      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	e007      	b.n	8003680 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40010800 	.word	0x40010800

08003698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d020      	beq.n	80036fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01b      	beq.n	80036fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0202 	mvn.w	r2, #2
 80036cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8b6 	bl	8003854 <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8a9 	bl	8003842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8b8 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d020      	beq.n	8003748 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0204 	mvn.w	r2, #4
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f890 	bl	8003854 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f883 	bl	8003842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f892 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d020      	beq.n	8003794 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01b      	beq.n	8003794 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0208 	mvn.w	r2, #8
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2204      	movs	r2, #4
 800376a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f86a 	bl	8003854 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f85d 	bl	8003842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f86c 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	d020      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01b      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0210 	mvn.w	r2, #16
 80037b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2208      	movs	r2, #8
 80037b6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f844 	bl	8003854 <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f837 	bl	8003842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f846 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0201 	mvn.w	r2, #1
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f816 	bl	8003830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f828 	bl	8003878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
	...

0800388c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a2:	d00f      	beq.n	80038c4 <TIM_Base_SetConfig+0x38>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003960 <TIM_Base_SetConfig+0xd4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00b      	beq.n	80038c4 <TIM_Base_SetConfig+0x38>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003964 <TIM_Base_SetConfig+0xd8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d007      	beq.n	80038c4 <TIM_Base_SetConfig+0x38>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003968 <TIM_Base_SetConfig+0xdc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_Base_SetConfig+0x38>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a2b      	ldr	r2, [pc, #172]	@ (800396c <TIM_Base_SetConfig+0xe0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d108      	bne.n	80038d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038dc:	d017      	beq.n	800390e <TIM_Base_SetConfig+0x82>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003960 <TIM_Base_SetConfig+0xd4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <TIM_Base_SetConfig+0x82>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003964 <TIM_Base_SetConfig+0xd8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00f      	beq.n	800390e <TIM_Base_SetConfig+0x82>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003968 <TIM_Base_SetConfig+0xdc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00b      	beq.n	800390e <TIM_Base_SetConfig+0x82>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a1c      	ldr	r2, [pc, #112]	@ (800396c <TIM_Base_SetConfig+0xe0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d007      	beq.n	800390e <TIM_Base_SetConfig+0x82>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a1b      	ldr	r2, [pc, #108]	@ (8003970 <TIM_Base_SetConfig+0xe4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <TIM_Base_SetConfig+0x82>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a1a      	ldr	r2, [pc, #104]	@ (8003974 <TIM_Base_SetConfig+0xe8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d108      	bne.n	8003920 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800
 8003968:	40000c00 	.word	0x40000c00
 800396c:	40010800 	.word	0x40010800
 8003970:	40010c00 	.word	0x40010c00
 8003974:	40011000 	.word	0x40011000

08003978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e042      	b.n	8003a10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd ff44 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2224      	movs	r2, #36	@ 0x24
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fa09 	bl	8003dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	@ 0x28
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d175      	bne.n	8003b24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_UART_Transmit+0x2c>
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e06e      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2221      	movs	r2, #33	@ 0x21
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a56:	f7fe f845 	bl	8001ae4 <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a70:	d108      	bne.n	8003a84 <HAL_UART_Transmit+0x6c>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d104      	bne.n	8003a84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	e003      	b.n	8003a8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a8c:	e02e      	b.n	8003aec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2180      	movs	r1, #128	@ 0x80
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f8df 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e03a      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10b      	bne.n	8003ace <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	3302      	adds	r3, #2
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	e007      	b.n	8003ade <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	3301      	adds	r3, #1
 8003adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1cb      	bne.n	8003a8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2200      	movs	r2, #0
 8003afe:	2140      	movs	r1, #64	@ 0x40
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f8ab 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e006      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b08a      	sub	sp, #40	@ 0x28
 8003b32:	af02      	add	r7, sp, #8
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	f040 8081 	bne.w	8003c52 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_UART_Receive+0x2e>
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e079      	b.n	8003c54 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2222      	movs	r2, #34	@ 0x22
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b74:	f7fd ffb6 	bl	8001ae4 <HAL_GetTick>
 8003b78:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b8e:	d108      	bne.n	8003ba2 <HAL_UART_Receive+0x74>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	e003      	b.n	8003baa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003baa:	e047      	b.n	8003c3c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2120      	movs	r1, #32
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f850 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e042      	b.n	8003c54 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10c      	bne.n	8003bee <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	3302      	adds	r3, #2
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	e01f      	b.n	8003c2e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf6:	d007      	beq.n	8003c08 <HAL_UART_Receive+0xda>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <HAL_UART_Receive+0xe8>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e008      	b.n	8003c28 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1b2      	bne.n	8003bac <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e000      	b.n	8003c54 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003c52:	2302      	movs	r3, #2
  }
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6c:	e03b      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d037      	beq.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c76:	f7fd ff35 	bl	8001ae4 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	6a3a      	ldr	r2, [r7, #32]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d302      	bcc.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e03a      	b.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d023      	beq.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b80      	cmp	r3, #128	@ 0x80
 8003ca2:	d020      	beq.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b40      	cmp	r3, #64	@ 0x40
 8003ca8:	d01d      	beq.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d116      	bne.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f81d 	bl	8003d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00f      	b.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d0b4      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b095      	sub	sp, #84	@ 0x54
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d36:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e5      	bne.n	8003d16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e5      	bne.n	8003d4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d119      	bne.n	8003dba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f023 0310 	bic.w	r3, r3, #16
 8003d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003da6:	61ba      	str	r2, [r7, #24]
 8003da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6979      	ldr	r1, [r7, #20]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	613b      	str	r3, [r7, #16]
   return(result);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dc8:	bf00      	nop
 8003dca:	3754      	adds	r7, #84	@ 0x54
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
	...

08003dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003e14:	f023 030c 	bic.w	r3, r3, #12
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a55      	ldr	r2, [pc, #340]	@ (8003f94 <UART_SetConfig+0x1c0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d103      	bne.n	8003e4a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e42:	f7ff faeb 	bl	800341c <HAL_RCC_GetPCLK2Freq>
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	e002      	b.n	8003e50 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e4a:	f7ff fad3 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8003e4e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e58:	d14c      	bne.n	8003ef4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009a      	lsls	r2, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	4a49      	ldr	r2, [pc, #292]	@ (8003f98 <UART_SetConfig+0x1c4>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	0119      	lsls	r1, r3, #4
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009a      	lsls	r2, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e90:	4b41      	ldr	r3, [pc, #260]	@ (8003f98 <UART_SetConfig+0x1c4>)
 8003e92:	fba3 0302 	umull	r0, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2064      	movs	r0, #100	@ 0x64
 8003e9a:	fb00 f303 	mul.w	r3, r0, r3
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	3332      	adds	r3, #50	@ 0x32
 8003ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8003f98 <UART_SetConfig+0x1c4>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003eb2:	4419      	add	r1, r3
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	009a      	lsls	r2, r3, #2
 8003ebe:	441a      	add	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eca:	4b33      	ldr	r3, [pc, #204]	@ (8003f98 <UART_SetConfig+0x1c4>)
 8003ecc:	fba3 0302 	umull	r0, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	2064      	movs	r0, #100	@ 0x64
 8003ed4:	fb00 f303 	mul.w	r3, r0, r3
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	3332      	adds	r3, #50	@ 0x32
 8003ede:	4a2e      	ldr	r2, [pc, #184]	@ (8003f98 <UART_SetConfig+0x1c4>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	f003 0207 	and.w	r2, r3, #7
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	440a      	add	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ef2:	e04a      	b.n	8003f8a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009a      	lsls	r2, r3, #2
 8003efe:	441a      	add	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	4a23      	ldr	r2, [pc, #140]	@ (8003f98 <UART_SetConfig+0x1c4>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	0119      	lsls	r1, r3, #4
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009a      	lsls	r2, r3, #2
 8003f1e:	441a      	add	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f98 <UART_SetConfig+0x1c4>)
 8003f2c:	fba3 0302 	umull	r0, r3, r3, r2
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	2064      	movs	r0, #100	@ 0x64
 8003f34:	fb00 f303 	mul.w	r3, r0, r3
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	3332      	adds	r3, #50	@ 0x32
 8003f3e:	4a16      	ldr	r2, [pc, #88]	@ (8003f98 <UART_SetConfig+0x1c4>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f4a:	4419      	add	r1, r3
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009a      	lsls	r2, r3, #2
 8003f56:	441a      	add	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f62:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <UART_SetConfig+0x1c4>)
 8003f64:	fba3 0302 	umull	r0, r3, r3, r2
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	2064      	movs	r0, #100	@ 0x64
 8003f6c:	fb00 f303 	mul.w	r3, r0, r3
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	3332      	adds	r3, #50	@ 0x32
 8003f76:	4a08      	ldr	r2, [pc, #32]	@ (8003f98 <UART_SetConfig+0x1c4>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	f003 020f 	and.w	r2, r3, #15
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	440a      	add	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40013800 	.word	0x40013800
 8003f98:	51eb851f 	.word	0x51eb851f

08003f9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fae:	2b84      	cmp	r3, #132	@ 0x84
 8003fb0:	d005      	beq.n	8003fbe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003fb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3303      	adds	r3, #3
 8003fbc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fd0:	f3ef 8305 	mrs	r3, IPSR
 8003fd4:	607b      	str	r3, [r7, #4]
  return(result);
 8003fd6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf14      	ite	ne
 8003fdc:	2301      	movne	r3, #1
 8003fde:	2300      	moveq	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ff0:	f001 f952 	bl	8005298 <vTaskStartScheduler>
  
  return osOK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffc:	b089      	sub	sp, #36	@ 0x24
 8003ffe:	af04      	add	r7, sp, #16
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d020      	beq.n	800404e <osThreadCreate+0x54>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01c      	beq.n	800404e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685c      	ldr	r4, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691e      	ldr	r6, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ffb8 	bl	8003f9c <makeFreeRtosPriority>
 800402c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004036:	9202      	str	r2, [sp, #8]
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	9100      	str	r1, [sp, #0]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	4632      	mov	r2, r6
 8004040:	4629      	mov	r1, r5
 8004042:	4620      	mov	r0, r4
 8004044:	f000 ff63 	bl	8004f0e <xTaskCreateStatic>
 8004048:	4603      	mov	r3, r0
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e01c      	b.n	8004088 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685c      	ldr	r4, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800405a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff ff9a 	bl	8003f9c <makeFreeRtosPriority>
 8004068:	4602      	mov	r2, r0
 800406a:	f107 030c 	add.w	r3, r7, #12
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	9200      	str	r2, [sp, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	4632      	mov	r2, r6
 8004076:	4629      	mov	r1, r5
 8004078:	4620      	mov	r0, r4
 800407a:	f000 ffa7 	bl	8004fcc <xTaskCreate>
 800407e:	4603      	mov	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d001      	beq.n	8004088 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004084:	2300      	movs	r3, #0
 8004086:	e000      	b.n	800408a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004088:	68fb      	ldr	r3, [r7, #12]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004092 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <osDelay+0x16>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	e000      	b.n	80040aa <osDelay+0x18>
 80040a8:	2301      	movs	r3, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 f8be 	bl	800522c <vTaskDelay>
  
  return osOK;
 80040b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4619      	mov	r1, r3
 80040d0:	2001      	movs	r0, #1
 80040d2:	f000 fab5 	bl	8004640 <xQueueCreateMutexStatic>
 80040d6:	4603      	mov	r3, r0
 80040d8:	e003      	b.n	80040e2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80040da:	2001      	movs	r0, #1
 80040dc:	f000 fa98 	bl	8004610 <xQueueCreateMutex>
 80040e0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <osMutexWait+0x18>
    return osErrorParameter;
 8004100:	2380      	movs	r3, #128	@ 0x80
 8004102:	e03a      	b.n	800417a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d103      	bne.n	8004118 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	e009      	b.n	800412c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d006      	beq.n	800412c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <osMutexWait+0x40>
      ticks = 1;
 8004128:	2301      	movs	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800412c:	f7ff ff4d 	bl	8003fca <inHandlerMode>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d017      	beq.n	8004166 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004136:	f107 0308 	add.w	r3, r7, #8
 800413a:	461a      	mov	r2, r3
 800413c:	2100      	movs	r1, #0
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fd3c 	bl	8004bbc <xQueueReceiveFromISR>
 8004144:	4603      	mov	r3, r0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d001      	beq.n	800414e <osMutexWait+0x62>
      return osErrorOS;
 800414a:	23ff      	movs	r3, #255	@ 0xff
 800414c:	e015      	b.n	800417a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d011      	beq.n	8004178 <osMutexWait+0x8c>
 8004154:	4b0b      	ldr	r3, [pc, #44]	@ (8004184 <osMutexWait+0x98>)
 8004156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	e008      	b.n	8004178 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fc17 	bl	800499c <xQueueSemaphoreTake>
 800416e:	4603      	mov	r3, r0
 8004170:	2b01      	cmp	r3, #1
 8004172:	d001      	beq.n	8004178 <osMutexWait+0x8c>
    return osErrorOS;
 8004174:	23ff      	movs	r3, #255	@ 0xff
 8004176:	e000      	b.n	800417a <osMutexWait+0x8e>
  }
  
  return osOK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	e000ed04 	.word	0xe000ed04

08004188 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004194:	2300      	movs	r3, #0
 8004196:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004198:	f7ff ff17 	bl	8003fca <inHandlerMode>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d016      	beq.n	80041d0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80041a2:	f107 0308 	add.w	r3, r7, #8
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fb67 	bl	800487c <xQueueGiveFromISR>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d001      	beq.n	80041b8 <osMutexRelease+0x30>
      return osErrorOS;
 80041b4:	23ff      	movs	r3, #255	@ 0xff
 80041b6:	e017      	b.n	80041e8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d013      	beq.n	80041e6 <osMutexRelease+0x5e>
 80041be:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <osMutexRelease+0x68>)
 80041c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	e00a      	b.n	80041e6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80041d0:	2300      	movs	r3, #0
 80041d2:	2200      	movs	r2, #0
 80041d4:	2100      	movs	r1, #0
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fa4e 	bl	8004678 <xQueueGenericSend>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d001      	beq.n	80041e6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80041e2:	23ff      	movs	r3, #255	@ 0xff
 80041e4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f103 0208 	add.w	r2, r3, #8
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f04f 32ff 	mov.w	r2, #4294967295
 800420c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f103 0208 	add.w	r2, r3, #8
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f103 0208 	add.w	r2, r3, #8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr

08004290 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	d103      	bne.n	80042b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e00c      	b.n	80042ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3308      	adds	r3, #8
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e002      	b.n	80042be <vListInsert+0x2e>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d2f6      	bcs.n	80042b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	601a      	str	r2, [r3, #0]
}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6892      	ldr	r2, [r2, #8]
 8004316:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6852      	ldr	r2, [r2, #4]
 8004320:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	429a      	cmp	r2, r3
 800432a:	d103      	bne.n	8004334 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	1e5a      	subs	r2, r3, #1
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
	...

08004354 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	e7fd      	b.n	800437c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004380:	f001 fed4 	bl	800612c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438c:	68f9      	ldr	r1, [r7, #12]
 800438e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	441a      	add	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b0:	3b01      	subs	r3, #1
 80043b2:	68f9      	ldr	r1, [r7, #12]
 80043b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	441a      	add	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	22ff      	movs	r2, #255	@ 0xff
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	22ff      	movs	r2, #255	@ 0xff
 80043cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d114      	bne.n	8004400 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01a      	beq.n	8004414 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3310      	adds	r3, #16
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 f9a6 	bl	8005734 <xTaskRemoveFromEventList>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d012      	beq.n	8004414 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <xQueueGenericReset+0xd0>)
 80043f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	e009      	b.n	8004414 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3310      	adds	r3, #16
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fef5 	bl	80041f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3324      	adds	r3, #36	@ 0x24
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fef0 	bl	80041f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004414:	f001 feba 	bl	800618c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004418:	2301      	movs	r3, #1
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08e      	sub	sp, #56	@ 0x38
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800444e:	bf00      	nop
 8004450:	bf00      	nop
 8004452:	e7fd      	b.n	8004450 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	e7fd      	b.n	800446e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <xQueueGenericCreateStatic+0x56>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <xQueueGenericCreateStatic+0x5a>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <xQueueGenericCreateStatic+0x5c>
 8004482:	2300      	movs	r3, #0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10b      	bne.n	80044a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	623b      	str	r3, [r7, #32]
}
 800449a:	bf00      	nop
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <xQueueGenericCreateStatic+0x84>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <xQueueGenericCreateStatic+0x88>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <xQueueGenericCreateStatic+0x8a>
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	61fb      	str	r3, [r7, #28]
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	e7fd      	b.n	80044ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044ce:	2348      	movs	r3, #72	@ 0x48
 80044d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b48      	cmp	r3, #72	@ 0x48
 80044d6:	d00b      	beq.n	80044f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	61bb      	str	r3, [r7, #24]
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80044f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00d      	beq.n	8004516 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004502:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	4613      	mov	r3, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f844 	bl	800459e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004518:	4618      	mov	r0, r3
 800451a:	3730      	adds	r7, #48	@ 0x30
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	@ 0x28
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <xQueueGenericCreate+0x2c>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	613b      	str	r3, [r7, #16]
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	e004      	b.n	8004562 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	fb02 f303 	mul.w	r3, r2, r3
 8004560:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3348      	adds	r3, #72	@ 0x48
 8004566:	4618      	mov	r0, r3
 8004568:	f001 fee2 	bl	8006330 <pvPortMalloc>
 800456c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00f      	beq.n	8004594 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	3348      	adds	r3, #72	@ 0x48
 8004578:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004582:	79fa      	ldrb	r2, [r7, #7]
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f805 	bl	800459e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004594:	69bb      	ldr	r3, [r7, #24]
	}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e002      	b.n	80045c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045cc:	2101      	movs	r1, #1
 80045ce:	69b8      	ldr	r0, [r7, #24]
 80045d0:	f7ff fec0 	bl	8004354 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00e      	beq.n	8004608 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80045fc:	2300      	movs	r3, #0
 80045fe:	2200      	movs	r2, #0
 8004600:	2100      	movs	r1, #0
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f838 	bl	8004678 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800461a:	2301      	movs	r3, #1
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	461a      	mov	r2, r3
 8004626:	6939      	ldr	r1, [r7, #16]
 8004628:	6978      	ldr	r0, [r7, #20]
 800462a:	f7ff ff79 	bl	8004520 <xQueueGenericCreate>
 800462e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7ff ffd3 	bl	80045dc <prvInitialiseMutex>

		return pxNewQueue;
 8004636:	68fb      	ldr	r3, [r7, #12]
	}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af02      	add	r7, sp, #8
 8004646:	4603      	mov	r3, r0
 8004648:	6039      	str	r1, [r7, #0]
 800464a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800464c:	2301      	movs	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	2300      	movs	r3, #0
 8004652:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	6939      	ldr	r1, [r7, #16]
 800465e:	6978      	ldr	r0, [r7, #20]
 8004660:	f7ff fee2 	bl	8004428 <xQueueGenericCreateStatic>
 8004664:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff ffb8 	bl	80045dc <prvInitialiseMutex>

		return pxNewQueue;
 800466c:	68fb      	ldr	r3, [r7, #12]
	}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08e      	sub	sp, #56	@ 0x38
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004686:	2300      	movs	r3, #0
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10b      	bne.n	80046ac <xQueueGenericSend+0x34>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046a6:	bf00      	nop
 80046a8:	bf00      	nop
 80046aa:	e7fd      	b.n	80046a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <xQueueGenericSend+0x42>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <xQueueGenericSend+0x46>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <xQueueGenericSend+0x48>
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <xQueueGenericSend+0x64>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	e7fd      	b.n	80046d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d103      	bne.n	80046ea <xQueueGenericSend+0x72>
 80046e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <xQueueGenericSend+0x76>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <xQueueGenericSend+0x78>
 80046ee:	2300      	movs	r3, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <xQueueGenericSend+0x94>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	623b      	str	r3, [r7, #32]
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800470c:	f001 f9d6 	bl	8005abc <xTaskGetSchedulerState>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <xQueueGenericSend+0xa4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <xQueueGenericSend+0xa8>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <xQueueGenericSend+0xaa>
 8004720:	2300      	movs	r3, #0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10b      	bne.n	800473e <xQueueGenericSend+0xc6>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	61fb      	str	r3, [r7, #28]
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	e7fd      	b.n	800473a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800473e:	f001 fcf5 	bl	800612c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474a:	429a      	cmp	r2, r3
 800474c:	d302      	bcc.n	8004754 <xQueueGenericSend+0xdc>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d129      	bne.n	80047a8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800475a:	f000 fac8 	bl	8004cee <prvCopyDataToQueue>
 800475e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	2b00      	cmp	r3, #0
 8004766:	d010      	beq.n	800478a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	3324      	adds	r3, #36	@ 0x24
 800476c:	4618      	mov	r0, r3
 800476e:	f000 ffe1 	bl	8005734 <xTaskRemoveFromEventList>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004778:	4b3f      	ldr	r3, [pc, #252]	@ (8004878 <xQueueGenericSend+0x200>)
 800477a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	e00a      	b.n	80047a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004790:	4b39      	ldr	r3, [pc, #228]	@ (8004878 <xQueueGenericSend+0x200>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047a0:	f001 fcf4 	bl	800618c <vPortExitCritical>
				return pdPASS;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e063      	b.n	8004870 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047ae:	f001 fced 	bl	800618c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e05c      	b.n	8004870 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047bc:	f107 0314 	add.w	r3, r7, #20
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 f81b 	bl	80057fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047c6:	2301      	movs	r3, #1
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047ca:	f001 fcdf 	bl	800618c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ce:	f000 fdc5 	bl	800535c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047d2:	f001 fcab 	bl	800612c <vPortEnterCritical>
 80047d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047dc:	b25b      	sxtb	r3, r3
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d103      	bne.n	80047ec <xQueueGenericSend+0x174>
 80047e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047f2:	b25b      	sxtb	r3, r3
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d103      	bne.n	8004802 <xQueueGenericSend+0x18a>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004802:	f001 fcc3 	bl	800618c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004806:	1d3a      	adds	r2, r7, #4
 8004808:	f107 0314 	add.w	r3, r7, #20
 800480c:	4611      	mov	r1, r2
 800480e:	4618      	mov	r0, r3
 8004810:	f001 f80a 	bl	8005828 <xTaskCheckForTimeOut>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d124      	bne.n	8004864 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800481a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800481c:	f000 fb5f 	bl	8004ede <prvIsQueueFull>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d018      	beq.n	8004858 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004828:	3310      	adds	r3, #16
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f000 ff5a 	bl	80056e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004836:	f000 faea 	bl	8004e0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800483a:	f000 fd9d 	bl	8005378 <xTaskResumeAll>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	f47f af7c 	bne.w	800473e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004846:	4b0c      	ldr	r3, [pc, #48]	@ (8004878 <xQueueGenericSend+0x200>)
 8004848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	e772      	b.n	800473e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004858:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800485a:	f000 fad8 	bl	8004e0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800485e:	f000 fd8b 	bl	8005378 <xTaskResumeAll>
 8004862:	e76c      	b.n	800473e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004866:	f000 fad2 	bl	8004e0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800486a:	f000 fd85 	bl	8005378 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800486e:	2300      	movs	r3, #0
		}
	}
}
 8004870:	4618      	mov	r0, r3
 8004872:	3738      	adds	r7, #56	@ 0x38
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08e      	sub	sp, #56	@ 0x38
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800488a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	623b      	str	r3, [r7, #32]
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80048a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	61fb      	str	r3, [r7, #28]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <xQueueGiveFromISR+0x5c>
 80048d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <xQueueGiveFromISR+0x60>
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <xQueueGiveFromISR+0x62>
 80048dc:	2300      	movs	r3, #0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <xQueueGiveFromISR+0x7e>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	61bb      	str	r3, [r7, #24]
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop
 80048f8:	e7fd      	b.n	80048f6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048fa:	f001 fcd9 	bl	80062b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048fe:	f3ef 8211 	mrs	r2, BASEPRI
 8004902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	617a      	str	r2, [r7, #20]
 8004914:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004916:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004918:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800491a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004924:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004926:	429a      	cmp	r2, r3
 8004928:	d22b      	bcs.n	8004982 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800493c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d112      	bne.n	800496c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	3324      	adds	r3, #36	@ 0x24
 8004952:	4618      	mov	r0, r3
 8004954:	f000 feee 	bl	8005734 <xTaskRemoveFromEventList>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00e      	beq.n	800497c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00b      	beq.n	800497c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e007      	b.n	800497c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800496c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004970:	3301      	adds	r3, #1
 8004972:	b2db      	uxtb	r3, r3
 8004974:	b25a      	sxtb	r2, r3
 8004976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800497c:	2301      	movs	r3, #1
 800497e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004980:	e001      	b.n	8004986 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004982:	2300      	movs	r3, #0
 8004984:	637b      	str	r3, [r7, #52]	@ 0x34
 8004986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004988:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004990:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004994:	4618      	mov	r0, r3
 8004996:	3738      	adds	r7, #56	@ 0x38
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08e      	sub	sp, #56	@ 0x38
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10b      	bne.n	80049d0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	623b      	str	r3, [r7, #32]
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00b      	beq.n	80049f0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	61fb      	str	r3, [r7, #28]
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049f0:	f001 f864 	bl	8005abc <xTaskGetSchedulerState>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d102      	bne.n	8004a00 <xQueueSemaphoreTake+0x64>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <xQueueSemaphoreTake+0x68>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <xQueueSemaphoreTake+0x6a>
 8004a04:	2300      	movs	r3, #0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10b      	bne.n	8004a22 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	61bb      	str	r3, [r7, #24]
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	e7fd      	b.n	8004a1e <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a22:	f001 fb83 	bl	800612c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d024      	beq.n	8004a7c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a38:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004a42:	f001 fa09 	bl	8005e58 <pvTaskIncrementMutexHeldCount>
 8004a46:	4602      	mov	r2, r0
 8004a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00f      	beq.n	8004a74 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a56:	3310      	adds	r3, #16
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fe6b 	bl	8005734 <xTaskRemoveFromEventList>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d007      	beq.n	8004a74 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a64:	4b54      	ldr	r3, [pc, #336]	@ (8004bb8 <xQueueSemaphoreTake+0x21c>)
 8004a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a74:	f001 fb8a 	bl	800618c <vPortExitCritical>
				return pdPASS;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e098      	b.n	8004bae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d112      	bne.n	8004aa8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00b      	beq.n	8004aa0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	617b      	str	r3, [r7, #20]
}
 8004a9a:	bf00      	nop
 8004a9c:	bf00      	nop
 8004a9e:	e7fd      	b.n	8004a9c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004aa0:	f001 fb74 	bl	800618c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	e082      	b.n	8004bae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aae:	f107 030c 	add.w	r3, r7, #12
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fea2 	bl	80057fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004abc:	f001 fb66 	bl	800618c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ac0:	f000 fc4c 	bl	800535c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ac4:	f001 fb32 	bl	800612c <vPortEnterCritical>
 8004ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ace:	b25b      	sxtb	r3, r3
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d103      	bne.n	8004ade <xQueueSemaphoreTake+0x142>
 8004ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ae4:	b25b      	sxtb	r3, r3
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aea:	d103      	bne.n	8004af4 <xQueueSemaphoreTake+0x158>
 8004aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004af4:	f001 fb4a 	bl	800618c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004af8:	463a      	mov	r2, r7
 8004afa:	f107 030c 	add.w	r3, r7, #12
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fe91 	bl	8005828 <xTaskCheckForTimeOut>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d132      	bne.n	8004b72 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b0e:	f000 f9d0 	bl	8004eb2 <prvIsQueueEmpty>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d026      	beq.n	8004b66 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004b20:	f001 fb04 	bl	800612c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 ffe5 	bl	8005af8 <xTaskPriorityInherit>
 8004b2e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004b30:	f001 fb2c 	bl	800618c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b36:	3324      	adds	r3, #36	@ 0x24
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fdd3 	bl	80056e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b44:	f000 f963 	bl	8004e0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b48:	f000 fc16 	bl	8005378 <xTaskResumeAll>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f47f af67 	bne.w	8004a22 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004b54:	4b18      	ldr	r3, [pc, #96]	@ (8004bb8 <xQueueSemaphoreTake+0x21c>)
 8004b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	e75d      	b.n	8004a22 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b68:	f000 f951 	bl	8004e0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b6c:	f000 fc04 	bl	8005378 <xTaskResumeAll>
 8004b70:	e757      	b.n	8004a22 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b74:	f000 f94b 	bl	8004e0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b78:	f000 fbfe 	bl	8005378 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b7e:	f000 f998 	bl	8004eb2 <prvIsQueueEmpty>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f43f af4c 	beq.w	8004a22 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004b90:	f001 facc 	bl	800612c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b96:	f000 f893 	bl	8004cc0 <prvGetDisinheritPriorityAfterTimeout>
 8004b9a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 f8b6 	bl	8005d14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004ba8:	f001 faf0 	bl	800618c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3738      	adds	r7, #56	@ 0x38
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08e      	sub	sp, #56	@ 0x38
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10b      	bne.n	8004bea <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	623b      	str	r3, [r7, #32]
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	e7fd      	b.n	8004be6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <xQueueReceiveFromISR+0x3c>
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <xQueueReceiveFromISR+0x40>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <xQueueReceiveFromISR+0x42>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	61fb      	str	r3, [r7, #28]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c1a:	f001 fb49 	bl	80062b0 <vPortValidateInterruptPriority>
	__asm volatile
 8004c1e:	f3ef 8211 	mrs	r2, BASEPRI
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	61ba      	str	r2, [r7, #24]
 8004c34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d02f      	beq.n	8004ca6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c54:	f000 f8b5 	bl	8004dc2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	1e5a      	subs	r2, r3, #1
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d112      	bne.n	8004c90 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d016      	beq.n	8004ca0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	3310      	adds	r3, #16
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fd5c 	bl	8005734 <xTaskRemoveFromEventList>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00e      	beq.n	8004ca0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00b      	beq.n	8004ca0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	e007      	b.n	8004ca0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c94:	3301      	adds	r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	b25a      	sxtb	r2, r3
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca4:	e001      	b.n	8004caa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f383 8811 	msr	BASEPRI, r3
}
 8004cb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3738      	adds	r7, #56	@ 0x38
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d006      	beq.n	8004cde <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1c3 0307 	rsb	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e001      	b.n	8004ce2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
	}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr

08004cee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b086      	sub	sp, #24
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10d      	bne.n	8004d28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d14d      	bne.n	8004db0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 ff73 	bl	8005c04 <xTaskPriorityDisinherit>
 8004d1e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	e043      	b.n	8004db0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d119      	bne.n	8004d62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6898      	ldr	r0, [r3, #8]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	461a      	mov	r2, r3
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	f001 fe78 	bl	8006a2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	441a      	add	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d32b      	bcc.n	8004db0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	609a      	str	r2, [r3, #8]
 8004d60:	e026      	b.n	8004db0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	68d8      	ldr	r0, [r3, #12]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	f001 fe5e 	bl	8006a2e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	425b      	negs	r3, r3
 8004d7c:	441a      	add	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d207      	bcs.n	8004d9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	425b      	negs	r3, r3
 8004d98:	441a      	add	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d105      	bne.n	8004db0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004db8:	697b      	ldr	r3, [r7, #20]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d018      	beq.n	8004e06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	441a      	add	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d303      	bcc.n	8004df6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68d9      	ldr	r1, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6838      	ldr	r0, [r7, #0]
 8004e02:	f001 fe14 	bl	8006a2e <memcpy>
	}
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e16:	f001 f989 	bl	800612c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e22:	e011      	b.n	8004e48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d012      	beq.n	8004e52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3324      	adds	r3, #36	@ 0x24
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fc7f 	bl	8005734 <xTaskRemoveFromEventList>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e3c:	f000 fd58 	bl	80058f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	dce9      	bgt.n	8004e24 <prvUnlockQueue+0x16>
 8004e50:	e000      	b.n	8004e54 <prvUnlockQueue+0x46>
					break;
 8004e52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	22ff      	movs	r2, #255	@ 0xff
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e5c:	f001 f996 	bl	800618c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e60:	f001 f964 	bl	800612c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e6c:	e011      	b.n	8004e92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d012      	beq.n	8004e9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3310      	adds	r3, #16
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fc5a 	bl	8005734 <xTaskRemoveFromEventList>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e86:	f000 fd33 	bl	80058f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e8a:	7bbb      	ldrb	r3, [r7, #14]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	dce9      	bgt.n	8004e6e <prvUnlockQueue+0x60>
 8004e9a:	e000      	b.n	8004e9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	22ff      	movs	r2, #255	@ 0xff
 8004ea2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004ea6:	f001 f971 	bl	800618c <vPortExitCritical>
}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eba:	f001 f937 	bl	800612c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e001      	b.n	8004ed0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ed0:	f001 f95c 	bl	800618c <vPortExitCritical>

	return xReturn;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ee6:	f001 f921 	bl	800612c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d102      	bne.n	8004efc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	e001      	b.n	8004f00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f00:	f001 f944 	bl	800618c <vPortExitCritical>

	return xReturn;
 8004f04:	68fb      	ldr	r3, [r7, #12]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b08e      	sub	sp, #56	@ 0x38
 8004f12:	af04      	add	r7, sp, #16
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <xTaskCreateStatic+0x2c>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	623b      	str	r3, [r7, #32]
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	61fb      	str	r3, [r7, #28]
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	e7fd      	b.n	8004f54 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f58:	2354      	movs	r3, #84	@ 0x54
 8004f5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b54      	cmp	r3, #84	@ 0x54
 8004f60:	d00b      	beq.n	8004f7a <xTaskCreateStatic+0x6c>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	61bb      	str	r3, [r7, #24]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01e      	beq.n	8004fbe <xTaskCreateStatic+0xb0>
 8004f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01b      	beq.n	8004fbe <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9303      	str	r3, [sp, #12]
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9e:	9302      	str	r3, [sp, #8]
 8004fa0:	f107 0314 	add.w	r3, r7, #20
 8004fa4:	9301      	str	r3, [sp, #4]
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f850 	bl	8005056 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fb8:	f000 f8ce 	bl	8005158 <prvAddNewTaskToReadyList>
 8004fbc:	e001      	b.n	8004fc2 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fc2:	697b      	ldr	r3, [r7, #20]
	}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3728      	adds	r7, #40	@ 0x28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08c      	sub	sp, #48	@ 0x30
 8004fd0:	af04      	add	r7, sp, #16
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f001 f9a5 	bl	8006330 <pvPortMalloc>
 8004fe6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00e      	beq.n	800500c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004fee:	2054      	movs	r0, #84	@ 0x54
 8004ff0:	f001 f99e 	bl	8006330 <pvPortMalloc>
 8004ff4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30
 8005002:	e005      	b.n	8005010 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005004:	6978      	ldr	r0, [r7, #20]
 8005006:	f001 fa5b 	bl	80064c0 <vPortFree>
 800500a:	e001      	b.n	8005010 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800500c:	2300      	movs	r3, #0
 800500e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d017      	beq.n	8005046 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800501e:	88fa      	ldrh	r2, [r7, #6]
 8005020:	2300      	movs	r3, #0
 8005022:	9303      	str	r3, [sp, #12]
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	9302      	str	r3, [sp, #8]
 8005028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f80e 	bl	8005056 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800503a:	69f8      	ldr	r0, [r7, #28]
 800503c:	f000 f88c 	bl	8005158 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005040:	2301      	movs	r3, #1
 8005042:	61bb      	str	r3, [r7, #24]
 8005044:	e002      	b.n	800504c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800504c:	69bb      	ldr	r3, [r7, #24]
	}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b088      	sub	sp, #32
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800506e:	3b01      	subs	r3, #1
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	f023 0307 	bic.w	r3, r3, #7
 800507c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00b      	beq.n	80050a0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	617b      	str	r3, [r7, #20]
}
 800509a:	bf00      	nop
 800509c:	bf00      	nop
 800509e:	e7fd      	b.n	800509c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	e012      	b.n	80050cc <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4413      	add	r3, r2
 80050ac:	7819      	ldrb	r1, [r3, #0]
 80050ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	3334      	adds	r3, #52	@ 0x34
 80050b6:	460a      	mov	r2, r1
 80050b8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d006      	beq.n	80050d4 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3301      	adds	r3, #1
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d9e9      	bls.n	80050a6 <prvInitialiseNewTask+0x50>
 80050d2:	e000      	b.n	80050d6 <prvInitialiseNewTask+0x80>
		{
			break;
 80050d4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e0:	2b06      	cmp	r3, #6
 80050e2:	d901      	bls.n	80050e8 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050e4:	2306      	movs	r3, #6
 80050e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050f2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	2200      	movs	r2, #0
 80050f8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	3304      	adds	r3, #4
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff f897 	bl	8004232 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	3318      	adds	r3, #24
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff f892 	bl	8004232 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005112:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005116:	f1c3 0207 	rsb	r2, r3, #7
 800511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800511e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005122:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005126:	2200      	movs	r2, #0
 8005128:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	68f9      	ldr	r1, [r7, #12]
 8005136:	69b8      	ldr	r0, [r7, #24]
 8005138:	f000 ff08 	bl	8005f4c <pxPortInitialiseStack>
 800513c:	4602      	mov	r2, r0
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800514c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800514e:	bf00      	nop
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005160:	f000 ffe4 	bl	800612c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005164:	4b2a      	ldr	r3, [pc, #168]	@ (8005210 <prvAddNewTaskToReadyList+0xb8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	4a29      	ldr	r2, [pc, #164]	@ (8005210 <prvAddNewTaskToReadyList+0xb8>)
 800516c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800516e:	4b29      	ldr	r3, [pc, #164]	@ (8005214 <prvAddNewTaskToReadyList+0xbc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005176:	4a27      	ldr	r2, [pc, #156]	@ (8005214 <prvAddNewTaskToReadyList+0xbc>)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800517c:	4b24      	ldr	r3, [pc, #144]	@ (8005210 <prvAddNewTaskToReadyList+0xb8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d110      	bne.n	80051a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005184:	f000 fbd8 	bl	8005938 <prvInitialiseTaskLists>
 8005188:	e00d      	b.n	80051a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800518a:	4b23      	ldr	r3, [pc, #140]	@ (8005218 <prvAddNewTaskToReadyList+0xc0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005192:	4b20      	ldr	r3, [pc, #128]	@ (8005214 <prvAddNewTaskToReadyList+0xbc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	429a      	cmp	r2, r3
 800519e:	d802      	bhi.n	80051a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005214 <prvAddNewTaskToReadyList+0xbc>)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051a6:	4b1d      	ldr	r3, [pc, #116]	@ (800521c <prvAddNewTaskToReadyList+0xc4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3301      	adds	r3, #1
 80051ac:	4a1b      	ldr	r2, [pc, #108]	@ (800521c <prvAddNewTaskToReadyList+0xc4>)
 80051ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	2201      	movs	r2, #1
 80051b6:	409a      	lsls	r2, r3
 80051b8:	4b19      	ldr	r3, [pc, #100]	@ (8005220 <prvAddNewTaskToReadyList+0xc8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4313      	orrs	r3, r2
 80051be:	4a18      	ldr	r2, [pc, #96]	@ (8005220 <prvAddNewTaskToReadyList+0xc8>)
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4a15      	ldr	r2, [pc, #84]	@ (8005224 <prvAddNewTaskToReadyList+0xcc>)
 80051d0:	441a      	add	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3304      	adds	r3, #4
 80051d6:	4619      	mov	r1, r3
 80051d8:	4610      	mov	r0, r2
 80051da:	f7ff f836 	bl	800424a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051de:	f000 ffd5 	bl	800618c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <prvAddNewTaskToReadyList+0xc0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00e      	beq.n	8005208 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <prvAddNewTaskToReadyList+0xbc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d207      	bcs.n	8005208 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <prvAddNewTaskToReadyList+0xd0>)
 80051fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	200004f0 	.word	0x200004f0
 8005214:	200003f0 	.word	0x200003f0
 8005218:	200004fc 	.word	0x200004fc
 800521c:	2000050c 	.word	0x2000050c
 8005220:	200004f8 	.word	0x200004f8
 8005224:	200003f4 	.word	0x200003f4
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d018      	beq.n	8005270 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800523e:	4b14      	ldr	r3, [pc, #80]	@ (8005290 <vTaskDelay+0x64>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <vTaskDelay+0x32>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	60bb      	str	r3, [r7, #8]
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	e7fd      	b.n	800525a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800525e:	f000 f87d 	bl	800535c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005262:	2100      	movs	r1, #0
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fe0b 	bl	8005e80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800526a:	f000 f885 	bl	8005378 <xTaskResumeAll>
 800526e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d107      	bne.n	8005286 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005276:	4b07      	ldr	r3, [pc, #28]	@ (8005294 <vTaskDelay+0x68>)
 8005278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20000518 	.word	0x20000518
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	@ 0x28
 800529c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052a6:	463a      	mov	r2, r7
 80052a8:	1d39      	adds	r1, r7, #4
 80052aa:	f107 0308 	add.w	r3, r7, #8
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fb fd72 	bl	8000d98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	9202      	str	r2, [sp, #8]
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	2300      	movs	r3, #0
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	2300      	movs	r3, #0
 80052c4:	460a      	mov	r2, r1
 80052c6:	491f      	ldr	r1, [pc, #124]	@ (8005344 <vTaskStartScheduler+0xac>)
 80052c8:	481f      	ldr	r0, [pc, #124]	@ (8005348 <vTaskStartScheduler+0xb0>)
 80052ca:	f7ff fe20 	bl	8004f0e <xTaskCreateStatic>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4a1e      	ldr	r2, [pc, #120]	@ (800534c <vTaskStartScheduler+0xb4>)
 80052d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052d4:	4b1d      	ldr	r3, [pc, #116]	@ (800534c <vTaskStartScheduler+0xb4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052dc:	2301      	movs	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	e001      	b.n	80052e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d116      	bne.n	800531a <vTaskStartScheduler+0x82>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	613b      	str	r3, [r7, #16]
}
 80052fe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005300:	4b13      	ldr	r3, [pc, #76]	@ (8005350 <vTaskStartScheduler+0xb8>)
 8005302:	f04f 32ff 	mov.w	r2, #4294967295
 8005306:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005308:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <vTaskStartScheduler+0xbc>)
 800530a:	2201      	movs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800530e:	4b12      	ldr	r3, [pc, #72]	@ (8005358 <vTaskStartScheduler+0xc0>)
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005314:	f000 fe98 	bl	8006048 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005318:	e00f      	b.n	800533a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d10b      	bne.n	800533a <vTaskStartScheduler+0xa2>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	60fb      	str	r3, [r7, #12]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <vTaskStartScheduler+0x9e>
}
 800533a:	bf00      	nop
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	08007c44 	.word	0x08007c44
 8005348:	08005909 	.word	0x08005909
 800534c:	20000514 	.word	0x20000514
 8005350:	20000510 	.word	0x20000510
 8005354:	200004fc 	.word	0x200004fc
 8005358:	200004f4 	.word	0x200004f4

0800535c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005360:	4b04      	ldr	r3, [pc, #16]	@ (8005374 <vTaskSuspendAll+0x18>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	4a03      	ldr	r2, [pc, #12]	@ (8005374 <vTaskSuspendAll+0x18>)
 8005368:	6013      	str	r3, [r2, #0]
}
 800536a:	bf00      	nop
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000518 	.word	0x20000518

08005378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005386:	4b42      	ldr	r3, [pc, #264]	@ (8005490 <xTaskResumeAll+0x118>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	603b      	str	r3, [r7, #0]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053a6:	f000 fec1 	bl	800612c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053aa:	4b39      	ldr	r3, [pc, #228]	@ (8005490 <xTaskResumeAll+0x118>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	4a37      	ldr	r2, [pc, #220]	@ (8005490 <xTaskResumeAll+0x118>)
 80053b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053b4:	4b36      	ldr	r3, [pc, #216]	@ (8005490 <xTaskResumeAll+0x118>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d161      	bne.n	8005480 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053bc:	4b35      	ldr	r3, [pc, #212]	@ (8005494 <xTaskResumeAll+0x11c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d05d      	beq.n	8005480 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053c4:	e02e      	b.n	8005424 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80053c6:	4b34      	ldr	r3, [pc, #208]	@ (8005498 <xTaskResumeAll+0x120>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3318      	adds	r3, #24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe ff94 	bl	8004300 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3304      	adds	r3, #4
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe ff8f 	bl	8004300 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e6:	2201      	movs	r2, #1
 80053e8:	409a      	lsls	r2, r3
 80053ea:	4b2c      	ldr	r3, [pc, #176]	@ (800549c <xTaskResumeAll+0x124>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	4a2a      	ldr	r2, [pc, #168]	@ (800549c <xTaskResumeAll+0x124>)
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4a27      	ldr	r2, [pc, #156]	@ (80054a0 <xTaskResumeAll+0x128>)
 8005402:	441a      	add	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3304      	adds	r3, #4
 8005408:	4619      	mov	r1, r3
 800540a:	4610      	mov	r0, r2
 800540c:	f7fe ff1d 	bl	800424a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005414:	4b23      	ldr	r3, [pc, #140]	@ (80054a4 <xTaskResumeAll+0x12c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800541e:	4b22      	ldr	r3, [pc, #136]	@ (80054a8 <xTaskResumeAll+0x130>)
 8005420:	2201      	movs	r2, #1
 8005422:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005424:	4b1c      	ldr	r3, [pc, #112]	@ (8005498 <xTaskResumeAll+0x120>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1cc      	bne.n	80053c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005432:	f000 fb1f 	bl	8005a74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005436:	4b1d      	ldr	r3, [pc, #116]	@ (80054ac <xTaskResumeAll+0x134>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d010      	beq.n	8005464 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005442:	f000 f837 	bl	80054b4 <xTaskIncrementTick>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800544c:	4b16      	ldr	r3, [pc, #88]	@ (80054a8 <xTaskResumeAll+0x130>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3b01      	subs	r3, #1
 8005456:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f1      	bne.n	8005442 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800545e:	4b13      	ldr	r3, [pc, #76]	@ (80054ac <xTaskResumeAll+0x134>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005464:	4b10      	ldr	r3, [pc, #64]	@ (80054a8 <xTaskResumeAll+0x130>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d009      	beq.n	8005480 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800546c:	2301      	movs	r3, #1
 800546e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005470:	4b0f      	ldr	r3, [pc, #60]	@ (80054b0 <xTaskResumeAll+0x138>)
 8005472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005480:	f000 fe84 	bl	800618c <vPortExitCritical>

	return xAlreadyYielded;
 8005484:	68bb      	ldr	r3, [r7, #8]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000518 	.word	0x20000518
 8005494:	200004f0 	.word	0x200004f0
 8005498:	200004b0 	.word	0x200004b0
 800549c:	200004f8 	.word	0x200004f8
 80054a0:	200003f4 	.word	0x200003f4
 80054a4:	200003f0 	.word	0x200003f0
 80054a8:	20000504 	.word	0x20000504
 80054ac:	20000500 	.word	0x20000500
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054be:	4b51      	ldr	r3, [pc, #324]	@ (8005604 <xTaskIncrementTick+0x150>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f040 808e 	bne.w	80055e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005608 <xTaskIncrementTick+0x154>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054d0:	4a4d      	ldr	r2, [pc, #308]	@ (8005608 <xTaskIncrementTick+0x154>)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d121      	bne.n	8005520 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80054dc:	4b4b      	ldr	r3, [pc, #300]	@ (800560c <xTaskIncrementTick+0x158>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	603b      	str	r3, [r7, #0]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <xTaskIncrementTick+0x46>
 80054fe:	4b43      	ldr	r3, [pc, #268]	@ (800560c <xTaskIncrementTick+0x158>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	4b42      	ldr	r3, [pc, #264]	@ (8005610 <xTaskIncrementTick+0x15c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a40      	ldr	r2, [pc, #256]	@ (800560c <xTaskIncrementTick+0x158>)
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	4a40      	ldr	r2, [pc, #256]	@ (8005610 <xTaskIncrementTick+0x15c>)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	4b40      	ldr	r3, [pc, #256]	@ (8005614 <xTaskIncrementTick+0x160>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3301      	adds	r3, #1
 8005518:	4a3e      	ldr	r2, [pc, #248]	@ (8005614 <xTaskIncrementTick+0x160>)
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	f000 faaa 	bl	8005a74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005520:	4b3d      	ldr	r3, [pc, #244]	@ (8005618 <xTaskIncrementTick+0x164>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	429a      	cmp	r2, r3
 8005528:	d34d      	bcc.n	80055c6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552a:	4b38      	ldr	r3, [pc, #224]	@ (800560c <xTaskIncrementTick+0x158>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <xTaskIncrementTick+0x84>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <xTaskIncrementTick+0x86>
 8005538:	2300      	movs	r3, #0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d004      	beq.n	8005548 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800553e:	4b36      	ldr	r3, [pc, #216]	@ (8005618 <xTaskIncrementTick+0x164>)
 8005540:	f04f 32ff 	mov.w	r2, #4294967295
 8005544:	601a      	str	r2, [r3, #0]
					break;
 8005546:	e03e      	b.n	80055c6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005548:	4b30      	ldr	r3, [pc, #192]	@ (800560c <xTaskIncrementTick+0x158>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d203      	bcs.n	8005568 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005560:	4a2d      	ldr	r2, [pc, #180]	@ (8005618 <xTaskIncrementTick+0x164>)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6013      	str	r3, [r2, #0]
						break;
 8005566:	e02e      	b.n	80055c6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fec7 	bl	8004300 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	3318      	adds	r3, #24
 800557e:	4618      	mov	r0, r3
 8005580:	f7fe febe 	bl	8004300 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005588:	2201      	movs	r2, #1
 800558a:	409a      	lsls	r2, r3
 800558c:	4b23      	ldr	r3, [pc, #140]	@ (800561c <xTaskIncrementTick+0x168>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4313      	orrs	r3, r2
 8005592:	4a22      	ldr	r2, [pc, #136]	@ (800561c <xTaskIncrementTick+0x168>)
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005620 <xTaskIncrementTick+0x16c>)
 80055a4:	441a      	add	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4619      	mov	r1, r3
 80055ac:	4610      	mov	r0, r2
 80055ae:	f7fe fe4c 	bl	800424a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005624 <xTaskIncrementTick+0x170>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	429a      	cmp	r2, r3
 80055be:	d3b4      	bcc.n	800552a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c4:	e7b1      	b.n	800552a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055c6:	4b17      	ldr	r3, [pc, #92]	@ (8005624 <xTaskIncrementTick+0x170>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055cc:	4914      	ldr	r1, [pc, #80]	@ (8005620 <xTaskIncrementTick+0x16c>)
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d907      	bls.n	80055ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80055de:	2301      	movs	r3, #1
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	e004      	b.n	80055ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80055e4:	4b10      	ldr	r3, [pc, #64]	@ (8005628 <xTaskIncrementTick+0x174>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3301      	adds	r3, #1
 80055ea:	4a0f      	ldr	r2, [pc, #60]	@ (8005628 <xTaskIncrementTick+0x174>)
 80055ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80055ee:	4b0f      	ldr	r3, [pc, #60]	@ (800562c <xTaskIncrementTick+0x178>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80055f6:	2301      	movs	r3, #1
 80055f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055fa:	697b      	ldr	r3, [r7, #20]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000518 	.word	0x20000518
 8005608:	200004f4 	.word	0x200004f4
 800560c:	200004a8 	.word	0x200004a8
 8005610:	200004ac 	.word	0x200004ac
 8005614:	20000508 	.word	0x20000508
 8005618:	20000510 	.word	0x20000510
 800561c:	200004f8 	.word	0x200004f8
 8005620:	200003f4 	.word	0x200003f4
 8005624:	200003f0 	.word	0x200003f0
 8005628:	20000500 	.word	0x20000500
 800562c:	20000504 	.word	0x20000504

08005630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005636:	4b27      	ldr	r3, [pc, #156]	@ (80056d4 <vTaskSwitchContext+0xa4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800563e:	4b26      	ldr	r3, [pc, #152]	@ (80056d8 <vTaskSwitchContext+0xa8>)
 8005640:	2201      	movs	r2, #1
 8005642:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005644:	e040      	b.n	80056c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005646:	4b24      	ldr	r3, [pc, #144]	@ (80056d8 <vTaskSwitchContext+0xa8>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800564c:	4b23      	ldr	r3, [pc, #140]	@ (80056dc <vTaskSwitchContext+0xac>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	fab3 f383 	clz	r3, r3
 8005658:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800565a:	7afb      	ldrb	r3, [r7, #11]
 800565c:	f1c3 031f 	rsb	r3, r3, #31
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	491f      	ldr	r1, [pc, #124]	@ (80056e0 <vTaskSwitchContext+0xb0>)
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	607b      	str	r3, [r7, #4]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <vTaskSwitchContext+0x5a>
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4a11      	ldr	r2, [pc, #68]	@ (80056e0 <vTaskSwitchContext+0xb0>)
 800569a:	4413      	add	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	605a      	str	r2, [r3, #4]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	3308      	adds	r3, #8
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d104      	bne.n	80056be <vTaskSwitchContext+0x8e>
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	4a07      	ldr	r2, [pc, #28]	@ (80056e4 <vTaskSwitchContext+0xb4>)
 80056c6:	6013      	str	r3, [r2, #0]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000518 	.word	0x20000518
 80056d8:	20000504 	.word	0x20000504
 80056dc:	200004f8 	.word	0x200004f8
 80056e0:	200003f4 	.word	0x200003f4
 80056e4:	200003f0 	.word	0x200003f0

080056e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	60fb      	str	r3, [r7, #12]
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005710:	4b07      	ldr	r3, [pc, #28]	@ (8005730 <vTaskPlaceOnEventList+0x48>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3318      	adds	r3, #24
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7fe fdb9 	bl	8004290 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800571e:	2101      	movs	r1, #1
 8005720:	6838      	ldr	r0, [r7, #0]
 8005722:	f000 fbad 	bl	8005e80 <prvAddCurrentTaskToDelayedList>
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200003f0 	.word	0x200003f0

08005734 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10b      	bne.n	8005762 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	60fb      	str	r3, [r7, #12]
}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	e7fd      	b.n	800575e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	3318      	adds	r3, #24
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fdca 	bl	8004300 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800576c:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <xTaskRemoveFromEventList+0xb0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d11c      	bne.n	80057ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	3304      	adds	r3, #4
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fdc1 	bl	8004300 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	2201      	movs	r2, #1
 8005784:	409a      	lsls	r2, r3
 8005786:	4b18      	ldr	r3, [pc, #96]	@ (80057e8 <xTaskRemoveFromEventList+0xb4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	4a16      	ldr	r2, [pc, #88]	@ (80057e8 <xTaskRemoveFromEventList+0xb4>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4a13      	ldr	r2, [pc, #76]	@ (80057ec <xTaskRemoveFromEventList+0xb8>)
 800579e:	441a      	add	r2, r3
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f7fe fd4f 	bl	800424a <vListInsertEnd>
 80057ac:	e005      	b.n	80057ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	3318      	adds	r3, #24
 80057b2:	4619      	mov	r1, r3
 80057b4:	480e      	ldr	r0, [pc, #56]	@ (80057f0 <xTaskRemoveFromEventList+0xbc>)
 80057b6:	f7fe fd48 	bl	800424a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057be:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <xTaskRemoveFromEventList+0xc0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d905      	bls.n	80057d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057c8:	2301      	movs	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057cc:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <xTaskRemoveFromEventList+0xc4>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e001      	b.n	80057d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80057d8:	697b      	ldr	r3, [r7, #20]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000518 	.word	0x20000518
 80057e8:	200004f8 	.word	0x200004f8
 80057ec:	200003f4 	.word	0x200003f4
 80057f0:	200004b0 	.word	0x200004b0
 80057f4:	200003f0 	.word	0x200003f0
 80057f8:	20000504 	.word	0x20000504

080057fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005804:	4b06      	ldr	r3, [pc, #24]	@ (8005820 <vTaskInternalSetTimeOutState+0x24>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800580c:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <vTaskInternalSetTimeOutState+0x28>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	605a      	str	r2, [r3, #4]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	bc80      	pop	{r7}
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000508 	.word	0x20000508
 8005824:	200004f4 	.word	0x200004f4

08005828 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	613b      	str	r3, [r7, #16]
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	60fb      	str	r3, [r7, #12]
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	e7fd      	b.n	800586a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800586e:	f000 fc5d 	bl	800612c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005872:	4b1d      	ldr	r3, [pc, #116]	@ (80058e8 <xTaskCheckForTimeOut+0xc0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588a:	d102      	bne.n	8005892 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800588c:	2300      	movs	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	e023      	b.n	80058da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4b15      	ldr	r3, [pc, #84]	@ (80058ec <xTaskCheckForTimeOut+0xc4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d007      	beq.n	80058ae <xTaskCheckForTimeOut+0x86>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d302      	bcc.n	80058ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	e015      	b.n	80058da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d20b      	bcs.n	80058d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	1ad2      	subs	r2, r2, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff ff99 	bl	80057fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
 80058ce:	e004      	b.n	80058da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058da:	f000 fc57 	bl	800618c <vPortExitCritical>

	return xReturn;
 80058de:	69fb      	ldr	r3, [r7, #28]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	200004f4 	.word	0x200004f4
 80058ec:	20000508 	.word	0x20000508

080058f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058f4:	4b03      	ldr	r3, [pc, #12]	@ (8005904 <vTaskMissedYield+0x14>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
}
 80058fa:	bf00      	nop
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	20000504 	.word	0x20000504

08005908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005910:	f000 f852 	bl	80059b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005914:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <prvIdleTask+0x28>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d9f9      	bls.n	8005910 <prvIdleTask+0x8>
			{
				taskYIELD();
 800591c:	4b05      	ldr	r3, [pc, #20]	@ (8005934 <prvIdleTask+0x2c>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800592c:	e7f0      	b.n	8005910 <prvIdleTask+0x8>
 800592e:	bf00      	nop
 8005930:	200003f4 	.word	0x200003f4
 8005934:	e000ed04 	.word	0xe000ed04

08005938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800593e:	2300      	movs	r3, #0
 8005940:	607b      	str	r3, [r7, #4]
 8005942:	e00c      	b.n	800595e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <prvInitialiseTaskLists+0x60>)
 8005950:	4413      	add	r3, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe fc4e 	bl	80041f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3301      	adds	r3, #1
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b06      	cmp	r3, #6
 8005962:	d9ef      	bls.n	8005944 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005964:	480d      	ldr	r0, [pc, #52]	@ (800599c <prvInitialiseTaskLists+0x64>)
 8005966:	f7fe fc45 	bl	80041f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800596a:	480d      	ldr	r0, [pc, #52]	@ (80059a0 <prvInitialiseTaskLists+0x68>)
 800596c:	f7fe fc42 	bl	80041f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005970:	480c      	ldr	r0, [pc, #48]	@ (80059a4 <prvInitialiseTaskLists+0x6c>)
 8005972:	f7fe fc3f 	bl	80041f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005976:	480c      	ldr	r0, [pc, #48]	@ (80059a8 <prvInitialiseTaskLists+0x70>)
 8005978:	f7fe fc3c 	bl	80041f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800597c:	480b      	ldr	r0, [pc, #44]	@ (80059ac <prvInitialiseTaskLists+0x74>)
 800597e:	f7fe fc39 	bl	80041f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005982:	4b0b      	ldr	r3, [pc, #44]	@ (80059b0 <prvInitialiseTaskLists+0x78>)
 8005984:	4a05      	ldr	r2, [pc, #20]	@ (800599c <prvInitialiseTaskLists+0x64>)
 8005986:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005988:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <prvInitialiseTaskLists+0x7c>)
 800598a:	4a05      	ldr	r2, [pc, #20]	@ (80059a0 <prvInitialiseTaskLists+0x68>)
 800598c:	601a      	str	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200003f4 	.word	0x200003f4
 800599c:	20000480 	.word	0x20000480
 80059a0:	20000494 	.word	0x20000494
 80059a4:	200004b0 	.word	0x200004b0
 80059a8:	200004c4 	.word	0x200004c4
 80059ac:	200004dc 	.word	0x200004dc
 80059b0:	200004a8 	.word	0x200004a8
 80059b4:	200004ac 	.word	0x200004ac

080059b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059be:	e019      	b.n	80059f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059c0:	f000 fbb4 	bl	800612c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059c4:	4b10      	ldr	r3, [pc, #64]	@ (8005a08 <prvCheckTasksWaitingTermination+0x50>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fc95 	bl	8004300 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059d6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a0c <prvCheckTasksWaitingTermination+0x54>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3b01      	subs	r3, #1
 80059dc:	4a0b      	ldr	r2, [pc, #44]	@ (8005a0c <prvCheckTasksWaitingTermination+0x54>)
 80059de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <prvCheckTasksWaitingTermination+0x58>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005a10 <prvCheckTasksWaitingTermination+0x58>)
 80059e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059ea:	f000 fbcf 	bl	800618c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f810 	bl	8005a14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f4:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <prvCheckTasksWaitingTermination+0x58>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e1      	bne.n	80059c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	200004c4 	.word	0x200004c4
 8005a0c:	200004f0 	.word	0x200004f0
 8005a10:	200004d8 	.word	0x200004d8

08005a14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d108      	bne.n	8005a38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fd48 	bl	80064c0 <vPortFree>
				vPortFree( pxTCB );
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fd45 	bl	80064c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a36:	e019      	b.n	8005a6c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d103      	bne.n	8005a4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fd3c 	bl	80064c0 <vPortFree>
	}
 8005a48:	e010      	b.n	8005a6c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d00b      	beq.n	8005a6c <prvDeleteTCB+0x58>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	60fb      	str	r3, [r7, #12]
}
 8005a66:	bf00      	nop
 8005a68:	bf00      	nop
 8005a6a:	e7fd      	b.n	8005a68 <prvDeleteTCB+0x54>
	}
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab4 <prvResetNextTaskUnblockTime+0x40>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <prvResetNextTaskUnblockTime+0x14>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <prvResetNextTaskUnblockTime+0x16>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d004      	beq.n	8005a98 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab8 <prvResetNextTaskUnblockTime+0x44>)
 8005a90:	f04f 32ff 	mov.w	r2, #4294967295
 8005a94:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a96:	e008      	b.n	8005aaa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a98:	4b06      	ldr	r3, [pc, #24]	@ (8005ab4 <prvResetNextTaskUnblockTime+0x40>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4a04      	ldr	r2, [pc, #16]	@ (8005ab8 <prvResetNextTaskUnblockTime+0x44>)
 8005aa8:	6013      	str	r3, [r2, #0]
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr
 8005ab4:	200004a8 	.word	0x200004a8
 8005ab8:	20000510 	.word	0x20000510

08005abc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <xTaskGetSchedulerState+0x34>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005aca:	2301      	movs	r3, #1
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	e008      	b.n	8005ae2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad0:	4b08      	ldr	r3, [pc, #32]	@ (8005af4 <xTaskGetSchedulerState+0x38>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	607b      	str	r3, [r7, #4]
 8005adc:	e001      	b.n	8005ae2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ae2:	687b      	ldr	r3, [r7, #4]
	}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	200004fc 	.word	0x200004fc
 8005af4:	20000518 	.word	0x20000518

08005af8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d06e      	beq.n	8005bec <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b12:	4b39      	ldr	r3, [pc, #228]	@ (8005bf8 <xTaskPriorityInherit+0x100>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d25e      	bcs.n	8005bda <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	db06      	blt.n	8005b32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b24:	4b34      	ldr	r3, [pc, #208]	@ (8005bf8 <xTaskPriorityInherit+0x100>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2a:	f1c3 0207 	rsb	r2, r3, #7
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6959      	ldr	r1, [r3, #20]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4a2e      	ldr	r2, [pc, #184]	@ (8005bfc <xTaskPriorityInherit+0x104>)
 8005b44:	4413      	add	r3, r2
 8005b46:	4299      	cmp	r1, r3
 8005b48:	d101      	bne.n	8005b4e <xTaskPriorityInherit+0x56>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <xTaskPriorityInherit+0x58>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d03a      	beq.n	8005bca <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fe fbd1 	bl	8004300 <uxListRemove>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d115      	bne.n	8005b90 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b68:	4924      	ldr	r1, [pc, #144]	@ (8005bfc <xTaskPriorityInherit+0x104>)
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	440b      	add	r3, r1
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <xTaskPriorityInherit+0x98>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7e:	2201      	movs	r2, #1
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	43da      	mvns	r2, r3
 8005b86:	4b1e      	ldr	r3, [pc, #120]	@ (8005c00 <xTaskPriorityInherit+0x108>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005c00 <xTaskPriorityInherit+0x108>)
 8005b8e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b90:	4b19      	ldr	r3, [pc, #100]	@ (8005bf8 <xTaskPriorityInherit+0x100>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	409a      	lsls	r2, r3
 8005ba2:	4b17      	ldr	r3, [pc, #92]	@ (8005c00 <xTaskPriorityInherit+0x108>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	4a15      	ldr	r2, [pc, #84]	@ (8005c00 <xTaskPriorityInherit+0x108>)
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4a10      	ldr	r2, [pc, #64]	@ (8005bfc <xTaskPriorityInherit+0x104>)
 8005bba:	441a      	add	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	f7fe fb41 	bl	800424a <vListInsertEnd>
 8005bc8:	e004      	b.n	8005bd4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bca:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf8 <xTaskPriorityInherit+0x100>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	e008      	b.n	8005bec <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bde:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <xTaskPriorityInherit+0x100>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d201      	bcs.n	8005bec <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bec:	68fb      	ldr	r3, [r7, #12]
	}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	200003f0 	.word	0x200003f0
 8005bfc:	200003f4 	.word	0x200003f4
 8005c00:	200004f8 	.word	0x200004f8

08005c04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c10:	2300      	movs	r3, #0
 8005c12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d070      	beq.n	8005cfc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8005d08 <xTaskPriorityDisinherit+0x104>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d00b      	beq.n	8005c3c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60fb      	str	r3, [r7, #12]
}
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
 8005c3a:	e7fd      	b.n	8005c38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10b      	bne.n	8005c5c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	60bb      	str	r3, [r7, #8]
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	e7fd      	b.n	8005c58 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c60:	1e5a      	subs	r2, r3, #1
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d044      	beq.n	8005cfc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d140      	bne.n	8005cfc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fb3e 	bl	8004300 <uxListRemove>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d115      	bne.n	8005cb6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8e:	491f      	ldr	r1, [pc, #124]	@ (8005d0c <xTaskPriorityDisinherit+0x108>)
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <xTaskPriorityDisinherit+0xb2>
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43da      	mvns	r2, r3
 8005cac:	4b18      	ldr	r3, [pc, #96]	@ (8005d10 <xTaskPriorityDisinherit+0x10c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	4a17      	ldr	r2, [pc, #92]	@ (8005d10 <xTaskPriorityDisinherit+0x10c>)
 8005cb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc2:	f1c3 0207 	rsb	r2, r3, #7
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cce:	2201      	movs	r2, #1
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8005d10 <xTaskPriorityDisinherit+0x10c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8005d10 <xTaskPriorityDisinherit+0x10c>)
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4a08      	ldr	r2, [pc, #32]	@ (8005d0c <xTaskPriorityDisinherit+0x108>)
 8005cea:	441a      	add	r2, r3
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	f7fe faa9 	bl	800424a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cfc:	697b      	ldr	r3, [r7, #20]
	}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	200003f0 	.word	0x200003f0
 8005d0c:	200003f4 	.word	0x200003f4
 8005d10:	200004f8 	.word	0x200004f8

08005d14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d22:	2301      	movs	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 808a 	beq.w	8005e42 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	60fb      	str	r3, [r7, #12]
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	e7fd      	b.n	8005d4a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d902      	bls.n	8005d5e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	e002      	b.n	8005d64 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d069      	beq.n	8005e42 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d164      	bne.n	8005e42 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005d78:	4b34      	ldr	r3, [pc, #208]	@ (8005e4c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d10b      	bne.n	8005d9a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60bb      	str	r3, [r7, #8]
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	e7fd      	b.n	8005d96 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	db04      	blt.n	8005db8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f1c3 0207 	rsb	r2, r3, #7
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	6959      	ldr	r1, [r3, #20]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4a22      	ldr	r2, [pc, #136]	@ (8005e50 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005dc8:	4413      	add	r3, r2
 8005dca:	4299      	cmp	r1, r3
 8005dcc:	d101      	bne.n	8005dd2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d034      	beq.n	8005e42 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe fa8f 	bl	8004300 <uxListRemove>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d115      	bne.n	8005e14 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dec:	4918      	ldr	r1, [pc, #96]	@ (8005e50 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	440b      	add	r3, r1
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	2201      	movs	r2, #1
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	43da      	mvns	r2, r3
 8005e0a:	4b12      	ldr	r3, [pc, #72]	@ (8005e54 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	4a10      	ldr	r2, [pc, #64]	@ (8005e54 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005e12:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e18:	2201      	movs	r2, #1
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	4a0c      	ldr	r2, [pc, #48]	@ (8005e54 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4a07      	ldr	r2, [pc, #28]	@ (8005e50 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005e34:	441a      	add	r2, r3
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f7fe fa04 	bl	800424a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e42:	bf00      	nop
 8005e44:	3720      	adds	r7, #32
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200003f0 	.word	0x200003f0
 8005e50:	200003f4 	.word	0x200003f4
 8005e54:	200004f8 	.word	0x200004f8

08005e58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e5c:	4b07      	ldr	r3, [pc, #28]	@ (8005e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d004      	beq.n	8005e6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e64:	4b05      	ldr	r3, [pc, #20]	@ (8005e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e6a:	3201      	adds	r2, #1
 8005e6c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005e6e:	4b03      	ldr	r3, [pc, #12]	@ (8005e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8005e70:	681b      	ldr	r3, [r3, #0]
	}
 8005e72:	4618      	mov	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	200003f0 	.word	0x200003f0

08005e80 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e8a:	4b29      	ldr	r3, [pc, #164]	@ (8005f30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e90:	4b28      	ldr	r3, [pc, #160]	@ (8005f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3304      	adds	r3, #4
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fa32 	bl	8004300 <uxListRemove>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10b      	bne.n	8005eba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005ea2:	4b24      	ldr	r3, [pc, #144]	@ (8005f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43da      	mvns	r2, r3
 8005eb0:	4b21      	ldr	r3, [pc, #132]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	4a20      	ldr	r2, [pc, #128]	@ (8005f38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d10a      	bne.n	8005ed8 <prvAddCurrentTaskToDelayedList+0x58>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	481a      	ldr	r0, [pc, #104]	@ (8005f3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ed2:	f7fe f9ba 	bl	800424a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ed6:	e026      	b.n	8005f26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4413      	add	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ee0:	4b14      	ldr	r3, [pc, #80]	@ (8005f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d209      	bcs.n	8005f04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef0:	4b13      	ldr	r3, [pc, #76]	@ (8005f40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8005f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f7fe f9c7 	bl	8004290 <vListInsert>
}
 8005f02:	e010      	b.n	8005f26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f04:	4b0f      	ldr	r3, [pc, #60]	@ (8005f44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4b0a      	ldr	r3, [pc, #40]	@ (8005f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f7fe f9bd 	bl	8004290 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f16:	4b0c      	ldr	r3, [pc, #48]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d202      	bcs.n	8005f26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f20:	4a09      	ldr	r2, [pc, #36]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6013      	str	r3, [r2, #0]
}
 8005f26:	bf00      	nop
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200004f4 	.word	0x200004f4
 8005f34:	200003f0 	.word	0x200003f0
 8005f38:	200004f8 	.word	0x200004f8
 8005f3c:	200004dc 	.word	0x200004dc
 8005f40:	200004ac 	.word	0x200004ac
 8005f44:	200004a8 	.word	0x200004a8
 8005f48:	20000510 	.word	0x20000510

08005f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3b04      	subs	r3, #4
 8005f5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3b04      	subs	r3, #4
 8005f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f023 0201 	bic.w	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3b04      	subs	r3, #4
 8005f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f7c:	4a08      	ldr	r2, [pc, #32]	@ (8005fa0 <pxPortInitialiseStack+0x54>)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3b14      	subs	r3, #20
 8005f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3b20      	subs	r3, #32
 8005f92:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f94:	68fb      	ldr	r3, [r7, #12]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr
 8005fa0:	08005fa5 	.word	0x08005fa5

08005fa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fae:	4b12      	ldr	r3, [pc, #72]	@ (8005ff8 <prvTaskExitError+0x54>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb6:	d00b      	beq.n	8005fd0 <prvTaskExitError+0x2c>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	60fb      	str	r3, [r7, #12]
}
 8005fca:	bf00      	nop
 8005fcc:	bf00      	nop
 8005fce:	e7fd      	b.n	8005fcc <prvTaskExitError+0x28>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	60bb      	str	r3, [r7, #8]
}
 8005fe2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fe4:	bf00      	nop
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0fc      	beq.n	8005fe6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr
 8005ff8:	20000010 	.word	0x20000010
 8005ffc:	00000000 	.word	0x00000000

08006000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006000:	4b07      	ldr	r3, [pc, #28]	@ (8006020 <pxCurrentTCBConst2>)
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	6808      	ldr	r0, [r1, #0]
 8006006:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800600a:	f380 8809 	msr	PSP, r0
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f380 8811 	msr	BASEPRI, r0
 800601a:	f04e 0e0d 	orr.w	lr, lr, #13
 800601e:	4770      	bx	lr

08006020 <pxCurrentTCBConst2>:
 8006020:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop

08006028 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006028:	4806      	ldr	r0, [pc, #24]	@ (8006044 <prvPortStartFirstTask+0x1c>)
 800602a:	6800      	ldr	r0, [r0, #0]
 800602c:	6800      	ldr	r0, [r0, #0]
 800602e:	f380 8808 	msr	MSP, r0
 8006032:	b662      	cpsie	i
 8006034:	b661      	cpsie	f
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	df00      	svc	0
 8006040:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006042:	bf00      	nop
 8006044:	e000ed08 	.word	0xe000ed08

08006048 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800604e:	4b32      	ldr	r3, [pc, #200]	@ (8006118 <xPortStartScheduler+0xd0>)
 8006050:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	22ff      	movs	r2, #255	@ 0xff
 800605e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006070:	b2da      	uxtb	r2, r3
 8006072:	4b2a      	ldr	r3, [pc, #168]	@ (800611c <xPortStartScheduler+0xd4>)
 8006074:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006076:	4b2a      	ldr	r3, [pc, #168]	@ (8006120 <xPortStartScheduler+0xd8>)
 8006078:	2207      	movs	r2, #7
 800607a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800607c:	e009      	b.n	8006092 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800607e:	4b28      	ldr	r3, [pc, #160]	@ (8006120 <xPortStartScheduler+0xd8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3b01      	subs	r3, #1
 8006084:	4a26      	ldr	r2, [pc, #152]	@ (8006120 <xPortStartScheduler+0xd8>)
 8006086:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	b2db      	uxtb	r3, r3
 8006090:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006092:	78fb      	ldrb	r3, [r7, #3]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800609a:	2b80      	cmp	r3, #128	@ 0x80
 800609c:	d0ef      	beq.n	800607e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800609e:	4b20      	ldr	r3, [pc, #128]	@ (8006120 <xPortStartScheduler+0xd8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f1c3 0307 	rsb	r3, r3, #7
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d00b      	beq.n	80060c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	60bb      	str	r3, [r7, #8]
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	e7fd      	b.n	80060be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060c2:	4b17      	ldr	r3, [pc, #92]	@ (8006120 <xPortStartScheduler+0xd8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	4a15      	ldr	r2, [pc, #84]	@ (8006120 <xPortStartScheduler+0xd8>)
 80060ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060cc:	4b14      	ldr	r3, [pc, #80]	@ (8006120 <xPortStartScheduler+0xd8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060d4:	4a12      	ldr	r2, [pc, #72]	@ (8006120 <xPortStartScheduler+0xd8>)
 80060d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060e0:	4b10      	ldr	r3, [pc, #64]	@ (8006124 <xPortStartScheduler+0xdc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006124 <xPortStartScheduler+0xdc>)
 80060e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006124 <xPortStartScheduler+0xdc>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006124 <xPortStartScheduler+0xdc>)
 80060f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060f8:	f000 f8b8 	bl	800626c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006128 <xPortStartScheduler+0xe0>)
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006102:	f7ff ff91 	bl	8006028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006106:	f7ff fa93 	bl	8005630 <vTaskSwitchContext>
	prvTaskExitError();
 800610a:	f7ff ff4b 	bl	8005fa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	e000e400 	.word	0xe000e400
 800611c:	2000051c 	.word	0x2000051c
 8006120:	20000520 	.word	0x20000520
 8006124:	e000ed20 	.word	0xe000ed20
 8006128:	20000010 	.word	0x20000010

0800612c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	607b      	str	r3, [r7, #4]
}
 8006144:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006146:	4b0f      	ldr	r3, [pc, #60]	@ (8006184 <vPortEnterCritical+0x58>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3301      	adds	r3, #1
 800614c:	4a0d      	ldr	r2, [pc, #52]	@ (8006184 <vPortEnterCritical+0x58>)
 800614e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006150:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <vPortEnterCritical+0x58>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d110      	bne.n	800617a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006158:	4b0b      	ldr	r3, [pc, #44]	@ (8006188 <vPortEnterCritical+0x5c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <vPortEnterCritical+0x4e>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	603b      	str	r3, [r7, #0]
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	e7fd      	b.n	8006176 <vPortEnterCritical+0x4a>
	}
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr
 8006184:	20000010 	.word	0x20000010
 8006188:	e000ed04 	.word	0xe000ed04

0800618c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006192:	4b12      	ldr	r3, [pc, #72]	@ (80061dc <vPortExitCritical+0x50>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <vPortExitCritical+0x26>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	607b      	str	r3, [r7, #4]
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	e7fd      	b.n	80061ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061b2:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <vPortExitCritical+0x50>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	4a08      	ldr	r2, [pc, #32]	@ (80061dc <vPortExitCritical+0x50>)
 80061ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061bc:	4b07      	ldr	r3, [pc, #28]	@ (80061dc <vPortExitCritical+0x50>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d105      	bne.n	80061d0 <vPortExitCritical+0x44>
 80061c4:	2300      	movs	r3, #0
 80061c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	f383 8811 	msr	BASEPRI, r3
}
 80061ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000010 	.word	0x20000010

080061e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061e0:	f3ef 8009 	mrs	r0, PSP
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <pxCurrentTCBConst>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061f0:	6010      	str	r0, [r2, #0]
 80061f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80061f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061fa:	f380 8811 	msr	BASEPRI, r0
 80061fe:	f7ff fa17 	bl	8005630 <vTaskSwitchContext>
 8006202:	f04f 0000 	mov.w	r0, #0
 8006206:	f380 8811 	msr	BASEPRI, r0
 800620a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800620e:	6819      	ldr	r1, [r3, #0]
 8006210:	6808      	ldr	r0, [r1, #0]
 8006212:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006216:	f380 8809 	msr	PSP, r0
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	4770      	bx	lr

08006220 <pxCurrentTCBConst>:
 8006220:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop

08006228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	607b      	str	r3, [r7, #4]
}
 8006240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006242:	f7ff f937 	bl	80054b4 <xTaskIncrementTick>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800624c:	4b06      	ldr	r3, [pc, #24]	@ (8006268 <SysTick_Handler+0x40>)
 800624e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	2300      	movs	r3, #0
 8006256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	f383 8811 	msr	BASEPRI, r3
}
 800625e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	e000ed04 	.word	0xe000ed04

0800626c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006270:	4b0a      	ldr	r3, [pc, #40]	@ (800629c <vPortSetupTimerInterrupt+0x30>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006276:	4b0a      	ldr	r3, [pc, #40]	@ (80062a0 <vPortSetupTimerInterrupt+0x34>)
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800627c:	4b09      	ldr	r3, [pc, #36]	@ (80062a4 <vPortSetupTimerInterrupt+0x38>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a09      	ldr	r2, [pc, #36]	@ (80062a8 <vPortSetupTimerInterrupt+0x3c>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	099b      	lsrs	r3, r3, #6
 8006288:	4a08      	ldr	r2, [pc, #32]	@ (80062ac <vPortSetupTimerInterrupt+0x40>)
 800628a:	3b01      	subs	r3, #1
 800628c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800628e:	4b03      	ldr	r3, [pc, #12]	@ (800629c <vPortSetupTimerInterrupt+0x30>)
 8006290:	2207      	movs	r2, #7
 8006292:	601a      	str	r2, [r3, #0]
}
 8006294:	bf00      	nop
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr
 800629c:	e000e010 	.word	0xe000e010
 80062a0:	e000e018 	.word	0xe000e018
 80062a4:	20000004 	.word	0x20000004
 80062a8:	10624dd3 	.word	0x10624dd3
 80062ac:	e000e014 	.word	0xe000e014

080062b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062b6:	f3ef 8305 	mrs	r3, IPSR
 80062ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b0f      	cmp	r3, #15
 80062c0:	d915      	bls.n	80062ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062c2:	4a17      	ldr	r2, [pc, #92]	@ (8006320 <vPortValidateInterruptPriority+0x70>)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062cc:	4b15      	ldr	r3, [pc, #84]	@ (8006324 <vPortValidateInterruptPriority+0x74>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	7afa      	ldrb	r2, [r7, #11]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d20b      	bcs.n	80062ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	607b      	str	r3, [r7, #4]
}
 80062e8:	bf00      	nop
 80062ea:	bf00      	nop
 80062ec:	e7fd      	b.n	80062ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006328 <vPortValidateInterruptPriority+0x78>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80062f6:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <vPortValidateInterruptPriority+0x7c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d90b      	bls.n	8006316 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	603b      	str	r3, [r7, #0]
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	e7fd      	b.n	8006312 <vPortValidateInterruptPriority+0x62>
	}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr
 8006320:	e000e3f0 	.word	0xe000e3f0
 8006324:	2000051c 	.word	0x2000051c
 8006328:	e000ed0c 	.word	0xe000ed0c
 800632c:	20000520 	.word	0x20000520

08006330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	@ 0x28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006338:	2300      	movs	r3, #0
 800633a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800633c:	f7ff f80e 	bl	800535c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006340:	4b5a      	ldr	r3, [pc, #360]	@ (80064ac <pvPortMalloc+0x17c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006348:	f000 f916 	bl	8006578 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800634c:	4b58      	ldr	r3, [pc, #352]	@ (80064b0 <pvPortMalloc+0x180>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4013      	ands	r3, r2
 8006354:	2b00      	cmp	r3, #0
 8006356:	f040 8090 	bne.w	800647a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01e      	beq.n	800639e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006360:	2208      	movs	r2, #8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	2b00      	cmp	r3, #0
 8006370:	d015      	beq.n	800639e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f023 0307 	bic.w	r3, r3, #7
 8006378:	3308      	adds	r3, #8
 800637a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00b      	beq.n	800639e <pvPortMalloc+0x6e>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	617b      	str	r3, [r7, #20]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d06a      	beq.n	800647a <pvPortMalloc+0x14a>
 80063a4:	4b43      	ldr	r3, [pc, #268]	@ (80064b4 <pvPortMalloc+0x184>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d865      	bhi.n	800647a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063ae:	4b42      	ldr	r3, [pc, #264]	@ (80064b8 <pvPortMalloc+0x188>)
 80063b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063b2:	4b41      	ldr	r3, [pc, #260]	@ (80064b8 <pvPortMalloc+0x188>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063b8:	e004      	b.n	80063c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d903      	bls.n	80063d6 <pvPortMalloc+0xa6>
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f1      	bne.n	80063ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063d6:	4b35      	ldr	r3, [pc, #212]	@ (80064ac <pvPortMalloc+0x17c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063dc:	429a      	cmp	r2, r3
 80063de:	d04c      	beq.n	800647a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2208      	movs	r2, #8
 80063e6:	4413      	add	r3, r2
 80063e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	1ad2      	subs	r2, r2, r3
 80063fa:	2308      	movs	r3, #8
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	429a      	cmp	r2, r3
 8006400:	d920      	bls.n	8006444 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4413      	add	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <pvPortMalloc+0xfc>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	613b      	str	r3, [r7, #16]
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	e7fd      	b.n	8006428 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800643e:	69b8      	ldr	r0, [r7, #24]
 8006440:	f000 f8fc 	bl	800663c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006444:	4b1b      	ldr	r3, [pc, #108]	@ (80064b4 <pvPortMalloc+0x184>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	4a19      	ldr	r2, [pc, #100]	@ (80064b4 <pvPortMalloc+0x184>)
 8006450:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006452:	4b18      	ldr	r3, [pc, #96]	@ (80064b4 <pvPortMalloc+0x184>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	4b19      	ldr	r3, [pc, #100]	@ (80064bc <pvPortMalloc+0x18c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	d203      	bcs.n	8006466 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800645e:	4b15      	ldr	r3, [pc, #84]	@ (80064b4 <pvPortMalloc+0x184>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a16      	ldr	r2, [pc, #88]	@ (80064bc <pvPortMalloc+0x18c>)
 8006464:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	4b11      	ldr	r3, [pc, #68]	@ (80064b0 <pvPortMalloc+0x180>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	431a      	orrs	r2, r3
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800647a:	f7fe ff7d 	bl	8005378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <pvPortMalloc+0x170>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	60fb      	str	r3, [r7, #12]
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <pvPortMalloc+0x16c>
	return pvReturn;
 80064a0:	69fb      	ldr	r3, [r7, #28]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3728      	adds	r7, #40	@ 0x28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	2000252c 	.word	0x2000252c
 80064b0:	20002538 	.word	0x20002538
 80064b4:	20002530 	.word	0x20002530
 80064b8:	20002524 	.word	0x20002524
 80064bc:	20002534 	.word	0x20002534

080064c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d04a      	beq.n	8006568 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064d2:	2308      	movs	r3, #8
 80064d4:	425b      	negs	r3, r3
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4413      	add	r3, r2
 80064da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	4b22      	ldr	r3, [pc, #136]	@ (8006570 <vPortFree+0xb0>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4013      	ands	r3, r2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10b      	bne.n	8006506 <vPortFree+0x46>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	60fb      	str	r3, [r7, #12]
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	e7fd      	b.n	8006502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00b      	beq.n	8006526 <vPortFree+0x66>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	60bb      	str	r3, [r7, #8]
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	e7fd      	b.n	8006522 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	4b11      	ldr	r3, [pc, #68]	@ (8006570 <vPortFree+0xb0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4013      	ands	r3, r2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d019      	beq.n	8006568 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d115      	bne.n	8006568 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <vPortFree+0xb0>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	43db      	mvns	r3, r3
 8006546:	401a      	ands	r2, r3
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800654c:	f7fe ff06 	bl	800535c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	4b07      	ldr	r3, [pc, #28]	@ (8006574 <vPortFree+0xb4>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4413      	add	r3, r2
 800655a:	4a06      	ldr	r2, [pc, #24]	@ (8006574 <vPortFree+0xb4>)
 800655c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800655e:	6938      	ldr	r0, [r7, #16]
 8006560:	f000 f86c 	bl	800663c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006564:	f7fe ff08 	bl	8005378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006568:	bf00      	nop
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20002538 	.word	0x20002538
 8006574:	20002530 	.word	0x20002530

08006578 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800657e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006582:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006584:	4b27      	ldr	r3, [pc, #156]	@ (8006624 <prvHeapInit+0xac>)
 8006586:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00c      	beq.n	80065ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3307      	adds	r3, #7
 8006596:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0307 	bic.w	r3, r3, #7
 800659e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006624 <prvHeapInit+0xac>)
 80065a8:	4413      	add	r3, r2
 80065aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006628 <prvHeapInit+0xb0>)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006628 <prvHeapInit+0xb0>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	4413      	add	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065c4:	2208      	movs	r2, #8
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1a9b      	subs	r3, r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0307 	bic.w	r3, r3, #7
 80065d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4a15      	ldr	r2, [pc, #84]	@ (800662c <prvHeapInit+0xb4>)
 80065d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065da:	4b14      	ldr	r3, [pc, #80]	@ (800662c <prvHeapInit+0xb4>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2200      	movs	r2, #0
 80065e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065e2:	4b12      	ldr	r3, [pc, #72]	@ (800662c <prvHeapInit+0xb4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	1ad2      	subs	r2, r2, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065f8:	4b0c      	ldr	r3, [pc, #48]	@ (800662c <prvHeapInit+0xb4>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	4a0a      	ldr	r2, [pc, #40]	@ (8006630 <prvHeapInit+0xb8>)
 8006606:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	4a09      	ldr	r2, [pc, #36]	@ (8006634 <prvHeapInit+0xbc>)
 800660e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006610:	4b09      	ldr	r3, [pc, #36]	@ (8006638 <prvHeapInit+0xc0>)
 8006612:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006616:	601a      	str	r2, [r3, #0]
}
 8006618:	bf00      	nop
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	bc80      	pop	{r7}
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20000524 	.word	0x20000524
 8006628:	20002524 	.word	0x20002524
 800662c:	2000252c 	.word	0x2000252c
 8006630:	20002534 	.word	0x20002534
 8006634:	20002530 	.word	0x20002530
 8006638:	20002538 	.word	0x20002538

0800663c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006644:	4b27      	ldr	r3, [pc, #156]	@ (80066e4 <prvInsertBlockIntoFreeList+0xa8>)
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	e002      	b.n	8006650 <prvInsertBlockIntoFreeList+0x14>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	429a      	cmp	r2, r3
 8006658:	d8f7      	bhi.n	800664a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	4413      	add	r3, r2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	429a      	cmp	r2, r3
 800666a:	d108      	bne.n	800667e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	441a      	add	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	441a      	add	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d118      	bne.n	80066c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b14      	ldr	r3, [pc, #80]	@ (80066e8 <prvInsertBlockIntoFreeList+0xac>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d00d      	beq.n	80066ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	441a      	add	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	e008      	b.n	80066cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066ba:	4b0b      	ldr	r3, [pc, #44]	@ (80066e8 <prvInsertBlockIntoFreeList+0xac>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	e003      	b.n	80066cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d002      	beq.n	80066da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr
 80066e4:	20002524 	.word	0x20002524
 80066e8:	2000252c 	.word	0x2000252c

080066ec <std>:
 80066ec:	2300      	movs	r3, #0
 80066ee:	b510      	push	{r4, lr}
 80066f0:	4604      	mov	r4, r0
 80066f2:	e9c0 3300 	strd	r3, r3, [r0]
 80066f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066fa:	6083      	str	r3, [r0, #8]
 80066fc:	8181      	strh	r1, [r0, #12]
 80066fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006700:	81c2      	strh	r2, [r0, #14]
 8006702:	6183      	str	r3, [r0, #24]
 8006704:	4619      	mov	r1, r3
 8006706:	2208      	movs	r2, #8
 8006708:	305c      	adds	r0, #92	@ 0x5c
 800670a:	f000 f906 	bl	800691a <memset>
 800670e:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <std+0x58>)
 8006710:	6224      	str	r4, [r4, #32]
 8006712:	6263      	str	r3, [r4, #36]	@ 0x24
 8006714:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <std+0x5c>)
 8006716:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006718:	4b0c      	ldr	r3, [pc, #48]	@ (800674c <std+0x60>)
 800671a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800671c:	4b0c      	ldr	r3, [pc, #48]	@ (8006750 <std+0x64>)
 800671e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006720:	4b0c      	ldr	r3, [pc, #48]	@ (8006754 <std+0x68>)
 8006722:	429c      	cmp	r4, r3
 8006724:	d006      	beq.n	8006734 <std+0x48>
 8006726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800672a:	4294      	cmp	r4, r2
 800672c:	d002      	beq.n	8006734 <std+0x48>
 800672e:	33d0      	adds	r3, #208	@ 0xd0
 8006730:	429c      	cmp	r4, r3
 8006732:	d105      	bne.n	8006740 <std+0x54>
 8006734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800673c:	f000 b974 	b.w	8006a28 <__retarget_lock_init_recursive>
 8006740:	bd10      	pop	{r4, pc}
 8006742:	bf00      	nop
 8006744:	08006895 	.word	0x08006895
 8006748:	080068b7 	.word	0x080068b7
 800674c:	080068ef 	.word	0x080068ef
 8006750:	08006913 	.word	0x08006913
 8006754:	2000253c 	.word	0x2000253c

08006758 <stdio_exit_handler>:
 8006758:	4a02      	ldr	r2, [pc, #8]	@ (8006764 <stdio_exit_handler+0xc>)
 800675a:	4903      	ldr	r1, [pc, #12]	@ (8006768 <stdio_exit_handler+0x10>)
 800675c:	4803      	ldr	r0, [pc, #12]	@ (800676c <stdio_exit_handler+0x14>)
 800675e:	f000 b869 	b.w	8006834 <_fwalk_sglue>
 8006762:	bf00      	nop
 8006764:	20000014 	.word	0x20000014
 8006768:	080072d9 	.word	0x080072d9
 800676c:	20000024 	.word	0x20000024

08006770 <cleanup_stdio>:
 8006770:	6841      	ldr	r1, [r0, #4]
 8006772:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <cleanup_stdio+0x34>)
 8006774:	b510      	push	{r4, lr}
 8006776:	4299      	cmp	r1, r3
 8006778:	4604      	mov	r4, r0
 800677a:	d001      	beq.n	8006780 <cleanup_stdio+0x10>
 800677c:	f000 fdac 	bl	80072d8 <_fflush_r>
 8006780:	68a1      	ldr	r1, [r4, #8]
 8006782:	4b09      	ldr	r3, [pc, #36]	@ (80067a8 <cleanup_stdio+0x38>)
 8006784:	4299      	cmp	r1, r3
 8006786:	d002      	beq.n	800678e <cleanup_stdio+0x1e>
 8006788:	4620      	mov	r0, r4
 800678a:	f000 fda5 	bl	80072d8 <_fflush_r>
 800678e:	68e1      	ldr	r1, [r4, #12]
 8006790:	4b06      	ldr	r3, [pc, #24]	@ (80067ac <cleanup_stdio+0x3c>)
 8006792:	4299      	cmp	r1, r3
 8006794:	d004      	beq.n	80067a0 <cleanup_stdio+0x30>
 8006796:	4620      	mov	r0, r4
 8006798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800679c:	f000 bd9c 	b.w	80072d8 <_fflush_r>
 80067a0:	bd10      	pop	{r4, pc}
 80067a2:	bf00      	nop
 80067a4:	2000253c 	.word	0x2000253c
 80067a8:	200025a4 	.word	0x200025a4
 80067ac:	2000260c 	.word	0x2000260c

080067b0 <global_stdio_init.part.0>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	4b0b      	ldr	r3, [pc, #44]	@ (80067e0 <global_stdio_init.part.0+0x30>)
 80067b4:	4c0b      	ldr	r4, [pc, #44]	@ (80067e4 <global_stdio_init.part.0+0x34>)
 80067b6:	4a0c      	ldr	r2, [pc, #48]	@ (80067e8 <global_stdio_init.part.0+0x38>)
 80067b8:	4620      	mov	r0, r4
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	2104      	movs	r1, #4
 80067be:	2200      	movs	r2, #0
 80067c0:	f7ff ff94 	bl	80066ec <std>
 80067c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067c8:	2201      	movs	r2, #1
 80067ca:	2109      	movs	r1, #9
 80067cc:	f7ff ff8e 	bl	80066ec <std>
 80067d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067d4:	2202      	movs	r2, #2
 80067d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067da:	2112      	movs	r1, #18
 80067dc:	f7ff bf86 	b.w	80066ec <std>
 80067e0:	20002674 	.word	0x20002674
 80067e4:	2000253c 	.word	0x2000253c
 80067e8:	08006759 	.word	0x08006759

080067ec <__sfp_lock_acquire>:
 80067ec:	4801      	ldr	r0, [pc, #4]	@ (80067f4 <__sfp_lock_acquire+0x8>)
 80067ee:	f000 b91c 	b.w	8006a2a <__retarget_lock_acquire_recursive>
 80067f2:	bf00      	nop
 80067f4:	2000267d 	.word	0x2000267d

080067f8 <__sfp_lock_release>:
 80067f8:	4801      	ldr	r0, [pc, #4]	@ (8006800 <__sfp_lock_release+0x8>)
 80067fa:	f000 b917 	b.w	8006a2c <__retarget_lock_release_recursive>
 80067fe:	bf00      	nop
 8006800:	2000267d 	.word	0x2000267d

08006804 <__sinit>:
 8006804:	b510      	push	{r4, lr}
 8006806:	4604      	mov	r4, r0
 8006808:	f7ff fff0 	bl	80067ec <__sfp_lock_acquire>
 800680c:	6a23      	ldr	r3, [r4, #32]
 800680e:	b11b      	cbz	r3, 8006818 <__sinit+0x14>
 8006810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006814:	f7ff bff0 	b.w	80067f8 <__sfp_lock_release>
 8006818:	4b04      	ldr	r3, [pc, #16]	@ (800682c <__sinit+0x28>)
 800681a:	6223      	str	r3, [r4, #32]
 800681c:	4b04      	ldr	r3, [pc, #16]	@ (8006830 <__sinit+0x2c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f5      	bne.n	8006810 <__sinit+0xc>
 8006824:	f7ff ffc4 	bl	80067b0 <global_stdio_init.part.0>
 8006828:	e7f2      	b.n	8006810 <__sinit+0xc>
 800682a:	bf00      	nop
 800682c:	08006771 	.word	0x08006771
 8006830:	20002674 	.word	0x20002674

08006834 <_fwalk_sglue>:
 8006834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006838:	4607      	mov	r7, r0
 800683a:	4688      	mov	r8, r1
 800683c:	4614      	mov	r4, r2
 800683e:	2600      	movs	r6, #0
 8006840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006844:	f1b9 0901 	subs.w	r9, r9, #1
 8006848:	d505      	bpl.n	8006856 <_fwalk_sglue+0x22>
 800684a:	6824      	ldr	r4, [r4, #0]
 800684c:	2c00      	cmp	r4, #0
 800684e:	d1f7      	bne.n	8006840 <_fwalk_sglue+0xc>
 8006850:	4630      	mov	r0, r6
 8006852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006856:	89ab      	ldrh	r3, [r5, #12]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d907      	bls.n	800686c <_fwalk_sglue+0x38>
 800685c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006860:	3301      	adds	r3, #1
 8006862:	d003      	beq.n	800686c <_fwalk_sglue+0x38>
 8006864:	4629      	mov	r1, r5
 8006866:	4638      	mov	r0, r7
 8006868:	47c0      	blx	r8
 800686a:	4306      	orrs	r6, r0
 800686c:	3568      	adds	r5, #104	@ 0x68
 800686e:	e7e9      	b.n	8006844 <_fwalk_sglue+0x10>

08006870 <iprintf>:
 8006870:	b40f      	push	{r0, r1, r2, r3}
 8006872:	b507      	push	{r0, r1, r2, lr}
 8006874:	4906      	ldr	r1, [pc, #24]	@ (8006890 <iprintf+0x20>)
 8006876:	ab04      	add	r3, sp, #16
 8006878:	6808      	ldr	r0, [r1, #0]
 800687a:	f853 2b04 	ldr.w	r2, [r3], #4
 800687e:	6881      	ldr	r1, [r0, #8]
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	f000 fa01 	bl	8006c88 <_vfiprintf_r>
 8006886:	b003      	add	sp, #12
 8006888:	f85d eb04 	ldr.w	lr, [sp], #4
 800688c:	b004      	add	sp, #16
 800688e:	4770      	bx	lr
 8006890:	20000020 	.word	0x20000020

08006894 <__sread>:
 8006894:	b510      	push	{r4, lr}
 8006896:	460c      	mov	r4, r1
 8006898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689c:	f000 f876 	bl	800698c <_read_r>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	bfab      	itete	ge
 80068a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068a6:	89a3      	ldrhlt	r3, [r4, #12]
 80068a8:	181b      	addge	r3, r3, r0
 80068aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068ae:	bfac      	ite	ge
 80068b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068b2:	81a3      	strhlt	r3, [r4, #12]
 80068b4:	bd10      	pop	{r4, pc}

080068b6 <__swrite>:
 80068b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ba:	461f      	mov	r7, r3
 80068bc:	898b      	ldrh	r3, [r1, #12]
 80068be:	4605      	mov	r5, r0
 80068c0:	05db      	lsls	r3, r3, #23
 80068c2:	460c      	mov	r4, r1
 80068c4:	4616      	mov	r6, r2
 80068c6:	d505      	bpl.n	80068d4 <__swrite+0x1e>
 80068c8:	2302      	movs	r3, #2
 80068ca:	2200      	movs	r2, #0
 80068cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d0:	f000 f84a 	bl	8006968 <_lseek_r>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	4632      	mov	r2, r6
 80068d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068dc:	81a3      	strh	r3, [r4, #12]
 80068de:	4628      	mov	r0, r5
 80068e0:	463b      	mov	r3, r7
 80068e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ea:	f000 b861 	b.w	80069b0 <_write_r>

080068ee <__sseek>:
 80068ee:	b510      	push	{r4, lr}
 80068f0:	460c      	mov	r4, r1
 80068f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f6:	f000 f837 	bl	8006968 <_lseek_r>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	bf15      	itete	ne
 8006900:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800690a:	81a3      	strheq	r3, [r4, #12]
 800690c:	bf18      	it	ne
 800690e:	81a3      	strhne	r3, [r4, #12]
 8006910:	bd10      	pop	{r4, pc}

08006912 <__sclose>:
 8006912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006916:	f000 b817 	b.w	8006948 <_close_r>

0800691a <memset>:
 800691a:	4603      	mov	r3, r0
 800691c:	4402      	add	r2, r0
 800691e:	4293      	cmp	r3, r2
 8006920:	d100      	bne.n	8006924 <memset+0xa>
 8006922:	4770      	bx	lr
 8006924:	f803 1b01 	strb.w	r1, [r3], #1
 8006928:	e7f9      	b.n	800691e <memset+0x4>

0800692a <strcat>:
 800692a:	4602      	mov	r2, r0
 800692c:	b510      	push	{r4, lr}
 800692e:	7814      	ldrb	r4, [r2, #0]
 8006930:	4613      	mov	r3, r2
 8006932:	3201      	adds	r2, #1
 8006934:	2c00      	cmp	r4, #0
 8006936:	d1fa      	bne.n	800692e <strcat+0x4>
 8006938:	3b01      	subs	r3, #1
 800693a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800693e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006942:	2a00      	cmp	r2, #0
 8006944:	d1f9      	bne.n	800693a <strcat+0x10>
 8006946:	bd10      	pop	{r4, pc}

08006948 <_close_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	2300      	movs	r3, #0
 800694c:	4d05      	ldr	r5, [pc, #20]	@ (8006964 <_close_r+0x1c>)
 800694e:	4604      	mov	r4, r0
 8006950:	4608      	mov	r0, r1
 8006952:	602b      	str	r3, [r5, #0]
 8006954:	f000 fef0 	bl	8007738 <_close>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d102      	bne.n	8006962 <_close_r+0x1a>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	b103      	cbz	r3, 8006962 <_close_r+0x1a>
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	20002678 	.word	0x20002678

08006968 <_lseek_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4604      	mov	r4, r0
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	2200      	movs	r2, #0
 8006972:	4d05      	ldr	r5, [pc, #20]	@ (8006988 <_lseek_r+0x20>)
 8006974:	602a      	str	r2, [r5, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	f000 fe9f 	bl	80076ba <_lseek>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_lseek_r+0x1e>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	b103      	cbz	r3, 8006986 <_lseek_r+0x1e>
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	20002678 	.word	0x20002678

0800698c <_read_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	4611      	mov	r1, r2
 8006994:	2200      	movs	r2, #0
 8006996:	4d05      	ldr	r5, [pc, #20]	@ (80069ac <_read_r+0x20>)
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f000 fe37 	bl	800760e <_read>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_read_r+0x1e>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_read_r+0x1e>
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	20002678 	.word	0x20002678

080069b0 <_write_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4604      	mov	r4, r0
 80069b4:	4608      	mov	r0, r1
 80069b6:	4611      	mov	r1, r2
 80069b8:	2200      	movs	r2, #0
 80069ba:	4d05      	ldr	r5, [pc, #20]	@ (80069d0 <_write_r+0x20>)
 80069bc:	602a      	str	r2, [r5, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	f000 fe8d 	bl	80076de <_write>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_write_r+0x1e>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_write_r+0x1e>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	20002678 	.word	0x20002678

080069d4 <__errno>:
 80069d4:	4b01      	ldr	r3, [pc, #4]	@ (80069dc <__errno+0x8>)
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	20000020 	.word	0x20000020

080069e0 <__libc_init_array>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	2600      	movs	r6, #0
 80069e4:	4d0c      	ldr	r5, [pc, #48]	@ (8006a18 <__libc_init_array+0x38>)
 80069e6:	4c0d      	ldr	r4, [pc, #52]	@ (8006a1c <__libc_init_array+0x3c>)
 80069e8:	1b64      	subs	r4, r4, r5
 80069ea:	10a4      	asrs	r4, r4, #2
 80069ec:	42a6      	cmp	r6, r4
 80069ee:	d109      	bne.n	8006a04 <__libc_init_array+0x24>
 80069f0:	f001 f86c 	bl	8007acc <_init>
 80069f4:	2600      	movs	r6, #0
 80069f6:	4d0a      	ldr	r5, [pc, #40]	@ (8006a20 <__libc_init_array+0x40>)
 80069f8:	4c0a      	ldr	r4, [pc, #40]	@ (8006a24 <__libc_init_array+0x44>)
 80069fa:	1b64      	subs	r4, r4, r5
 80069fc:	10a4      	asrs	r4, r4, #2
 80069fe:	42a6      	cmp	r6, r4
 8006a00:	d105      	bne.n	8006a0e <__libc_init_array+0x2e>
 8006a02:	bd70      	pop	{r4, r5, r6, pc}
 8006a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a08:	4798      	blx	r3
 8006a0a:	3601      	adds	r6, #1
 8006a0c:	e7ee      	b.n	80069ec <__libc_init_array+0xc>
 8006a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a12:	4798      	blx	r3
 8006a14:	3601      	adds	r6, #1
 8006a16:	e7f2      	b.n	80069fe <__libc_init_array+0x1e>
 8006a18:	08007cc8 	.word	0x08007cc8
 8006a1c:	08007cc8 	.word	0x08007cc8
 8006a20:	08007cc8 	.word	0x08007cc8
 8006a24:	08007ccc 	.word	0x08007ccc

08006a28 <__retarget_lock_init_recursive>:
 8006a28:	4770      	bx	lr

08006a2a <__retarget_lock_acquire_recursive>:
 8006a2a:	4770      	bx	lr

08006a2c <__retarget_lock_release_recursive>:
 8006a2c:	4770      	bx	lr

08006a2e <memcpy>:
 8006a2e:	440a      	add	r2, r1
 8006a30:	4291      	cmp	r1, r2
 8006a32:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a36:	d100      	bne.n	8006a3a <memcpy+0xc>
 8006a38:	4770      	bx	lr
 8006a3a:	b510      	push	{r4, lr}
 8006a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a40:	4291      	cmp	r1, r2
 8006a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a46:	d1f9      	bne.n	8006a3c <memcpy+0xe>
 8006a48:	bd10      	pop	{r4, pc}
	...

08006a4c <_free_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4605      	mov	r5, r0
 8006a50:	2900      	cmp	r1, #0
 8006a52:	d040      	beq.n	8006ad6 <_free_r+0x8a>
 8006a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a58:	1f0c      	subs	r4, r1, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	bfb8      	it	lt
 8006a5e:	18e4      	addlt	r4, r4, r3
 8006a60:	f000 f8de 	bl	8006c20 <__malloc_lock>
 8006a64:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad8 <_free_r+0x8c>)
 8006a66:	6813      	ldr	r3, [r2, #0]
 8006a68:	b933      	cbnz	r3, 8006a78 <_free_r+0x2c>
 8006a6a:	6063      	str	r3, [r4, #4]
 8006a6c:	6014      	str	r4, [r2, #0]
 8006a6e:	4628      	mov	r0, r5
 8006a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a74:	f000 b8da 	b.w	8006c2c <__malloc_unlock>
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	d908      	bls.n	8006a8e <_free_r+0x42>
 8006a7c:	6820      	ldr	r0, [r4, #0]
 8006a7e:	1821      	adds	r1, r4, r0
 8006a80:	428b      	cmp	r3, r1
 8006a82:	bf01      	itttt	eq
 8006a84:	6819      	ldreq	r1, [r3, #0]
 8006a86:	685b      	ldreq	r3, [r3, #4]
 8006a88:	1809      	addeq	r1, r1, r0
 8006a8a:	6021      	streq	r1, [r4, #0]
 8006a8c:	e7ed      	b.n	8006a6a <_free_r+0x1e>
 8006a8e:	461a      	mov	r2, r3
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	b10b      	cbz	r3, 8006a98 <_free_r+0x4c>
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	d9fa      	bls.n	8006a8e <_free_r+0x42>
 8006a98:	6811      	ldr	r1, [r2, #0]
 8006a9a:	1850      	adds	r0, r2, r1
 8006a9c:	42a0      	cmp	r0, r4
 8006a9e:	d10b      	bne.n	8006ab8 <_free_r+0x6c>
 8006aa0:	6820      	ldr	r0, [r4, #0]
 8006aa2:	4401      	add	r1, r0
 8006aa4:	1850      	adds	r0, r2, r1
 8006aa6:	4283      	cmp	r3, r0
 8006aa8:	6011      	str	r1, [r2, #0]
 8006aaa:	d1e0      	bne.n	8006a6e <_free_r+0x22>
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	4408      	add	r0, r1
 8006ab2:	6010      	str	r0, [r2, #0]
 8006ab4:	6053      	str	r3, [r2, #4]
 8006ab6:	e7da      	b.n	8006a6e <_free_r+0x22>
 8006ab8:	d902      	bls.n	8006ac0 <_free_r+0x74>
 8006aba:	230c      	movs	r3, #12
 8006abc:	602b      	str	r3, [r5, #0]
 8006abe:	e7d6      	b.n	8006a6e <_free_r+0x22>
 8006ac0:	6820      	ldr	r0, [r4, #0]
 8006ac2:	1821      	adds	r1, r4, r0
 8006ac4:	428b      	cmp	r3, r1
 8006ac6:	bf01      	itttt	eq
 8006ac8:	6819      	ldreq	r1, [r3, #0]
 8006aca:	685b      	ldreq	r3, [r3, #4]
 8006acc:	1809      	addeq	r1, r1, r0
 8006ace:	6021      	streq	r1, [r4, #0]
 8006ad0:	6063      	str	r3, [r4, #4]
 8006ad2:	6054      	str	r4, [r2, #4]
 8006ad4:	e7cb      	b.n	8006a6e <_free_r+0x22>
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	20002684 	.word	0x20002684

08006adc <sbrk_aligned>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	4e0f      	ldr	r6, [pc, #60]	@ (8006b1c <sbrk_aligned+0x40>)
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	6831      	ldr	r1, [r6, #0]
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	b911      	cbnz	r1, 8006aee <sbrk_aligned+0x12>
 8006ae8:	f000 fcb2 	bl	8007450 <_sbrk_r>
 8006aec:	6030      	str	r0, [r6, #0]
 8006aee:	4621      	mov	r1, r4
 8006af0:	4628      	mov	r0, r5
 8006af2:	f000 fcad 	bl	8007450 <_sbrk_r>
 8006af6:	1c43      	adds	r3, r0, #1
 8006af8:	d103      	bne.n	8006b02 <sbrk_aligned+0x26>
 8006afa:	f04f 34ff 	mov.w	r4, #4294967295
 8006afe:	4620      	mov	r0, r4
 8006b00:	bd70      	pop	{r4, r5, r6, pc}
 8006b02:	1cc4      	adds	r4, r0, #3
 8006b04:	f024 0403 	bic.w	r4, r4, #3
 8006b08:	42a0      	cmp	r0, r4
 8006b0a:	d0f8      	beq.n	8006afe <sbrk_aligned+0x22>
 8006b0c:	1a21      	subs	r1, r4, r0
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 fc9e 	bl	8007450 <_sbrk_r>
 8006b14:	3001      	adds	r0, #1
 8006b16:	d1f2      	bne.n	8006afe <sbrk_aligned+0x22>
 8006b18:	e7ef      	b.n	8006afa <sbrk_aligned+0x1e>
 8006b1a:	bf00      	nop
 8006b1c:	20002680 	.word	0x20002680

08006b20 <_malloc_r>:
 8006b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b24:	1ccd      	adds	r5, r1, #3
 8006b26:	f025 0503 	bic.w	r5, r5, #3
 8006b2a:	3508      	adds	r5, #8
 8006b2c:	2d0c      	cmp	r5, #12
 8006b2e:	bf38      	it	cc
 8006b30:	250c      	movcc	r5, #12
 8006b32:	2d00      	cmp	r5, #0
 8006b34:	4606      	mov	r6, r0
 8006b36:	db01      	blt.n	8006b3c <_malloc_r+0x1c>
 8006b38:	42a9      	cmp	r1, r5
 8006b3a:	d904      	bls.n	8006b46 <_malloc_r+0x26>
 8006b3c:	230c      	movs	r3, #12
 8006b3e:	6033      	str	r3, [r6, #0]
 8006b40:	2000      	movs	r0, #0
 8006b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c1c <_malloc_r+0xfc>
 8006b4a:	f000 f869 	bl	8006c20 <__malloc_lock>
 8006b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b52:	461c      	mov	r4, r3
 8006b54:	bb44      	cbnz	r4, 8006ba8 <_malloc_r+0x88>
 8006b56:	4629      	mov	r1, r5
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f7ff ffbf 	bl	8006adc <sbrk_aligned>
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	4604      	mov	r4, r0
 8006b62:	d158      	bne.n	8006c16 <_malloc_r+0xf6>
 8006b64:	f8d8 4000 	ldr.w	r4, [r8]
 8006b68:	4627      	mov	r7, r4
 8006b6a:	2f00      	cmp	r7, #0
 8006b6c:	d143      	bne.n	8006bf6 <_malloc_r+0xd6>
 8006b6e:	2c00      	cmp	r4, #0
 8006b70:	d04b      	beq.n	8006c0a <_malloc_r+0xea>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	4639      	mov	r1, r7
 8006b76:	4630      	mov	r0, r6
 8006b78:	eb04 0903 	add.w	r9, r4, r3
 8006b7c:	f000 fc68 	bl	8007450 <_sbrk_r>
 8006b80:	4581      	cmp	r9, r0
 8006b82:	d142      	bne.n	8006c0a <_malloc_r+0xea>
 8006b84:	6821      	ldr	r1, [r4, #0]
 8006b86:	4630      	mov	r0, r6
 8006b88:	1a6d      	subs	r5, r5, r1
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	f7ff ffa6 	bl	8006adc <sbrk_aligned>
 8006b90:	3001      	adds	r0, #1
 8006b92:	d03a      	beq.n	8006c0a <_malloc_r+0xea>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	442b      	add	r3, r5
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	bb62      	cbnz	r2, 8006bfc <_malloc_r+0xdc>
 8006ba2:	f8c8 7000 	str.w	r7, [r8]
 8006ba6:	e00f      	b.n	8006bc8 <_malloc_r+0xa8>
 8006ba8:	6822      	ldr	r2, [r4, #0]
 8006baa:	1b52      	subs	r2, r2, r5
 8006bac:	d420      	bmi.n	8006bf0 <_malloc_r+0xd0>
 8006bae:	2a0b      	cmp	r2, #11
 8006bb0:	d917      	bls.n	8006be2 <_malloc_r+0xc2>
 8006bb2:	1961      	adds	r1, r4, r5
 8006bb4:	42a3      	cmp	r3, r4
 8006bb6:	6025      	str	r5, [r4, #0]
 8006bb8:	bf18      	it	ne
 8006bba:	6059      	strne	r1, [r3, #4]
 8006bbc:	6863      	ldr	r3, [r4, #4]
 8006bbe:	bf08      	it	eq
 8006bc0:	f8c8 1000 	streq.w	r1, [r8]
 8006bc4:	5162      	str	r2, [r4, r5]
 8006bc6:	604b      	str	r3, [r1, #4]
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f000 f82f 	bl	8006c2c <__malloc_unlock>
 8006bce:	f104 000b 	add.w	r0, r4, #11
 8006bd2:	1d23      	adds	r3, r4, #4
 8006bd4:	f020 0007 	bic.w	r0, r0, #7
 8006bd8:	1ac2      	subs	r2, r0, r3
 8006bda:	bf1c      	itt	ne
 8006bdc:	1a1b      	subne	r3, r3, r0
 8006bde:	50a3      	strne	r3, [r4, r2]
 8006be0:	e7af      	b.n	8006b42 <_malloc_r+0x22>
 8006be2:	6862      	ldr	r2, [r4, #4]
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	bf0c      	ite	eq
 8006be8:	f8c8 2000 	streq.w	r2, [r8]
 8006bec:	605a      	strne	r2, [r3, #4]
 8006bee:	e7eb      	b.n	8006bc8 <_malloc_r+0xa8>
 8006bf0:	4623      	mov	r3, r4
 8006bf2:	6864      	ldr	r4, [r4, #4]
 8006bf4:	e7ae      	b.n	8006b54 <_malloc_r+0x34>
 8006bf6:	463c      	mov	r4, r7
 8006bf8:	687f      	ldr	r7, [r7, #4]
 8006bfa:	e7b6      	b.n	8006b6a <_malloc_r+0x4a>
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	d1fb      	bne.n	8006bfc <_malloc_r+0xdc>
 8006c04:	2300      	movs	r3, #0
 8006c06:	6053      	str	r3, [r2, #4]
 8006c08:	e7de      	b.n	8006bc8 <_malloc_r+0xa8>
 8006c0a:	230c      	movs	r3, #12
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	6033      	str	r3, [r6, #0]
 8006c10:	f000 f80c 	bl	8006c2c <__malloc_unlock>
 8006c14:	e794      	b.n	8006b40 <_malloc_r+0x20>
 8006c16:	6005      	str	r5, [r0, #0]
 8006c18:	e7d6      	b.n	8006bc8 <_malloc_r+0xa8>
 8006c1a:	bf00      	nop
 8006c1c:	20002684 	.word	0x20002684

08006c20 <__malloc_lock>:
 8006c20:	4801      	ldr	r0, [pc, #4]	@ (8006c28 <__malloc_lock+0x8>)
 8006c22:	f7ff bf02 	b.w	8006a2a <__retarget_lock_acquire_recursive>
 8006c26:	bf00      	nop
 8006c28:	2000267c 	.word	0x2000267c

08006c2c <__malloc_unlock>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	@ (8006c34 <__malloc_unlock+0x8>)
 8006c2e:	f7ff befd 	b.w	8006a2c <__retarget_lock_release_recursive>
 8006c32:	bf00      	nop
 8006c34:	2000267c 	.word	0x2000267c

08006c38 <__sfputc_r>:
 8006c38:	6893      	ldr	r3, [r2, #8]
 8006c3a:	b410      	push	{r4}
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	6093      	str	r3, [r2, #8]
 8006c42:	da07      	bge.n	8006c54 <__sfputc_r+0x1c>
 8006c44:	6994      	ldr	r4, [r2, #24]
 8006c46:	42a3      	cmp	r3, r4
 8006c48:	db01      	blt.n	8006c4e <__sfputc_r+0x16>
 8006c4a:	290a      	cmp	r1, #10
 8006c4c:	d102      	bne.n	8006c54 <__sfputc_r+0x1c>
 8006c4e:	bc10      	pop	{r4}
 8006c50:	f000 bb6a 	b.w	8007328 <__swbuf_r>
 8006c54:	6813      	ldr	r3, [r2, #0]
 8006c56:	1c58      	adds	r0, r3, #1
 8006c58:	6010      	str	r0, [r2, #0]
 8006c5a:	7019      	strb	r1, [r3, #0]
 8006c5c:	4608      	mov	r0, r1
 8006c5e:	bc10      	pop	{r4}
 8006c60:	4770      	bx	lr

08006c62 <__sfputs_r>:
 8006c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c64:	4606      	mov	r6, r0
 8006c66:	460f      	mov	r7, r1
 8006c68:	4614      	mov	r4, r2
 8006c6a:	18d5      	adds	r5, r2, r3
 8006c6c:	42ac      	cmp	r4, r5
 8006c6e:	d101      	bne.n	8006c74 <__sfputs_r+0x12>
 8006c70:	2000      	movs	r0, #0
 8006c72:	e007      	b.n	8006c84 <__sfputs_r+0x22>
 8006c74:	463a      	mov	r2, r7
 8006c76:	4630      	mov	r0, r6
 8006c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c7c:	f7ff ffdc 	bl	8006c38 <__sfputc_r>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d1f3      	bne.n	8006c6c <__sfputs_r+0xa>
 8006c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c88 <_vfiprintf_r>:
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8c:	460d      	mov	r5, r1
 8006c8e:	4614      	mov	r4, r2
 8006c90:	4698      	mov	r8, r3
 8006c92:	4606      	mov	r6, r0
 8006c94:	b09d      	sub	sp, #116	@ 0x74
 8006c96:	b118      	cbz	r0, 8006ca0 <_vfiprintf_r+0x18>
 8006c98:	6a03      	ldr	r3, [r0, #32]
 8006c9a:	b90b      	cbnz	r3, 8006ca0 <_vfiprintf_r+0x18>
 8006c9c:	f7ff fdb2 	bl	8006804 <__sinit>
 8006ca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ca2:	07d9      	lsls	r1, r3, #31
 8006ca4:	d405      	bmi.n	8006cb2 <_vfiprintf_r+0x2a>
 8006ca6:	89ab      	ldrh	r3, [r5, #12]
 8006ca8:	059a      	lsls	r2, r3, #22
 8006caa:	d402      	bmi.n	8006cb2 <_vfiprintf_r+0x2a>
 8006cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cae:	f7ff febc 	bl	8006a2a <__retarget_lock_acquire_recursive>
 8006cb2:	89ab      	ldrh	r3, [r5, #12]
 8006cb4:	071b      	lsls	r3, r3, #28
 8006cb6:	d501      	bpl.n	8006cbc <_vfiprintf_r+0x34>
 8006cb8:	692b      	ldr	r3, [r5, #16]
 8006cba:	b99b      	cbnz	r3, 8006ce4 <_vfiprintf_r+0x5c>
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f000 fb70 	bl	80073a4 <__swsetup_r>
 8006cc4:	b170      	cbz	r0, 8006ce4 <_vfiprintf_r+0x5c>
 8006cc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cc8:	07dc      	lsls	r4, r3, #31
 8006cca:	d504      	bpl.n	8006cd6 <_vfiprintf_r+0x4e>
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	b01d      	add	sp, #116	@ 0x74
 8006cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd6:	89ab      	ldrh	r3, [r5, #12]
 8006cd8:	0598      	lsls	r0, r3, #22
 8006cda:	d4f7      	bmi.n	8006ccc <_vfiprintf_r+0x44>
 8006cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cde:	f7ff fea5 	bl	8006a2c <__retarget_lock_release_recursive>
 8006ce2:	e7f3      	b.n	8006ccc <_vfiprintf_r+0x44>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ce8:	2320      	movs	r3, #32
 8006cea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cee:	2330      	movs	r3, #48	@ 0x30
 8006cf0:	f04f 0901 	mov.w	r9, #1
 8006cf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cf8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006ea4 <_vfiprintf_r+0x21c>
 8006cfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d00:	4623      	mov	r3, r4
 8006d02:	469a      	mov	sl, r3
 8006d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d08:	b10a      	cbz	r2, 8006d0e <_vfiprintf_r+0x86>
 8006d0a:	2a25      	cmp	r2, #37	@ 0x25
 8006d0c:	d1f9      	bne.n	8006d02 <_vfiprintf_r+0x7a>
 8006d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d12:	d00b      	beq.n	8006d2c <_vfiprintf_r+0xa4>
 8006d14:	465b      	mov	r3, fp
 8006d16:	4622      	mov	r2, r4
 8006d18:	4629      	mov	r1, r5
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f7ff ffa1 	bl	8006c62 <__sfputs_r>
 8006d20:	3001      	adds	r0, #1
 8006d22:	f000 80a7 	beq.w	8006e74 <_vfiprintf_r+0x1ec>
 8006d26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d28:	445a      	add	r2, fp
 8006d2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 809f 	beq.w	8006e74 <_vfiprintf_r+0x1ec>
 8006d36:	2300      	movs	r3, #0
 8006d38:	f04f 32ff 	mov.w	r2, #4294967295
 8006d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d40:	f10a 0a01 	add.w	sl, sl, #1
 8006d44:	9304      	str	r3, [sp, #16]
 8006d46:	9307      	str	r3, [sp, #28]
 8006d48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d4e:	4654      	mov	r4, sl
 8006d50:	2205      	movs	r2, #5
 8006d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d56:	4853      	ldr	r0, [pc, #332]	@ (8006ea4 <_vfiprintf_r+0x21c>)
 8006d58:	f000 fb8a 	bl	8007470 <memchr>
 8006d5c:	9a04      	ldr	r2, [sp, #16]
 8006d5e:	b9d8      	cbnz	r0, 8006d98 <_vfiprintf_r+0x110>
 8006d60:	06d1      	lsls	r1, r2, #27
 8006d62:	bf44      	itt	mi
 8006d64:	2320      	movmi	r3, #32
 8006d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d6a:	0713      	lsls	r3, r2, #28
 8006d6c:	bf44      	itt	mi
 8006d6e:	232b      	movmi	r3, #43	@ 0x2b
 8006d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d74:	f89a 3000 	ldrb.w	r3, [sl]
 8006d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d7a:	d015      	beq.n	8006da8 <_vfiprintf_r+0x120>
 8006d7c:	4654      	mov	r4, sl
 8006d7e:	2000      	movs	r0, #0
 8006d80:	f04f 0c0a 	mov.w	ip, #10
 8006d84:	9a07      	ldr	r2, [sp, #28]
 8006d86:	4621      	mov	r1, r4
 8006d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d8c:	3b30      	subs	r3, #48	@ 0x30
 8006d8e:	2b09      	cmp	r3, #9
 8006d90:	d94b      	bls.n	8006e2a <_vfiprintf_r+0x1a2>
 8006d92:	b1b0      	cbz	r0, 8006dc2 <_vfiprintf_r+0x13a>
 8006d94:	9207      	str	r2, [sp, #28]
 8006d96:	e014      	b.n	8006dc2 <_vfiprintf_r+0x13a>
 8006d98:	eba0 0308 	sub.w	r3, r0, r8
 8006d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8006da0:	4313      	orrs	r3, r2
 8006da2:	46a2      	mov	sl, r4
 8006da4:	9304      	str	r3, [sp, #16]
 8006da6:	e7d2      	b.n	8006d4e <_vfiprintf_r+0xc6>
 8006da8:	9b03      	ldr	r3, [sp, #12]
 8006daa:	1d19      	adds	r1, r3, #4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	9103      	str	r1, [sp, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bfbb      	ittet	lt
 8006db4:	425b      	neglt	r3, r3
 8006db6:	f042 0202 	orrlt.w	r2, r2, #2
 8006dba:	9307      	strge	r3, [sp, #28]
 8006dbc:	9307      	strlt	r3, [sp, #28]
 8006dbe:	bfb8      	it	lt
 8006dc0:	9204      	strlt	r2, [sp, #16]
 8006dc2:	7823      	ldrb	r3, [r4, #0]
 8006dc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dc6:	d10a      	bne.n	8006dde <_vfiprintf_r+0x156>
 8006dc8:	7863      	ldrb	r3, [r4, #1]
 8006dca:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dcc:	d132      	bne.n	8006e34 <_vfiprintf_r+0x1ac>
 8006dce:	9b03      	ldr	r3, [sp, #12]
 8006dd0:	3402      	adds	r4, #2
 8006dd2:	1d1a      	adds	r2, r3, #4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	9203      	str	r2, [sp, #12]
 8006dd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ddc:	9305      	str	r3, [sp, #20]
 8006dde:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006ea8 <_vfiprintf_r+0x220>
 8006de2:	2203      	movs	r2, #3
 8006de4:	4650      	mov	r0, sl
 8006de6:	7821      	ldrb	r1, [r4, #0]
 8006de8:	f000 fb42 	bl	8007470 <memchr>
 8006dec:	b138      	cbz	r0, 8006dfe <_vfiprintf_r+0x176>
 8006dee:	2240      	movs	r2, #64	@ 0x40
 8006df0:	9b04      	ldr	r3, [sp, #16]
 8006df2:	eba0 000a 	sub.w	r0, r0, sl
 8006df6:	4082      	lsls	r2, r0
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	3401      	adds	r4, #1
 8006dfc:	9304      	str	r3, [sp, #16]
 8006dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e02:	2206      	movs	r2, #6
 8006e04:	4829      	ldr	r0, [pc, #164]	@ (8006eac <_vfiprintf_r+0x224>)
 8006e06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e0a:	f000 fb31 	bl	8007470 <memchr>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d03f      	beq.n	8006e92 <_vfiprintf_r+0x20a>
 8006e12:	4b27      	ldr	r3, [pc, #156]	@ (8006eb0 <_vfiprintf_r+0x228>)
 8006e14:	bb1b      	cbnz	r3, 8006e5e <_vfiprintf_r+0x1d6>
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	3307      	adds	r3, #7
 8006e1a:	f023 0307 	bic.w	r3, r3, #7
 8006e1e:	3308      	adds	r3, #8
 8006e20:	9303      	str	r3, [sp, #12]
 8006e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e24:	443b      	add	r3, r7
 8006e26:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e28:	e76a      	b.n	8006d00 <_vfiprintf_r+0x78>
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e32:	e7a8      	b.n	8006d86 <_vfiprintf_r+0xfe>
 8006e34:	2300      	movs	r3, #0
 8006e36:	f04f 0c0a 	mov.w	ip, #10
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	3401      	adds	r4, #1
 8006e3e:	9305      	str	r3, [sp, #20]
 8006e40:	4620      	mov	r0, r4
 8006e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e46:	3a30      	subs	r2, #48	@ 0x30
 8006e48:	2a09      	cmp	r2, #9
 8006e4a:	d903      	bls.n	8006e54 <_vfiprintf_r+0x1cc>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0c6      	beq.n	8006dde <_vfiprintf_r+0x156>
 8006e50:	9105      	str	r1, [sp, #20]
 8006e52:	e7c4      	b.n	8006dde <_vfiprintf_r+0x156>
 8006e54:	4604      	mov	r4, r0
 8006e56:	2301      	movs	r3, #1
 8006e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e5c:	e7f0      	b.n	8006e40 <_vfiprintf_r+0x1b8>
 8006e5e:	ab03      	add	r3, sp, #12
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	462a      	mov	r2, r5
 8006e64:	4630      	mov	r0, r6
 8006e66:	4b13      	ldr	r3, [pc, #76]	@ (8006eb4 <_vfiprintf_r+0x22c>)
 8006e68:	a904      	add	r1, sp, #16
 8006e6a:	f3af 8000 	nop.w
 8006e6e:	4607      	mov	r7, r0
 8006e70:	1c78      	adds	r0, r7, #1
 8006e72:	d1d6      	bne.n	8006e22 <_vfiprintf_r+0x19a>
 8006e74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e76:	07d9      	lsls	r1, r3, #31
 8006e78:	d405      	bmi.n	8006e86 <_vfiprintf_r+0x1fe>
 8006e7a:	89ab      	ldrh	r3, [r5, #12]
 8006e7c:	059a      	lsls	r2, r3, #22
 8006e7e:	d402      	bmi.n	8006e86 <_vfiprintf_r+0x1fe>
 8006e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e82:	f7ff fdd3 	bl	8006a2c <__retarget_lock_release_recursive>
 8006e86:	89ab      	ldrh	r3, [r5, #12]
 8006e88:	065b      	lsls	r3, r3, #25
 8006e8a:	f53f af1f 	bmi.w	8006ccc <_vfiprintf_r+0x44>
 8006e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e90:	e71e      	b.n	8006cd0 <_vfiprintf_r+0x48>
 8006e92:	ab03      	add	r3, sp, #12
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	462a      	mov	r2, r5
 8006e98:	4630      	mov	r0, r6
 8006e9a:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <_vfiprintf_r+0x22c>)
 8006e9c:	a904      	add	r1, sp, #16
 8006e9e:	f000 f87d 	bl	8006f9c <_printf_i>
 8006ea2:	e7e4      	b.n	8006e6e <_vfiprintf_r+0x1e6>
 8006ea4:	08007c70 	.word	0x08007c70
 8006ea8:	08007c76 	.word	0x08007c76
 8006eac:	08007c7a 	.word	0x08007c7a
 8006eb0:	00000000 	.word	0x00000000
 8006eb4:	08006c63 	.word	0x08006c63

08006eb8 <_printf_common>:
 8006eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	4698      	mov	r8, r3
 8006ec0:	688a      	ldr	r2, [r1, #8]
 8006ec2:	690b      	ldr	r3, [r1, #16]
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	bfb8      	it	lt
 8006eca:	4613      	movlt	r3, r2
 8006ecc:	6033      	str	r3, [r6, #0]
 8006ece:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ed8:	b10a      	cbz	r2, 8006ede <_printf_common+0x26>
 8006eda:	3301      	adds	r3, #1
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	0699      	lsls	r1, r3, #26
 8006ee2:	bf42      	ittt	mi
 8006ee4:	6833      	ldrmi	r3, [r6, #0]
 8006ee6:	3302      	addmi	r3, #2
 8006ee8:	6033      	strmi	r3, [r6, #0]
 8006eea:	6825      	ldr	r5, [r4, #0]
 8006eec:	f015 0506 	ands.w	r5, r5, #6
 8006ef0:	d106      	bne.n	8006f00 <_printf_common+0x48>
 8006ef2:	f104 0a19 	add.w	sl, r4, #25
 8006ef6:	68e3      	ldr	r3, [r4, #12]
 8006ef8:	6832      	ldr	r2, [r6, #0]
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	42ab      	cmp	r3, r5
 8006efe:	dc2b      	bgt.n	8006f58 <_printf_common+0xa0>
 8006f00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	3b00      	subs	r3, #0
 8006f08:	bf18      	it	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	0692      	lsls	r2, r2, #26
 8006f0e:	d430      	bmi.n	8006f72 <_printf_common+0xba>
 8006f10:	4641      	mov	r1, r8
 8006f12:	4638      	mov	r0, r7
 8006f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f18:	47c8      	blx	r9
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d023      	beq.n	8006f66 <_printf_common+0xae>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	6922      	ldr	r2, [r4, #16]
 8006f22:	f003 0306 	and.w	r3, r3, #6
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	bf14      	ite	ne
 8006f2a:	2500      	movne	r5, #0
 8006f2c:	6833      	ldreq	r3, [r6, #0]
 8006f2e:	f04f 0600 	mov.w	r6, #0
 8006f32:	bf08      	it	eq
 8006f34:	68e5      	ldreq	r5, [r4, #12]
 8006f36:	f104 041a 	add.w	r4, r4, #26
 8006f3a:	bf08      	it	eq
 8006f3c:	1aed      	subeq	r5, r5, r3
 8006f3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006f42:	bf08      	it	eq
 8006f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	bfc4      	itt	gt
 8006f4c:	1a9b      	subgt	r3, r3, r2
 8006f4e:	18ed      	addgt	r5, r5, r3
 8006f50:	42b5      	cmp	r5, r6
 8006f52:	d11a      	bne.n	8006f8a <_printf_common+0xd2>
 8006f54:	2000      	movs	r0, #0
 8006f56:	e008      	b.n	8006f6a <_printf_common+0xb2>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	4638      	mov	r0, r7
 8006f60:	47c8      	blx	r9
 8006f62:	3001      	adds	r0, #1
 8006f64:	d103      	bne.n	8006f6e <_printf_common+0xb6>
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6e:	3501      	adds	r5, #1
 8006f70:	e7c1      	b.n	8006ef6 <_printf_common+0x3e>
 8006f72:	2030      	movs	r0, #48	@ 0x30
 8006f74:	18e1      	adds	r1, r4, r3
 8006f76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f80:	4422      	add	r2, r4
 8006f82:	3302      	adds	r3, #2
 8006f84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f88:	e7c2      	b.n	8006f10 <_printf_common+0x58>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	4622      	mov	r2, r4
 8006f8e:	4641      	mov	r1, r8
 8006f90:	4638      	mov	r0, r7
 8006f92:	47c8      	blx	r9
 8006f94:	3001      	adds	r0, #1
 8006f96:	d0e6      	beq.n	8006f66 <_printf_common+0xae>
 8006f98:	3601      	adds	r6, #1
 8006f9a:	e7d9      	b.n	8006f50 <_printf_common+0x98>

08006f9c <_printf_i>:
 8006f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	7e0f      	ldrb	r7, [r1, #24]
 8006fa2:	4691      	mov	r9, r2
 8006fa4:	2f78      	cmp	r7, #120	@ 0x78
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	469a      	mov	sl, r3
 8006fac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fb2:	d807      	bhi.n	8006fc4 <_printf_i+0x28>
 8006fb4:	2f62      	cmp	r7, #98	@ 0x62
 8006fb6:	d80a      	bhi.n	8006fce <_printf_i+0x32>
 8006fb8:	2f00      	cmp	r7, #0
 8006fba:	f000 80d1 	beq.w	8007160 <_printf_i+0x1c4>
 8006fbe:	2f58      	cmp	r7, #88	@ 0x58
 8006fc0:	f000 80b8 	beq.w	8007134 <_printf_i+0x198>
 8006fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fcc:	e03a      	b.n	8007044 <_printf_i+0xa8>
 8006fce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fd2:	2b15      	cmp	r3, #21
 8006fd4:	d8f6      	bhi.n	8006fc4 <_printf_i+0x28>
 8006fd6:	a101      	add	r1, pc, #4	@ (adr r1, 8006fdc <_printf_i+0x40>)
 8006fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fdc:	08007035 	.word	0x08007035
 8006fe0:	08007049 	.word	0x08007049
 8006fe4:	08006fc5 	.word	0x08006fc5
 8006fe8:	08006fc5 	.word	0x08006fc5
 8006fec:	08006fc5 	.word	0x08006fc5
 8006ff0:	08006fc5 	.word	0x08006fc5
 8006ff4:	08007049 	.word	0x08007049
 8006ff8:	08006fc5 	.word	0x08006fc5
 8006ffc:	08006fc5 	.word	0x08006fc5
 8007000:	08006fc5 	.word	0x08006fc5
 8007004:	08006fc5 	.word	0x08006fc5
 8007008:	08007147 	.word	0x08007147
 800700c:	08007073 	.word	0x08007073
 8007010:	08007101 	.word	0x08007101
 8007014:	08006fc5 	.word	0x08006fc5
 8007018:	08006fc5 	.word	0x08006fc5
 800701c:	08007169 	.word	0x08007169
 8007020:	08006fc5 	.word	0x08006fc5
 8007024:	08007073 	.word	0x08007073
 8007028:	08006fc5 	.word	0x08006fc5
 800702c:	08006fc5 	.word	0x08006fc5
 8007030:	08007109 	.word	0x08007109
 8007034:	6833      	ldr	r3, [r6, #0]
 8007036:	1d1a      	adds	r2, r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6032      	str	r2, [r6, #0]
 800703c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007040:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007044:	2301      	movs	r3, #1
 8007046:	e09c      	b.n	8007182 <_printf_i+0x1e6>
 8007048:	6833      	ldr	r3, [r6, #0]
 800704a:	6820      	ldr	r0, [r4, #0]
 800704c:	1d19      	adds	r1, r3, #4
 800704e:	6031      	str	r1, [r6, #0]
 8007050:	0606      	lsls	r6, r0, #24
 8007052:	d501      	bpl.n	8007058 <_printf_i+0xbc>
 8007054:	681d      	ldr	r5, [r3, #0]
 8007056:	e003      	b.n	8007060 <_printf_i+0xc4>
 8007058:	0645      	lsls	r5, r0, #25
 800705a:	d5fb      	bpl.n	8007054 <_printf_i+0xb8>
 800705c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007060:	2d00      	cmp	r5, #0
 8007062:	da03      	bge.n	800706c <_printf_i+0xd0>
 8007064:	232d      	movs	r3, #45	@ 0x2d
 8007066:	426d      	negs	r5, r5
 8007068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800706c:	230a      	movs	r3, #10
 800706e:	4858      	ldr	r0, [pc, #352]	@ (80071d0 <_printf_i+0x234>)
 8007070:	e011      	b.n	8007096 <_printf_i+0xfa>
 8007072:	6821      	ldr	r1, [r4, #0]
 8007074:	6833      	ldr	r3, [r6, #0]
 8007076:	0608      	lsls	r0, r1, #24
 8007078:	f853 5b04 	ldr.w	r5, [r3], #4
 800707c:	d402      	bmi.n	8007084 <_printf_i+0xe8>
 800707e:	0649      	lsls	r1, r1, #25
 8007080:	bf48      	it	mi
 8007082:	b2ad      	uxthmi	r5, r5
 8007084:	2f6f      	cmp	r7, #111	@ 0x6f
 8007086:	6033      	str	r3, [r6, #0]
 8007088:	bf14      	ite	ne
 800708a:	230a      	movne	r3, #10
 800708c:	2308      	moveq	r3, #8
 800708e:	4850      	ldr	r0, [pc, #320]	@ (80071d0 <_printf_i+0x234>)
 8007090:	2100      	movs	r1, #0
 8007092:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007096:	6866      	ldr	r6, [r4, #4]
 8007098:	2e00      	cmp	r6, #0
 800709a:	60a6      	str	r6, [r4, #8]
 800709c:	db05      	blt.n	80070aa <_printf_i+0x10e>
 800709e:	6821      	ldr	r1, [r4, #0]
 80070a0:	432e      	orrs	r6, r5
 80070a2:	f021 0104 	bic.w	r1, r1, #4
 80070a6:	6021      	str	r1, [r4, #0]
 80070a8:	d04b      	beq.n	8007142 <_printf_i+0x1a6>
 80070aa:	4616      	mov	r6, r2
 80070ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80070b0:	fb03 5711 	mls	r7, r3, r1, r5
 80070b4:	5dc7      	ldrb	r7, [r0, r7]
 80070b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070ba:	462f      	mov	r7, r5
 80070bc:	42bb      	cmp	r3, r7
 80070be:	460d      	mov	r5, r1
 80070c0:	d9f4      	bls.n	80070ac <_printf_i+0x110>
 80070c2:	2b08      	cmp	r3, #8
 80070c4:	d10b      	bne.n	80070de <_printf_i+0x142>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	07df      	lsls	r7, r3, #31
 80070ca:	d508      	bpl.n	80070de <_printf_i+0x142>
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	6861      	ldr	r1, [r4, #4]
 80070d0:	4299      	cmp	r1, r3
 80070d2:	bfde      	ittt	le
 80070d4:	2330      	movle	r3, #48	@ 0x30
 80070d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070de:	1b92      	subs	r2, r2, r6
 80070e0:	6122      	str	r2, [r4, #16]
 80070e2:	464b      	mov	r3, r9
 80070e4:	4621      	mov	r1, r4
 80070e6:	4640      	mov	r0, r8
 80070e8:	f8cd a000 	str.w	sl, [sp]
 80070ec:	aa03      	add	r2, sp, #12
 80070ee:	f7ff fee3 	bl	8006eb8 <_printf_common>
 80070f2:	3001      	adds	r0, #1
 80070f4:	d14a      	bne.n	800718c <_printf_i+0x1f0>
 80070f6:	f04f 30ff 	mov.w	r0, #4294967295
 80070fa:	b004      	add	sp, #16
 80070fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	f043 0320 	orr.w	r3, r3, #32
 8007106:	6023      	str	r3, [r4, #0]
 8007108:	2778      	movs	r7, #120	@ 0x78
 800710a:	4832      	ldr	r0, [pc, #200]	@ (80071d4 <_printf_i+0x238>)
 800710c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	6831      	ldr	r1, [r6, #0]
 8007114:	061f      	lsls	r7, r3, #24
 8007116:	f851 5b04 	ldr.w	r5, [r1], #4
 800711a:	d402      	bmi.n	8007122 <_printf_i+0x186>
 800711c:	065f      	lsls	r7, r3, #25
 800711e:	bf48      	it	mi
 8007120:	b2ad      	uxthmi	r5, r5
 8007122:	6031      	str	r1, [r6, #0]
 8007124:	07d9      	lsls	r1, r3, #31
 8007126:	bf44      	itt	mi
 8007128:	f043 0320 	orrmi.w	r3, r3, #32
 800712c:	6023      	strmi	r3, [r4, #0]
 800712e:	b11d      	cbz	r5, 8007138 <_printf_i+0x19c>
 8007130:	2310      	movs	r3, #16
 8007132:	e7ad      	b.n	8007090 <_printf_i+0xf4>
 8007134:	4826      	ldr	r0, [pc, #152]	@ (80071d0 <_printf_i+0x234>)
 8007136:	e7e9      	b.n	800710c <_printf_i+0x170>
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	f023 0320 	bic.w	r3, r3, #32
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	e7f6      	b.n	8007130 <_printf_i+0x194>
 8007142:	4616      	mov	r6, r2
 8007144:	e7bd      	b.n	80070c2 <_printf_i+0x126>
 8007146:	6833      	ldr	r3, [r6, #0]
 8007148:	6825      	ldr	r5, [r4, #0]
 800714a:	1d18      	adds	r0, r3, #4
 800714c:	6961      	ldr	r1, [r4, #20]
 800714e:	6030      	str	r0, [r6, #0]
 8007150:	062e      	lsls	r6, r5, #24
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	d501      	bpl.n	800715a <_printf_i+0x1be>
 8007156:	6019      	str	r1, [r3, #0]
 8007158:	e002      	b.n	8007160 <_printf_i+0x1c4>
 800715a:	0668      	lsls	r0, r5, #25
 800715c:	d5fb      	bpl.n	8007156 <_printf_i+0x1ba>
 800715e:	8019      	strh	r1, [r3, #0]
 8007160:	2300      	movs	r3, #0
 8007162:	4616      	mov	r6, r2
 8007164:	6123      	str	r3, [r4, #16]
 8007166:	e7bc      	b.n	80070e2 <_printf_i+0x146>
 8007168:	6833      	ldr	r3, [r6, #0]
 800716a:	2100      	movs	r1, #0
 800716c:	1d1a      	adds	r2, r3, #4
 800716e:	6032      	str	r2, [r6, #0]
 8007170:	681e      	ldr	r6, [r3, #0]
 8007172:	6862      	ldr	r2, [r4, #4]
 8007174:	4630      	mov	r0, r6
 8007176:	f000 f97b 	bl	8007470 <memchr>
 800717a:	b108      	cbz	r0, 8007180 <_printf_i+0x1e4>
 800717c:	1b80      	subs	r0, r0, r6
 800717e:	6060      	str	r0, [r4, #4]
 8007180:	6863      	ldr	r3, [r4, #4]
 8007182:	6123      	str	r3, [r4, #16]
 8007184:	2300      	movs	r3, #0
 8007186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800718a:	e7aa      	b.n	80070e2 <_printf_i+0x146>
 800718c:	4632      	mov	r2, r6
 800718e:	4649      	mov	r1, r9
 8007190:	4640      	mov	r0, r8
 8007192:	6923      	ldr	r3, [r4, #16]
 8007194:	47d0      	blx	sl
 8007196:	3001      	adds	r0, #1
 8007198:	d0ad      	beq.n	80070f6 <_printf_i+0x15a>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	079b      	lsls	r3, r3, #30
 800719e:	d413      	bmi.n	80071c8 <_printf_i+0x22c>
 80071a0:	68e0      	ldr	r0, [r4, #12]
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	4298      	cmp	r0, r3
 80071a6:	bfb8      	it	lt
 80071a8:	4618      	movlt	r0, r3
 80071aa:	e7a6      	b.n	80070fa <_printf_i+0x15e>
 80071ac:	2301      	movs	r3, #1
 80071ae:	4632      	mov	r2, r6
 80071b0:	4649      	mov	r1, r9
 80071b2:	4640      	mov	r0, r8
 80071b4:	47d0      	blx	sl
 80071b6:	3001      	adds	r0, #1
 80071b8:	d09d      	beq.n	80070f6 <_printf_i+0x15a>
 80071ba:	3501      	adds	r5, #1
 80071bc:	68e3      	ldr	r3, [r4, #12]
 80071be:	9903      	ldr	r1, [sp, #12]
 80071c0:	1a5b      	subs	r3, r3, r1
 80071c2:	42ab      	cmp	r3, r5
 80071c4:	dcf2      	bgt.n	80071ac <_printf_i+0x210>
 80071c6:	e7eb      	b.n	80071a0 <_printf_i+0x204>
 80071c8:	2500      	movs	r5, #0
 80071ca:	f104 0619 	add.w	r6, r4, #25
 80071ce:	e7f5      	b.n	80071bc <_printf_i+0x220>
 80071d0:	08007c81 	.word	0x08007c81
 80071d4:	08007c92 	.word	0x08007c92

080071d8 <__sflush_r>:
 80071d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	0716      	lsls	r6, r2, #28
 80071e0:	4605      	mov	r5, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	d454      	bmi.n	8007290 <__sflush_r+0xb8>
 80071e6:	684b      	ldr	r3, [r1, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	dc02      	bgt.n	80071f2 <__sflush_r+0x1a>
 80071ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	dd48      	ble.n	8007284 <__sflush_r+0xac>
 80071f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071f4:	2e00      	cmp	r6, #0
 80071f6:	d045      	beq.n	8007284 <__sflush_r+0xac>
 80071f8:	2300      	movs	r3, #0
 80071fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80071fe:	682f      	ldr	r7, [r5, #0]
 8007200:	6a21      	ldr	r1, [r4, #32]
 8007202:	602b      	str	r3, [r5, #0]
 8007204:	d030      	beq.n	8007268 <__sflush_r+0x90>
 8007206:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	0759      	lsls	r1, r3, #29
 800720c:	d505      	bpl.n	800721a <__sflush_r+0x42>
 800720e:	6863      	ldr	r3, [r4, #4]
 8007210:	1ad2      	subs	r2, r2, r3
 8007212:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007214:	b10b      	cbz	r3, 800721a <__sflush_r+0x42>
 8007216:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007218:	1ad2      	subs	r2, r2, r3
 800721a:	2300      	movs	r3, #0
 800721c:	4628      	mov	r0, r5
 800721e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007220:	6a21      	ldr	r1, [r4, #32]
 8007222:	47b0      	blx	r6
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	d106      	bne.n	8007238 <__sflush_r+0x60>
 800722a:	6829      	ldr	r1, [r5, #0]
 800722c:	291d      	cmp	r1, #29
 800722e:	d82b      	bhi.n	8007288 <__sflush_r+0xb0>
 8007230:	4a28      	ldr	r2, [pc, #160]	@ (80072d4 <__sflush_r+0xfc>)
 8007232:	40ca      	lsrs	r2, r1
 8007234:	07d6      	lsls	r6, r2, #31
 8007236:	d527      	bpl.n	8007288 <__sflush_r+0xb0>
 8007238:	2200      	movs	r2, #0
 800723a:	6062      	str	r2, [r4, #4]
 800723c:	6922      	ldr	r2, [r4, #16]
 800723e:	04d9      	lsls	r1, r3, #19
 8007240:	6022      	str	r2, [r4, #0]
 8007242:	d504      	bpl.n	800724e <__sflush_r+0x76>
 8007244:	1c42      	adds	r2, r0, #1
 8007246:	d101      	bne.n	800724c <__sflush_r+0x74>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	b903      	cbnz	r3, 800724e <__sflush_r+0x76>
 800724c:	6560      	str	r0, [r4, #84]	@ 0x54
 800724e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007250:	602f      	str	r7, [r5, #0]
 8007252:	b1b9      	cbz	r1, 8007284 <__sflush_r+0xac>
 8007254:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007258:	4299      	cmp	r1, r3
 800725a:	d002      	beq.n	8007262 <__sflush_r+0x8a>
 800725c:	4628      	mov	r0, r5
 800725e:	f7ff fbf5 	bl	8006a4c <_free_r>
 8007262:	2300      	movs	r3, #0
 8007264:	6363      	str	r3, [r4, #52]	@ 0x34
 8007266:	e00d      	b.n	8007284 <__sflush_r+0xac>
 8007268:	2301      	movs	r3, #1
 800726a:	4628      	mov	r0, r5
 800726c:	47b0      	blx	r6
 800726e:	4602      	mov	r2, r0
 8007270:	1c50      	adds	r0, r2, #1
 8007272:	d1c9      	bne.n	8007208 <__sflush_r+0x30>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0c6      	beq.n	8007208 <__sflush_r+0x30>
 800727a:	2b1d      	cmp	r3, #29
 800727c:	d001      	beq.n	8007282 <__sflush_r+0xaa>
 800727e:	2b16      	cmp	r3, #22
 8007280:	d11d      	bne.n	80072be <__sflush_r+0xe6>
 8007282:	602f      	str	r7, [r5, #0]
 8007284:	2000      	movs	r0, #0
 8007286:	e021      	b.n	80072cc <__sflush_r+0xf4>
 8007288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800728c:	b21b      	sxth	r3, r3
 800728e:	e01a      	b.n	80072c6 <__sflush_r+0xee>
 8007290:	690f      	ldr	r7, [r1, #16]
 8007292:	2f00      	cmp	r7, #0
 8007294:	d0f6      	beq.n	8007284 <__sflush_r+0xac>
 8007296:	0793      	lsls	r3, r2, #30
 8007298:	bf18      	it	ne
 800729a:	2300      	movne	r3, #0
 800729c:	680e      	ldr	r6, [r1, #0]
 800729e:	bf08      	it	eq
 80072a0:	694b      	ldreq	r3, [r1, #20]
 80072a2:	1bf6      	subs	r6, r6, r7
 80072a4:	600f      	str	r7, [r1, #0]
 80072a6:	608b      	str	r3, [r1, #8]
 80072a8:	2e00      	cmp	r6, #0
 80072aa:	ddeb      	ble.n	8007284 <__sflush_r+0xac>
 80072ac:	4633      	mov	r3, r6
 80072ae:	463a      	mov	r2, r7
 80072b0:	4628      	mov	r0, r5
 80072b2:	6a21      	ldr	r1, [r4, #32]
 80072b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80072b8:	47e0      	blx	ip
 80072ba:	2800      	cmp	r0, #0
 80072bc:	dc07      	bgt.n	80072ce <__sflush_r+0xf6>
 80072be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072c6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ca:	81a3      	strh	r3, [r4, #12]
 80072cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ce:	4407      	add	r7, r0
 80072d0:	1a36      	subs	r6, r6, r0
 80072d2:	e7e9      	b.n	80072a8 <__sflush_r+0xd0>
 80072d4:	20400001 	.word	0x20400001

080072d8 <_fflush_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	690b      	ldr	r3, [r1, #16]
 80072dc:	4605      	mov	r5, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	b913      	cbnz	r3, 80072e8 <_fflush_r+0x10>
 80072e2:	2500      	movs	r5, #0
 80072e4:	4628      	mov	r0, r5
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	b118      	cbz	r0, 80072f2 <_fflush_r+0x1a>
 80072ea:	6a03      	ldr	r3, [r0, #32]
 80072ec:	b90b      	cbnz	r3, 80072f2 <_fflush_r+0x1a>
 80072ee:	f7ff fa89 	bl	8006804 <__sinit>
 80072f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0f3      	beq.n	80072e2 <_fflush_r+0xa>
 80072fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80072fc:	07d0      	lsls	r0, r2, #31
 80072fe:	d404      	bmi.n	800730a <_fflush_r+0x32>
 8007300:	0599      	lsls	r1, r3, #22
 8007302:	d402      	bmi.n	800730a <_fflush_r+0x32>
 8007304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007306:	f7ff fb90 	bl	8006a2a <__retarget_lock_acquire_recursive>
 800730a:	4628      	mov	r0, r5
 800730c:	4621      	mov	r1, r4
 800730e:	f7ff ff63 	bl	80071d8 <__sflush_r>
 8007312:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007314:	4605      	mov	r5, r0
 8007316:	07da      	lsls	r2, r3, #31
 8007318:	d4e4      	bmi.n	80072e4 <_fflush_r+0xc>
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	059b      	lsls	r3, r3, #22
 800731e:	d4e1      	bmi.n	80072e4 <_fflush_r+0xc>
 8007320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007322:	f7ff fb83 	bl	8006a2c <__retarget_lock_release_recursive>
 8007326:	e7dd      	b.n	80072e4 <_fflush_r+0xc>

08007328 <__swbuf_r>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	460e      	mov	r6, r1
 800732c:	4614      	mov	r4, r2
 800732e:	4605      	mov	r5, r0
 8007330:	b118      	cbz	r0, 800733a <__swbuf_r+0x12>
 8007332:	6a03      	ldr	r3, [r0, #32]
 8007334:	b90b      	cbnz	r3, 800733a <__swbuf_r+0x12>
 8007336:	f7ff fa65 	bl	8006804 <__sinit>
 800733a:	69a3      	ldr	r3, [r4, #24]
 800733c:	60a3      	str	r3, [r4, #8]
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	071a      	lsls	r2, r3, #28
 8007342:	d501      	bpl.n	8007348 <__swbuf_r+0x20>
 8007344:	6923      	ldr	r3, [r4, #16]
 8007346:	b943      	cbnz	r3, 800735a <__swbuf_r+0x32>
 8007348:	4621      	mov	r1, r4
 800734a:	4628      	mov	r0, r5
 800734c:	f000 f82a 	bl	80073a4 <__swsetup_r>
 8007350:	b118      	cbz	r0, 800735a <__swbuf_r+0x32>
 8007352:	f04f 37ff 	mov.w	r7, #4294967295
 8007356:	4638      	mov	r0, r7
 8007358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	6922      	ldr	r2, [r4, #16]
 800735e:	b2f6      	uxtb	r6, r6
 8007360:	1a98      	subs	r0, r3, r2
 8007362:	6963      	ldr	r3, [r4, #20]
 8007364:	4637      	mov	r7, r6
 8007366:	4283      	cmp	r3, r0
 8007368:	dc05      	bgt.n	8007376 <__swbuf_r+0x4e>
 800736a:	4621      	mov	r1, r4
 800736c:	4628      	mov	r0, r5
 800736e:	f7ff ffb3 	bl	80072d8 <_fflush_r>
 8007372:	2800      	cmp	r0, #0
 8007374:	d1ed      	bne.n	8007352 <__swbuf_r+0x2a>
 8007376:	68a3      	ldr	r3, [r4, #8]
 8007378:	3b01      	subs	r3, #1
 800737a:	60a3      	str	r3, [r4, #8]
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	6022      	str	r2, [r4, #0]
 8007382:	701e      	strb	r6, [r3, #0]
 8007384:	6962      	ldr	r2, [r4, #20]
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	429a      	cmp	r2, r3
 800738a:	d004      	beq.n	8007396 <__swbuf_r+0x6e>
 800738c:	89a3      	ldrh	r3, [r4, #12]
 800738e:	07db      	lsls	r3, r3, #31
 8007390:	d5e1      	bpl.n	8007356 <__swbuf_r+0x2e>
 8007392:	2e0a      	cmp	r6, #10
 8007394:	d1df      	bne.n	8007356 <__swbuf_r+0x2e>
 8007396:	4621      	mov	r1, r4
 8007398:	4628      	mov	r0, r5
 800739a:	f7ff ff9d 	bl	80072d8 <_fflush_r>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d0d9      	beq.n	8007356 <__swbuf_r+0x2e>
 80073a2:	e7d6      	b.n	8007352 <__swbuf_r+0x2a>

080073a4 <__swsetup_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4b29      	ldr	r3, [pc, #164]	@ (800744c <__swsetup_r+0xa8>)
 80073a8:	4605      	mov	r5, r0
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	460c      	mov	r4, r1
 80073ae:	b118      	cbz	r0, 80073b8 <__swsetup_r+0x14>
 80073b0:	6a03      	ldr	r3, [r0, #32]
 80073b2:	b90b      	cbnz	r3, 80073b8 <__swsetup_r+0x14>
 80073b4:	f7ff fa26 	bl	8006804 <__sinit>
 80073b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073bc:	0719      	lsls	r1, r3, #28
 80073be:	d422      	bmi.n	8007406 <__swsetup_r+0x62>
 80073c0:	06da      	lsls	r2, r3, #27
 80073c2:	d407      	bmi.n	80073d4 <__swsetup_r+0x30>
 80073c4:	2209      	movs	r2, #9
 80073c6:	602a      	str	r2, [r5, #0]
 80073c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073cc:	f04f 30ff 	mov.w	r0, #4294967295
 80073d0:	81a3      	strh	r3, [r4, #12]
 80073d2:	e033      	b.n	800743c <__swsetup_r+0x98>
 80073d4:	0758      	lsls	r0, r3, #29
 80073d6:	d512      	bpl.n	80073fe <__swsetup_r+0x5a>
 80073d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073da:	b141      	cbz	r1, 80073ee <__swsetup_r+0x4a>
 80073dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073e0:	4299      	cmp	r1, r3
 80073e2:	d002      	beq.n	80073ea <__swsetup_r+0x46>
 80073e4:	4628      	mov	r0, r5
 80073e6:	f7ff fb31 	bl	8006a4c <_free_r>
 80073ea:	2300      	movs	r3, #0
 80073ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	2300      	movs	r3, #0
 80073f8:	6063      	str	r3, [r4, #4]
 80073fa:	6923      	ldr	r3, [r4, #16]
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	f043 0308 	orr.w	r3, r3, #8
 8007404:	81a3      	strh	r3, [r4, #12]
 8007406:	6923      	ldr	r3, [r4, #16]
 8007408:	b94b      	cbnz	r3, 800741e <__swsetup_r+0x7a>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007414:	d003      	beq.n	800741e <__swsetup_r+0x7a>
 8007416:	4621      	mov	r1, r4
 8007418:	4628      	mov	r0, r5
 800741a:	f000 f85c 	bl	80074d6 <__smakebuf_r>
 800741e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007422:	f013 0201 	ands.w	r2, r3, #1
 8007426:	d00a      	beq.n	800743e <__swsetup_r+0x9a>
 8007428:	2200      	movs	r2, #0
 800742a:	60a2      	str	r2, [r4, #8]
 800742c:	6962      	ldr	r2, [r4, #20]
 800742e:	4252      	negs	r2, r2
 8007430:	61a2      	str	r2, [r4, #24]
 8007432:	6922      	ldr	r2, [r4, #16]
 8007434:	b942      	cbnz	r2, 8007448 <__swsetup_r+0xa4>
 8007436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800743a:	d1c5      	bne.n	80073c8 <__swsetup_r+0x24>
 800743c:	bd38      	pop	{r3, r4, r5, pc}
 800743e:	0799      	lsls	r1, r3, #30
 8007440:	bf58      	it	pl
 8007442:	6962      	ldrpl	r2, [r4, #20]
 8007444:	60a2      	str	r2, [r4, #8]
 8007446:	e7f4      	b.n	8007432 <__swsetup_r+0x8e>
 8007448:	2000      	movs	r0, #0
 800744a:	e7f7      	b.n	800743c <__swsetup_r+0x98>
 800744c:	20000020 	.word	0x20000020

08007450 <_sbrk_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	2300      	movs	r3, #0
 8007454:	4d05      	ldr	r5, [pc, #20]	@ (800746c <_sbrk_r+0x1c>)
 8007456:	4604      	mov	r4, r0
 8007458:	4608      	mov	r0, r1
 800745a:	602b      	str	r3, [r5, #0]
 800745c:	f7fa fac8 	bl	80019f0 <_sbrk>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	d102      	bne.n	800746a <_sbrk_r+0x1a>
 8007464:	682b      	ldr	r3, [r5, #0]
 8007466:	b103      	cbz	r3, 800746a <_sbrk_r+0x1a>
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	20002678 	.word	0x20002678

08007470 <memchr>:
 8007470:	4603      	mov	r3, r0
 8007472:	b510      	push	{r4, lr}
 8007474:	b2c9      	uxtb	r1, r1
 8007476:	4402      	add	r2, r0
 8007478:	4293      	cmp	r3, r2
 800747a:	4618      	mov	r0, r3
 800747c:	d101      	bne.n	8007482 <memchr+0x12>
 800747e:	2000      	movs	r0, #0
 8007480:	e003      	b.n	800748a <memchr+0x1a>
 8007482:	7804      	ldrb	r4, [r0, #0]
 8007484:	3301      	adds	r3, #1
 8007486:	428c      	cmp	r4, r1
 8007488:	d1f6      	bne.n	8007478 <memchr+0x8>
 800748a:	bd10      	pop	{r4, pc}

0800748c <__swhatbuf_r>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	460c      	mov	r4, r1
 8007490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007494:	4615      	mov	r5, r2
 8007496:	2900      	cmp	r1, #0
 8007498:	461e      	mov	r6, r3
 800749a:	b096      	sub	sp, #88	@ 0x58
 800749c:	da0c      	bge.n	80074b8 <__swhatbuf_r+0x2c>
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	2100      	movs	r1, #0
 80074a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074a6:	bf14      	ite	ne
 80074a8:	2340      	movne	r3, #64	@ 0x40
 80074aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074ae:	2000      	movs	r0, #0
 80074b0:	6031      	str	r1, [r6, #0]
 80074b2:	602b      	str	r3, [r5, #0]
 80074b4:	b016      	add	sp, #88	@ 0x58
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	466a      	mov	r2, sp
 80074ba:	f000 f849 	bl	8007550 <_fstat_r>
 80074be:	2800      	cmp	r0, #0
 80074c0:	dbed      	blt.n	800749e <__swhatbuf_r+0x12>
 80074c2:	9901      	ldr	r1, [sp, #4]
 80074c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80074c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074cc:	4259      	negs	r1, r3
 80074ce:	4159      	adcs	r1, r3
 80074d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074d4:	e7eb      	b.n	80074ae <__swhatbuf_r+0x22>

080074d6 <__smakebuf_r>:
 80074d6:	898b      	ldrh	r3, [r1, #12]
 80074d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074da:	079d      	lsls	r5, r3, #30
 80074dc:	4606      	mov	r6, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	d507      	bpl.n	80074f2 <__smakebuf_r+0x1c>
 80074e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074e6:	6023      	str	r3, [r4, #0]
 80074e8:	6123      	str	r3, [r4, #16]
 80074ea:	2301      	movs	r3, #1
 80074ec:	6163      	str	r3, [r4, #20]
 80074ee:	b003      	add	sp, #12
 80074f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f2:	466a      	mov	r2, sp
 80074f4:	ab01      	add	r3, sp, #4
 80074f6:	f7ff ffc9 	bl	800748c <__swhatbuf_r>
 80074fa:	9f00      	ldr	r7, [sp, #0]
 80074fc:	4605      	mov	r5, r0
 80074fe:	4639      	mov	r1, r7
 8007500:	4630      	mov	r0, r6
 8007502:	f7ff fb0d 	bl	8006b20 <_malloc_r>
 8007506:	b948      	cbnz	r0, 800751c <__smakebuf_r+0x46>
 8007508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800750c:	059a      	lsls	r2, r3, #22
 800750e:	d4ee      	bmi.n	80074ee <__smakebuf_r+0x18>
 8007510:	f023 0303 	bic.w	r3, r3, #3
 8007514:	f043 0302 	orr.w	r3, r3, #2
 8007518:	81a3      	strh	r3, [r4, #12]
 800751a:	e7e2      	b.n	80074e2 <__smakebuf_r+0xc>
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007526:	81a3      	strh	r3, [r4, #12]
 8007528:	9b01      	ldr	r3, [sp, #4]
 800752a:	6020      	str	r0, [r4, #0]
 800752c:	b15b      	cbz	r3, 8007546 <__smakebuf_r+0x70>
 800752e:	4630      	mov	r0, r6
 8007530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007534:	f000 f81e 	bl	8007574 <_isatty_r>
 8007538:	b128      	cbz	r0, 8007546 <__smakebuf_r+0x70>
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f023 0303 	bic.w	r3, r3, #3
 8007540:	f043 0301 	orr.w	r3, r3, #1
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	431d      	orrs	r5, r3
 800754a:	81a5      	strh	r5, [r4, #12]
 800754c:	e7cf      	b.n	80074ee <__smakebuf_r+0x18>
	...

08007550 <_fstat_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	2300      	movs	r3, #0
 8007554:	4d06      	ldr	r5, [pc, #24]	@ (8007570 <_fstat_r+0x20>)
 8007556:	4604      	mov	r4, r0
 8007558:	4608      	mov	r0, r1
 800755a:	4611      	mov	r1, r2
 800755c:	602b      	str	r3, [r5, #0]
 800755e:	f000 f932 	bl	80077c6 <_fstat>
 8007562:	1c43      	adds	r3, r0, #1
 8007564:	d102      	bne.n	800756c <_fstat_r+0x1c>
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	b103      	cbz	r3, 800756c <_fstat_r+0x1c>
 800756a:	6023      	str	r3, [r4, #0]
 800756c:	bd38      	pop	{r3, r4, r5, pc}
 800756e:	bf00      	nop
 8007570:	20002678 	.word	0x20002678

08007574 <_isatty_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	2300      	movs	r3, #0
 8007578:	4d05      	ldr	r5, [pc, #20]	@ (8007590 <_isatty_r+0x1c>)
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	602b      	str	r3, [r5, #0]
 8007580:	f000 fa86 	bl	8007a90 <_isatty>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_isatty_r+0x1a>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_isatty_r+0x1a>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	20002678 	.word	0x20002678

08007594 <findslot>:
 8007594:	4b0a      	ldr	r3, [pc, #40]	@ (80075c0 <findslot+0x2c>)
 8007596:	b510      	push	{r4, lr}
 8007598:	4604      	mov	r4, r0
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	b118      	cbz	r0, 80075a6 <findslot+0x12>
 800759e:	6a03      	ldr	r3, [r0, #32]
 80075a0:	b90b      	cbnz	r3, 80075a6 <findslot+0x12>
 80075a2:	f7ff f92f 	bl	8006804 <__sinit>
 80075a6:	2c13      	cmp	r4, #19
 80075a8:	d807      	bhi.n	80075ba <findslot+0x26>
 80075aa:	4806      	ldr	r0, [pc, #24]	@ (80075c4 <findslot+0x30>)
 80075ac:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80075b0:	3201      	adds	r2, #1
 80075b2:	d002      	beq.n	80075ba <findslot+0x26>
 80075b4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	2000      	movs	r0, #0
 80075bc:	e7fc      	b.n	80075b8 <findslot+0x24>
 80075be:	bf00      	nop
 80075c0:	20000020 	.word	0x20000020
 80075c4:	20002694 	.word	0x20002694

080075c8 <error>:
 80075c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ca:	4604      	mov	r4, r0
 80075cc:	f7ff fa02 	bl	80069d4 <__errno>
 80075d0:	2613      	movs	r6, #19
 80075d2:	4605      	mov	r5, r0
 80075d4:	2700      	movs	r7, #0
 80075d6:	4630      	mov	r0, r6
 80075d8:	4639      	mov	r1, r7
 80075da:	beab      	bkpt	0x00ab
 80075dc:	4606      	mov	r6, r0
 80075de:	4620      	mov	r0, r4
 80075e0:	602e      	str	r6, [r5, #0]
 80075e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075e4 <checkerror>:
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d101      	bne.n	80075ec <checkerror+0x8>
 80075e8:	f7ff bfee 	b.w	80075c8 <error>
 80075ec:	4770      	bx	lr

080075ee <_swiread>:
 80075ee:	b530      	push	{r4, r5, lr}
 80075f0:	b085      	sub	sp, #20
 80075f2:	2406      	movs	r4, #6
 80075f4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80075f8:	9203      	str	r2, [sp, #12]
 80075fa:	ad01      	add	r5, sp, #4
 80075fc:	4620      	mov	r0, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	beab      	bkpt	0x00ab
 8007602:	4604      	mov	r4, r0
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff ffed 	bl	80075e4 <checkerror>
 800760a:	b005      	add	sp, #20
 800760c:	bd30      	pop	{r4, r5, pc}

0800760e <_read>:
 800760e:	b570      	push	{r4, r5, r6, lr}
 8007610:	460e      	mov	r6, r1
 8007612:	4614      	mov	r4, r2
 8007614:	f7ff ffbe 	bl	8007594 <findslot>
 8007618:	4605      	mov	r5, r0
 800761a:	b930      	cbnz	r0, 800762a <_read+0x1c>
 800761c:	f7ff f9da 	bl	80069d4 <__errno>
 8007620:	2309      	movs	r3, #9
 8007622:	6003      	str	r3, [r0, #0]
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	bd70      	pop	{r4, r5, r6, pc}
 800762a:	4622      	mov	r2, r4
 800762c:	4631      	mov	r1, r6
 800762e:	6800      	ldr	r0, [r0, #0]
 8007630:	f7ff ffdd 	bl	80075ee <_swiread>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d0f5      	beq.n	8007624 <_read+0x16>
 8007638:	686b      	ldr	r3, [r5, #4]
 800763a:	1a20      	subs	r0, r4, r0
 800763c:	4403      	add	r3, r0
 800763e:	606b      	str	r3, [r5, #4]
 8007640:	e7f2      	b.n	8007628 <_read+0x1a>

08007642 <_swilseek>:
 8007642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007644:	460c      	mov	r4, r1
 8007646:	4616      	mov	r6, r2
 8007648:	f7ff ffa4 	bl	8007594 <findslot>
 800764c:	4605      	mov	r5, r0
 800764e:	b940      	cbnz	r0, 8007662 <_swilseek+0x20>
 8007650:	f7ff f9c0 	bl	80069d4 <__errno>
 8007654:	2309      	movs	r3, #9
 8007656:	6003      	str	r3, [r0, #0]
 8007658:	f04f 34ff 	mov.w	r4, #4294967295
 800765c:	4620      	mov	r0, r4
 800765e:	b003      	add	sp, #12
 8007660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007662:	2e02      	cmp	r6, #2
 8007664:	d903      	bls.n	800766e <_swilseek+0x2c>
 8007666:	f7ff f9b5 	bl	80069d4 <__errno>
 800766a:	2316      	movs	r3, #22
 800766c:	e7f3      	b.n	8007656 <_swilseek+0x14>
 800766e:	2e01      	cmp	r6, #1
 8007670:	d112      	bne.n	8007698 <_swilseek+0x56>
 8007672:	6843      	ldr	r3, [r0, #4]
 8007674:	18e4      	adds	r4, r4, r3
 8007676:	d4f6      	bmi.n	8007666 <_swilseek+0x24>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	260a      	movs	r6, #10
 800767c:	466f      	mov	r7, sp
 800767e:	e9cd 3400 	strd	r3, r4, [sp]
 8007682:	4630      	mov	r0, r6
 8007684:	4639      	mov	r1, r7
 8007686:	beab      	bkpt	0x00ab
 8007688:	4606      	mov	r6, r0
 800768a:	4630      	mov	r0, r6
 800768c:	f7ff ffaa 	bl	80075e4 <checkerror>
 8007690:	2800      	cmp	r0, #0
 8007692:	dbe1      	blt.n	8007658 <_swilseek+0x16>
 8007694:	606c      	str	r4, [r5, #4]
 8007696:	e7e1      	b.n	800765c <_swilseek+0x1a>
 8007698:	2e02      	cmp	r6, #2
 800769a:	6803      	ldr	r3, [r0, #0]
 800769c:	d1ec      	bne.n	8007678 <_swilseek+0x36>
 800769e:	260c      	movs	r6, #12
 80076a0:	466f      	mov	r7, sp
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4630      	mov	r0, r6
 80076a6:	4639      	mov	r1, r7
 80076a8:	beab      	bkpt	0x00ab
 80076aa:	4606      	mov	r6, r0
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff ff99 	bl	80075e4 <checkerror>
 80076b2:	1c43      	adds	r3, r0, #1
 80076b4:	d0d0      	beq.n	8007658 <_swilseek+0x16>
 80076b6:	4404      	add	r4, r0
 80076b8:	e7de      	b.n	8007678 <_swilseek+0x36>

080076ba <_lseek>:
 80076ba:	f7ff bfc2 	b.w	8007642 <_swilseek>

080076be <_swiwrite>:
 80076be:	b530      	push	{r4, r5, lr}
 80076c0:	b085      	sub	sp, #20
 80076c2:	2405      	movs	r4, #5
 80076c4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80076c8:	9203      	str	r2, [sp, #12]
 80076ca:	ad01      	add	r5, sp, #4
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	beab      	bkpt	0x00ab
 80076d2:	4604      	mov	r4, r0
 80076d4:	4620      	mov	r0, r4
 80076d6:	f7ff ff85 	bl	80075e4 <checkerror>
 80076da:	b005      	add	sp, #20
 80076dc:	bd30      	pop	{r4, r5, pc}

080076de <_write>:
 80076de:	b570      	push	{r4, r5, r6, lr}
 80076e0:	460e      	mov	r6, r1
 80076e2:	4615      	mov	r5, r2
 80076e4:	f7ff ff56 	bl	8007594 <findslot>
 80076e8:	4604      	mov	r4, r0
 80076ea:	b930      	cbnz	r0, 80076fa <_write+0x1c>
 80076ec:	f7ff f972 	bl	80069d4 <__errno>
 80076f0:	2309      	movs	r3, #9
 80076f2:	6003      	str	r3, [r0, #0]
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295
 80076f8:	bd70      	pop	{r4, r5, r6, pc}
 80076fa:	462a      	mov	r2, r5
 80076fc:	4631      	mov	r1, r6
 80076fe:	6800      	ldr	r0, [r0, #0]
 8007700:	f7ff ffdd 	bl	80076be <_swiwrite>
 8007704:	1e03      	subs	r3, r0, #0
 8007706:	dbf5      	blt.n	80076f4 <_write+0x16>
 8007708:	6862      	ldr	r2, [r4, #4]
 800770a:	1ae8      	subs	r0, r5, r3
 800770c:	4402      	add	r2, r0
 800770e:	42ab      	cmp	r3, r5
 8007710:	6062      	str	r2, [r4, #4]
 8007712:	d1f1      	bne.n	80076f8 <_write+0x1a>
 8007714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007718:	2000      	movs	r0, #0
 800771a:	f7ff bf55 	b.w	80075c8 <error>

0800771e <_swiclose>:
 800771e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007720:	2402      	movs	r4, #2
 8007722:	9001      	str	r0, [sp, #4]
 8007724:	ad01      	add	r5, sp, #4
 8007726:	4620      	mov	r0, r4
 8007728:	4629      	mov	r1, r5
 800772a:	beab      	bkpt	0x00ab
 800772c:	4604      	mov	r4, r0
 800772e:	4620      	mov	r0, r4
 8007730:	f7ff ff58 	bl	80075e4 <checkerror>
 8007734:	b003      	add	sp, #12
 8007736:	bd30      	pop	{r4, r5, pc}

08007738 <_close>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4605      	mov	r5, r0
 800773c:	f7ff ff2a 	bl	8007594 <findslot>
 8007740:	4604      	mov	r4, r0
 8007742:	b930      	cbnz	r0, 8007752 <_close+0x1a>
 8007744:	f7ff f946 	bl	80069d4 <__errno>
 8007748:	2309      	movs	r3, #9
 800774a:	6003      	str	r3, [r0, #0]
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	bd38      	pop	{r3, r4, r5, pc}
 8007752:	3d01      	subs	r5, #1
 8007754:	2d01      	cmp	r5, #1
 8007756:	d809      	bhi.n	800776c <_close+0x34>
 8007758:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <_close+0x48>)
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	429a      	cmp	r2, r3
 8007760:	d104      	bne.n	800776c <_close+0x34>
 8007762:	f04f 33ff 	mov.w	r3, #4294967295
 8007766:	6003      	str	r3, [r0, #0]
 8007768:	2000      	movs	r0, #0
 800776a:	e7f1      	b.n	8007750 <_close+0x18>
 800776c:	6820      	ldr	r0, [r4, #0]
 800776e:	f7ff ffd6 	bl	800771e <_swiclose>
 8007772:	2800      	cmp	r0, #0
 8007774:	d1ec      	bne.n	8007750 <_close+0x18>
 8007776:	f04f 33ff 	mov.w	r3, #4294967295
 800777a:	6023      	str	r3, [r4, #0]
 800777c:	e7e8      	b.n	8007750 <_close+0x18>
 800777e:	bf00      	nop
 8007780:	20002694 	.word	0x20002694

08007784 <_swistat>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	460c      	mov	r4, r1
 8007788:	f7ff ff04 	bl	8007594 <findslot>
 800778c:	4605      	mov	r5, r0
 800778e:	b930      	cbnz	r0, 800779e <_swistat+0x1a>
 8007790:	f7ff f920 	bl	80069d4 <__errno>
 8007794:	2309      	movs	r3, #9
 8007796:	6003      	str	r3, [r0, #0]
 8007798:	f04f 30ff 	mov.w	r0, #4294967295
 800779c:	bd70      	pop	{r4, r5, r6, pc}
 800779e:	6863      	ldr	r3, [r4, #4]
 80077a0:	260c      	movs	r6, #12
 80077a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80077a6:	6063      	str	r3, [r4, #4]
 80077a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077ac:	64a3      	str	r3, [r4, #72]	@ 0x48
 80077ae:	4630      	mov	r0, r6
 80077b0:	4629      	mov	r1, r5
 80077b2:	beab      	bkpt	0x00ab
 80077b4:	4605      	mov	r5, r0
 80077b6:	4628      	mov	r0, r5
 80077b8:	f7ff ff14 	bl	80075e4 <checkerror>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d0eb      	beq.n	8007798 <_swistat+0x14>
 80077c0:	6120      	str	r0, [r4, #16]
 80077c2:	2000      	movs	r0, #0
 80077c4:	e7ea      	b.n	800779c <_swistat+0x18>

080077c6 <_fstat>:
 80077c6:	460b      	mov	r3, r1
 80077c8:	b510      	push	{r4, lr}
 80077ca:	2100      	movs	r1, #0
 80077cc:	4604      	mov	r4, r0
 80077ce:	2258      	movs	r2, #88	@ 0x58
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff f8a2 	bl	800691a <memset>
 80077d6:	4601      	mov	r1, r0
 80077d8:	4620      	mov	r0, r4
 80077da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077de:	f7ff bfd1 	b.w	8007784 <_swistat>

080077e2 <_stat>:
 80077e2:	b538      	push	{r3, r4, r5, lr}
 80077e4:	460d      	mov	r5, r1
 80077e6:	4604      	mov	r4, r0
 80077e8:	2258      	movs	r2, #88	@ 0x58
 80077ea:	2100      	movs	r1, #0
 80077ec:	4628      	mov	r0, r5
 80077ee:	f7ff f894 	bl	800691a <memset>
 80077f2:	4620      	mov	r0, r4
 80077f4:	2100      	movs	r1, #0
 80077f6:	f000 f811 	bl	800781c <_swiopen>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	4604      	mov	r4, r0
 80077fe:	d00b      	beq.n	8007818 <_stat+0x36>
 8007800:	686b      	ldr	r3, [r5, #4]
 8007802:	4629      	mov	r1, r5
 8007804:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007808:	606b      	str	r3, [r5, #4]
 800780a:	f7ff ffbb 	bl	8007784 <_swistat>
 800780e:	4605      	mov	r5, r0
 8007810:	4620      	mov	r0, r4
 8007812:	f7ff ff91 	bl	8007738 <_close>
 8007816:	462c      	mov	r4, r5
 8007818:	4620      	mov	r0, r4
 800781a:	bd38      	pop	{r3, r4, r5, pc}

0800781c <_swiopen>:
 800781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	4607      	mov	r7, r0
 8007822:	460e      	mov	r6, r1
 8007824:	2400      	movs	r4, #0
 8007826:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 80078cc <_swiopen+0xb0>
 800782a:	b096      	sub	sp, #88	@ 0x58
 800782c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8007830:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007834:	3301      	adds	r3, #1
 8007836:	d032      	beq.n	800789e <_swiopen+0x82>
 8007838:	3401      	adds	r4, #1
 800783a:	2c14      	cmp	r4, #20
 800783c:	d1f6      	bne.n	800782c <_swiopen+0x10>
 800783e:	f7ff f8c9 	bl	80069d4 <__errno>
 8007842:	2318      	movs	r3, #24
 8007844:	e03a      	b.n	80078bc <_swiopen+0xa0>
 8007846:	f240 6301 	movw	r3, #1537	@ 0x601
 800784a:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800784e:	07b2      	lsls	r2, r6, #30
 8007850:	bf48      	it	mi
 8007852:	f045 0502 	orrmi.w	r5, r5, #2
 8007856:	421e      	tst	r6, r3
 8007858:	bf18      	it	ne
 800785a:	f045 0504 	orrne.w	r5, r5, #4
 800785e:	0733      	lsls	r3, r6, #28
 8007860:	bf48      	it	mi
 8007862:	f025 0504 	bicmi.w	r5, r5, #4
 8007866:	4638      	mov	r0, r7
 8007868:	bf48      	it	mi
 800786a:	f045 0508 	orrmi.w	r5, r5, #8
 800786e:	9700      	str	r7, [sp, #0]
 8007870:	f7f8 fc86 	bl	8000180 <strlen>
 8007874:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007878:	2501      	movs	r5, #1
 800787a:	4628      	mov	r0, r5
 800787c:	4651      	mov	r1, sl
 800787e:	beab      	bkpt	0x00ab
 8007880:	4605      	mov	r5, r0
 8007882:	2d00      	cmp	r5, #0
 8007884:	db06      	blt.n	8007894 <_swiopen+0x78>
 8007886:	2300      	movs	r3, #0
 8007888:	44c8      	add	r8, r9
 800788a:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 800788e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007892:	e016      	b.n	80078c2 <_swiopen+0xa6>
 8007894:	4628      	mov	r0, r5
 8007896:	f7ff fe97 	bl	80075c8 <error>
 800789a:	4604      	mov	r4, r0
 800789c:	e011      	b.n	80078c2 <_swiopen+0xa6>
 800789e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80078a2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80078a6:	46ea      	mov	sl, sp
 80078a8:	d1cd      	bne.n	8007846 <_swiopen+0x2a>
 80078aa:	4651      	mov	r1, sl
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff ff98 	bl	80077e2 <_stat>
 80078b2:	3001      	adds	r0, #1
 80078b4:	d0c7      	beq.n	8007846 <_swiopen+0x2a>
 80078b6:	f7ff f88d 	bl	80069d4 <__errno>
 80078ba:	2311      	movs	r3, #17
 80078bc:	f04f 34ff 	mov.w	r4, #4294967295
 80078c0:	6003      	str	r3, [r0, #0]
 80078c2:	4620      	mov	r0, r4
 80078c4:	b016      	add	sp, #88	@ 0x58
 80078c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ca:	bf00      	nop
 80078cc:	20002694 	.word	0x20002694

080078d0 <_get_semihosting_exts>:
 80078d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	4606      	mov	r6, r0
 80078d6:	460f      	mov	r7, r1
 80078d8:	4829      	ldr	r0, [pc, #164]	@ (8007980 <_get_semihosting_exts+0xb0>)
 80078da:	2100      	movs	r1, #0
 80078dc:	4615      	mov	r5, r2
 80078de:	f7ff ff9d 	bl	800781c <_swiopen>
 80078e2:	4604      	mov	r4, r0
 80078e4:	462a      	mov	r2, r5
 80078e6:	2100      	movs	r1, #0
 80078e8:	4630      	mov	r0, r6
 80078ea:	f7ff f816 	bl	800691a <memset>
 80078ee:	1c63      	adds	r3, r4, #1
 80078f0:	d014      	beq.n	800791c <_get_semihosting_exts+0x4c>
 80078f2:	4620      	mov	r0, r4
 80078f4:	f7ff fe4e 	bl	8007594 <findslot>
 80078f8:	f04f 080c 	mov.w	r8, #12
 80078fc:	4681      	mov	r9, r0
 80078fe:	4640      	mov	r0, r8
 8007900:	4649      	mov	r1, r9
 8007902:	beab      	bkpt	0x00ab
 8007904:	4680      	mov	r8, r0
 8007906:	4640      	mov	r0, r8
 8007908:	f7ff fe6c 	bl	80075e4 <checkerror>
 800790c:	2803      	cmp	r0, #3
 800790e:	dd02      	ble.n	8007916 <_get_semihosting_exts+0x46>
 8007910:	1ec3      	subs	r3, r0, #3
 8007912:	42ab      	cmp	r3, r5
 8007914:	dc07      	bgt.n	8007926 <_get_semihosting_exts+0x56>
 8007916:	4620      	mov	r0, r4
 8007918:	f7ff ff0e 	bl	8007738 <_close>
 800791c:	f04f 30ff 	mov.w	r0, #4294967295
 8007920:	b003      	add	sp, #12
 8007922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007926:	2204      	movs	r2, #4
 8007928:	4620      	mov	r0, r4
 800792a:	eb0d 0102 	add.w	r1, sp, r2
 800792e:	f7ff fe6e 	bl	800760e <_read>
 8007932:	2803      	cmp	r0, #3
 8007934:	ddef      	ble.n	8007916 <_get_semihosting_exts+0x46>
 8007936:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800793a:	2b53      	cmp	r3, #83	@ 0x53
 800793c:	d1eb      	bne.n	8007916 <_get_semihosting_exts+0x46>
 800793e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007942:	2b48      	cmp	r3, #72	@ 0x48
 8007944:	d1e7      	bne.n	8007916 <_get_semihosting_exts+0x46>
 8007946:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800794a:	2b46      	cmp	r3, #70	@ 0x46
 800794c:	d1e3      	bne.n	8007916 <_get_semihosting_exts+0x46>
 800794e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007952:	2b42      	cmp	r3, #66	@ 0x42
 8007954:	d1df      	bne.n	8007916 <_get_semihosting_exts+0x46>
 8007956:	2201      	movs	r2, #1
 8007958:	4639      	mov	r1, r7
 800795a:	4620      	mov	r0, r4
 800795c:	f7ff fe71 	bl	8007642 <_swilseek>
 8007960:	2800      	cmp	r0, #0
 8007962:	dbd8      	blt.n	8007916 <_get_semihosting_exts+0x46>
 8007964:	462a      	mov	r2, r5
 8007966:	4631      	mov	r1, r6
 8007968:	4620      	mov	r0, r4
 800796a:	f7ff fe50 	bl	800760e <_read>
 800796e:	4605      	mov	r5, r0
 8007970:	4620      	mov	r0, r4
 8007972:	f7ff fee1 	bl	8007738 <_close>
 8007976:	4628      	mov	r0, r5
 8007978:	f7ff fe34 	bl	80075e4 <checkerror>
 800797c:	e7d0      	b.n	8007920 <_get_semihosting_exts+0x50>
 800797e:	bf00      	nop
 8007980:	08007ca3 	.word	0x08007ca3

08007984 <initialise_semihosting_exts>:
 8007984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007986:	2100      	movs	r1, #0
 8007988:	2201      	movs	r2, #1
 800798a:	4d09      	ldr	r5, [pc, #36]	@ (80079b0 <initialise_semihosting_exts+0x2c>)
 800798c:	4c09      	ldr	r4, [pc, #36]	@ (80079b4 <initialise_semihosting_exts+0x30>)
 800798e:	a801      	add	r0, sp, #4
 8007990:	6029      	str	r1, [r5, #0]
 8007992:	6022      	str	r2, [r4, #0]
 8007994:	f7ff ff9c 	bl	80078d0 <_get_semihosting_exts>
 8007998:	2800      	cmp	r0, #0
 800799a:	dd07      	ble.n	80079ac <initialise_semihosting_exts+0x28>
 800799c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80079a0:	f003 0201 	and.w	r2, r3, #1
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	602a      	str	r2, [r5, #0]
 80079aa:	6023      	str	r3, [r4, #0]
 80079ac:	b003      	add	sp, #12
 80079ae:	bd30      	pop	{r4, r5, pc}
 80079b0:	20000074 	.word	0x20000074
 80079b4:	20000070 	.word	0x20000070

080079b8 <_has_ext_stdout_stderr>:
 80079b8:	b510      	push	{r4, lr}
 80079ba:	4c04      	ldr	r4, [pc, #16]	@ (80079cc <_has_ext_stdout_stderr+0x14>)
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	da01      	bge.n	80079c6 <_has_ext_stdout_stderr+0xe>
 80079c2:	f7ff ffdf 	bl	8007984 <initialise_semihosting_exts>
 80079c6:	6820      	ldr	r0, [r4, #0]
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	bf00      	nop
 80079cc:	20000070 	.word	0x20000070

080079d0 <initialise_monitor_handles>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	2303      	movs	r3, #3
 80079d6:	2400      	movs	r4, #0
 80079d8:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8007a7c <initialise_monitor_handles+0xac>
 80079dc:	b085      	sub	sp, #20
 80079de:	f8cd 9004 	str.w	r9, [sp, #4]
 80079e2:	af01      	add	r7, sp, #4
 80079e4:	9303      	str	r3, [sp, #12]
 80079e6:	2501      	movs	r5, #1
 80079e8:	9402      	str	r4, [sp, #8]
 80079ea:	4628      	mov	r0, r5
 80079ec:	4639      	mov	r1, r7
 80079ee:	beab      	bkpt	0x00ab
 80079f0:	4605      	mov	r5, r0
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8007a80 <initialise_monitor_handles+0xb0>
 80079fa:	4623      	mov	r3, r4
 80079fc:	4c21      	ldr	r4, [pc, #132]	@ (8007a84 <initialise_monitor_handles+0xb4>)
 80079fe:	f8c8 5000 	str.w	r5, [r8]
 8007a02:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007a06:	3301      	adds	r3, #1
 8007a08:	2b14      	cmp	r3, #20
 8007a0a:	d1fa      	bne.n	8007a02 <initialise_monitor_handles+0x32>
 8007a0c:	f7ff ffd4 	bl	80079b8 <_has_ext_stdout_stderr>
 8007a10:	4d1d      	ldr	r5, [pc, #116]	@ (8007a88 <initialise_monitor_handles+0xb8>)
 8007a12:	b1d0      	cbz	r0, 8007a4a <initialise_monitor_handles+0x7a>
 8007a14:	f04f 0a03 	mov.w	sl, #3
 8007a18:	2304      	movs	r3, #4
 8007a1a:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a1e:	2601      	movs	r6, #1
 8007a20:	f8cd a00c 	str.w	sl, [sp, #12]
 8007a24:	9302      	str	r3, [sp, #8]
 8007a26:	4630      	mov	r0, r6
 8007a28:	4639      	mov	r1, r7
 8007a2a:	beab      	bkpt	0x00ab
 8007a2c:	4683      	mov	fp, r0
 8007a2e:	4b17      	ldr	r3, [pc, #92]	@ (8007a8c <initialise_monitor_handles+0xbc>)
 8007a30:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a34:	f8c3 b000 	str.w	fp, [r3]
 8007a38:	2308      	movs	r3, #8
 8007a3a:	f8cd a00c 	str.w	sl, [sp, #12]
 8007a3e:	9302      	str	r3, [sp, #8]
 8007a40:	4630      	mov	r0, r6
 8007a42:	4639      	mov	r1, r7
 8007a44:	beab      	bkpt	0x00ab
 8007a46:	4606      	mov	r6, r0
 8007a48:	602e      	str	r6, [r5, #0]
 8007a4a:	2600      	movs	r6, #0
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	6066      	str	r6, [r4, #4]
 8007a50:	3301      	adds	r3, #1
 8007a52:	bf02      	ittt	eq
 8007a54:	4b0d      	ldreq	r3, [pc, #52]	@ (8007a8c <initialise_monitor_handles+0xbc>)
 8007a56:	681b      	ldreq	r3, [r3, #0]
 8007a58:	602b      	streq	r3, [r5, #0]
 8007a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a5e:	6023      	str	r3, [r4, #0]
 8007a60:	f7ff ffaa 	bl	80079b8 <_has_ext_stdout_stderr>
 8007a64:	b130      	cbz	r0, 8007a74 <initialise_monitor_handles+0xa4>
 8007a66:	4b09      	ldr	r3, [pc, #36]	@ (8007a8c <initialise_monitor_handles+0xbc>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007a6e:	682b      	ldr	r3, [r5, #0]
 8007a70:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007a74:	b005      	add	sp, #20
 8007a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7a:	bf00      	nop
 8007a7c:	08007cb9 	.word	0x08007cb9
 8007a80:	20002690 	.word	0x20002690
 8007a84:	20002694 	.word	0x20002694
 8007a88:	20002688 	.word	0x20002688
 8007a8c:	2000268c 	.word	0x2000268c

08007a90 <_isatty>:
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	f7ff fd7f 	bl	8007594 <findslot>
 8007a96:	2409      	movs	r4, #9
 8007a98:	4605      	mov	r5, r0
 8007a9a:	b920      	cbnz	r0, 8007aa6 <_isatty+0x16>
 8007a9c:	f7fe ff9a 	bl	80069d4 <__errno>
 8007aa0:	6004      	str	r4, [r0, #0]
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	bd70      	pop	{r4, r5, r6, pc}
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	beab      	bkpt	0x00ab
 8007aac:	4604      	mov	r4, r0
 8007aae:	2c01      	cmp	r4, #1
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	d0f7      	beq.n	8007aa4 <_isatty+0x14>
 8007ab4:	f7fe ff8e 	bl	80069d4 <__errno>
 8007ab8:	2513      	movs	r5, #19
 8007aba:	4604      	mov	r4, r0
 8007abc:	2600      	movs	r6, #0
 8007abe:	4628      	mov	r0, r5
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	beab      	bkpt	0x00ab
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	6025      	str	r5, [r4, #0]
 8007ac8:	e7eb      	b.n	8007aa2 <_isatty+0x12>
	...

08007acc <_init>:
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ace:	bf00      	nop
 8007ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad2:	bc08      	pop	{r3}
 8007ad4:	469e      	mov	lr, r3
 8007ad6:	4770      	bx	lr

08007ad8 <_fini>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	bf00      	nop
 8007adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ade:	bc08      	pop	{r3}
 8007ae0:	469e      	mov	lr, r3
 8007ae2:	4770      	bx	lr
